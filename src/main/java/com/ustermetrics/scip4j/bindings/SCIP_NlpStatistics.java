// Generated by jextract

package com.ustermetrics.scip4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SCIP_NlpStatistics {
 *     int niterations;
 *     double totaltime;
 *     double evaltime;
 *     double consviol;
 *     double boundviol;
 * }
 * }
 */
public class SCIP_NlpStatistics {

    SCIP_NlpStatistics() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        scip_h.C_INT.withName("niterations"),
        MemoryLayout.paddingLayout(4),
        scip_h.C_DOUBLE.withName("totaltime"),
        scip_h.C_DOUBLE.withName("evaltime"),
        scip_h.C_DOUBLE.withName("consviol"),
        scip_h.C_DOUBLE.withName("boundviol")
    ).withName("SCIP_NlpStatistics");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt niterations$LAYOUT = (OfInt)$LAYOUT.select(groupElement("niterations"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int niterations
     * }
     */
    public static final OfInt niterations$layout() {
        return niterations$LAYOUT;
    }

    private static final long niterations$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int niterations
     * }
     */
    public static final long niterations$offset() {
        return niterations$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int niterations
     * }
     */
    public static int niterations(MemorySegment struct) {
        return struct.get(niterations$LAYOUT, niterations$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int niterations
     * }
     */
    public static void niterations(MemorySegment struct, int fieldValue) {
        struct.set(niterations$LAYOUT, niterations$OFFSET, fieldValue);
    }

    private static final OfDouble totaltime$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("totaltime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double totaltime
     * }
     */
    public static final OfDouble totaltime$layout() {
        return totaltime$LAYOUT;
    }

    private static final long totaltime$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double totaltime
     * }
     */
    public static final long totaltime$offset() {
        return totaltime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double totaltime
     * }
     */
    public static double totaltime(MemorySegment struct) {
        return struct.get(totaltime$LAYOUT, totaltime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double totaltime
     * }
     */
    public static void totaltime(MemorySegment struct, double fieldValue) {
        struct.set(totaltime$LAYOUT, totaltime$OFFSET, fieldValue);
    }

    private static final OfDouble evaltime$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("evaltime"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double evaltime
     * }
     */
    public static final OfDouble evaltime$layout() {
        return evaltime$LAYOUT;
    }

    private static final long evaltime$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double evaltime
     * }
     */
    public static final long evaltime$offset() {
        return evaltime$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double evaltime
     * }
     */
    public static double evaltime(MemorySegment struct) {
        return struct.get(evaltime$LAYOUT, evaltime$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double evaltime
     * }
     */
    public static void evaltime(MemorySegment struct, double fieldValue) {
        struct.set(evaltime$LAYOUT, evaltime$OFFSET, fieldValue);
    }

    private static final OfDouble consviol$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("consviol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double consviol
     * }
     */
    public static final OfDouble consviol$layout() {
        return consviol$LAYOUT;
    }

    private static final long consviol$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double consviol
     * }
     */
    public static final long consviol$offset() {
        return consviol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double consviol
     * }
     */
    public static double consviol(MemorySegment struct) {
        return struct.get(consviol$LAYOUT, consviol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double consviol
     * }
     */
    public static void consviol(MemorySegment struct, double fieldValue) {
        struct.set(consviol$LAYOUT, consviol$OFFSET, fieldValue);
    }

    private static final OfDouble boundviol$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("boundviol"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double boundviol
     * }
     */
    public static final OfDouble boundviol$layout() {
        return boundviol$LAYOUT;
    }

    private static final long boundviol$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double boundviol
     * }
     */
    public static final long boundviol$offset() {
        return boundviol$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double boundviol
     * }
     */
    public static double boundviol(MemorySegment struct) {
        return struct.get(boundviol$LAYOUT, boundviol$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double boundviol
     * }
     */
    public static void boundviol(MemorySegment struct, double fieldValue) {
        struct.set(boundviol$LAYOUT, boundviol$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

