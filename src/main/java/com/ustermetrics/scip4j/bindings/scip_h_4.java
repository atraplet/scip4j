// Generated by jextract

package com.ustermetrics.scip4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class scip_h_4 extends scip_h_5 {

    scip_h_4() {
        // Should not be called directly
    }
    private static final int SCIP_LPPAR_BARRIERCONVTOL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_BARRIERCONVTOL = 8
     * }
     */
    public static int SCIP_LPPAR_BARRIERCONVTOL() {
        return SCIP_LPPAR_BARRIERCONVTOL;
    }
    private static final int SCIP_LPPAR_OBJLIM = (int)9L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_OBJLIM = 9
     * }
     */
    public static int SCIP_LPPAR_OBJLIM() {
        return SCIP_LPPAR_OBJLIM;
    }
    private static final int SCIP_LPPAR_LPITLIM = (int)10L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_LPITLIM = 10
     * }
     */
    public static int SCIP_LPPAR_LPITLIM() {
        return SCIP_LPPAR_LPITLIM;
    }
    private static final int SCIP_LPPAR_LPTILIM = (int)11L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_LPTILIM = 11
     * }
     */
    public static int SCIP_LPPAR_LPTILIM() {
        return SCIP_LPPAR_LPTILIM;
    }
    private static final int SCIP_LPPAR_MARKOWITZ = (int)12L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_MARKOWITZ = 12
     * }
     */
    public static int SCIP_LPPAR_MARKOWITZ() {
        return SCIP_LPPAR_MARKOWITZ;
    }
    private static final int SCIP_LPPAR_ROWREPSWITCH = (int)13L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_ROWREPSWITCH = 13
     * }
     */
    public static int SCIP_LPPAR_ROWREPSWITCH() {
        return SCIP_LPPAR_ROWREPSWITCH;
    }
    private static final int SCIP_LPPAR_THREADS = (int)14L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_THREADS = 14
     * }
     */
    public static int SCIP_LPPAR_THREADS() {
        return SCIP_LPPAR_THREADS;
    }
    private static final int SCIP_LPPAR_CONDITIONLIMIT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_CONDITIONLIMIT = 15
     * }
     */
    public static int SCIP_LPPAR_CONDITIONLIMIT() {
        return SCIP_LPPAR_CONDITIONLIMIT;
    }
    private static final int SCIP_LPPAR_TIMING = (int)16L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_TIMING = 16
     * }
     */
    public static int SCIP_LPPAR_TIMING() {
        return SCIP_LPPAR_TIMING;
    }
    private static final int SCIP_LPPAR_RANDOMSEED = (int)17L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_RANDOMSEED = 17
     * }
     */
    public static int SCIP_LPPAR_RANDOMSEED() {
        return SCIP_LPPAR_RANDOMSEED;
    }
    private static final int SCIP_LPPAR_POLISHING = (int)18L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_POLISHING = 18
     * }
     */
    public static int SCIP_LPPAR_POLISHING() {
        return SCIP_LPPAR_POLISHING;
    }
    private static final int SCIP_LPPAR_REFACTOR = (int)19L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPParam.SCIP_LPPAR_REFACTOR = 19
     * }
     */
    public static int SCIP_LPPAR_REFACTOR() {
        return SCIP_LPPAR_REFACTOR;
    }
    private static final int SCIP_PRICING_LPIDEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_LPIDEFAULT = 0
     * }
     */
    public static int SCIP_PRICING_LPIDEFAULT() {
        return SCIP_PRICING_LPIDEFAULT;
    }
    private static final int SCIP_PRICING_AUTO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_AUTO = 1
     * }
     */
    public static int SCIP_PRICING_AUTO() {
        return SCIP_PRICING_AUTO;
    }
    private static final int SCIP_PRICING_FULL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_FULL = 2
     * }
     */
    public static int SCIP_PRICING_FULL() {
        return SCIP_PRICING_FULL;
    }
    private static final int SCIP_PRICING_PARTIAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_PARTIAL = 3
     * }
     */
    public static int SCIP_PRICING_PARTIAL() {
        return SCIP_PRICING_PARTIAL;
    }
    private static final int SCIP_PRICING_STEEP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_STEEP = 4
     * }
     */
    public static int SCIP_PRICING_STEEP() {
        return SCIP_PRICING_STEEP;
    }
    private static final int SCIP_PRICING_STEEPQSTART = (int)5L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_STEEPQSTART = 5
     * }
     */
    public static int SCIP_PRICING_STEEPQSTART() {
        return SCIP_PRICING_STEEPQSTART;
    }
    private static final int SCIP_PRICING_DEVEX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Pricing.SCIP_PRICING_DEVEX = 6
     * }
     */
    public static int SCIP_PRICING_DEVEX() {
        return SCIP_PRICING_DEVEX;
    }
    private static final int SCIP_BASESTAT_LOWER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SCIP_BaseStat.SCIP_BASESTAT_LOWER = 0
     * }
     */
    public static int SCIP_BASESTAT_LOWER() {
        return SCIP_BASESTAT_LOWER;
    }
    private static final int SCIP_BASESTAT_BASIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SCIP_BaseStat.SCIP_BASESTAT_BASIC = 1
     * }
     */
    public static int SCIP_BASESTAT_BASIC() {
        return SCIP_BASESTAT_BASIC;
    }
    private static final int SCIP_BASESTAT_UPPER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SCIP_BaseStat.SCIP_BASESTAT_UPPER = 2
     * }
     */
    public static int SCIP_BASESTAT_UPPER() {
        return SCIP_BASESTAT_UPPER;
    }
    private static final int SCIP_BASESTAT_ZERO = (int)3L;
    /**
     * {@snippet lang=c :
     * enum SCIP_BaseStat.SCIP_BASESTAT_ZERO = 3
     * }
     */
    public static int SCIP_BASESTAT_ZERO() {
        return SCIP_BASESTAT_ZERO;
    }
    private static final int SCIP_LPSOLQUALITY_ESTIMCONDITION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPSolQuality.SCIP_LPSOLQUALITY_ESTIMCONDITION = 0
     * }
     */
    public static int SCIP_LPSOLQUALITY_ESTIMCONDITION() {
        return SCIP_LPSOLQUALITY_ESTIMCONDITION;
    }
    private static final int SCIP_LPSOLQUALITY_EXACTCONDITION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SCIP_LPSolQuality.SCIP_LPSOLQUALITY_EXACTCONDITION = 1
     * }
     */
    public static int SCIP_LPSOLQUALITY_EXACTCONDITION() {
        return SCIP_LPSOLQUALITY_EXACTCONDITION;
    }

    private static class SCIPcolSort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolSort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPcolSort(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolSort$descriptor() {
        return SCIPcolSort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPcolSort(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolSort$handle() {
        return SCIPcolSort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPcolSort(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolSort$address() {
        return SCIPcolSort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPcolSort(SCIP_COL *col)
     * }
     */
    public static void SCIPcolSort(MemorySegment col) {
        var mh$ = SCIPcolSort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolSort", col);
            }
            mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetObj {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetObj");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetObj(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetObj$descriptor() {
        return SCIPcolGetObj.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetObj(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetObj$handle() {
        return SCIPcolGetObj.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetObj(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetObj$address() {
        return SCIPcolGetObj.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetObj(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetObj(MemorySegment col) {
        var mh$ = SCIPcolGetObj.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetObj", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetLb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetLb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetLb(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetLb$descriptor() {
        return SCIPcolGetLb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetLb(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetLb$handle() {
        return SCIPcolGetLb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetLb(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetLb$address() {
        return SCIPcolGetLb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetLb(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetLb(MemorySegment col) {
        var mh$ = SCIPcolGetLb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetLb", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetUb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetUb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetUb(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetUb$descriptor() {
        return SCIPcolGetUb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetUb(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetUb$handle() {
        return SCIPcolGetUb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetUb(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetUb$address() {
        return SCIPcolGetUb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetUb(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetUb(MemorySegment col) {
        var mh$ = SCIPcolGetUb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetUb", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetBestBound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetBestBound");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetBestBound(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetBestBound$descriptor() {
        return SCIPcolGetBestBound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetBestBound(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetBestBound$handle() {
        return SCIPcolGetBestBound.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetBestBound(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetBestBound$address() {
        return SCIPcolGetBestBound.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetBestBound(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetBestBound(MemorySegment col) {
        var mh$ = SCIPcolGetBestBound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetBestBound", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetPrimsol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetPrimsol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetPrimsol(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetPrimsol$descriptor() {
        return SCIPcolGetPrimsol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetPrimsol(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetPrimsol$handle() {
        return SCIPcolGetPrimsol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetPrimsol(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetPrimsol$address() {
        return SCIPcolGetPrimsol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetPrimsol(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetPrimsol(MemorySegment col) {
        var mh$ = SCIPcolGetPrimsol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetPrimsol", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetMinPrimsol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetMinPrimsol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetMinPrimsol(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetMinPrimsol$descriptor() {
        return SCIPcolGetMinPrimsol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetMinPrimsol(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetMinPrimsol$handle() {
        return SCIPcolGetMinPrimsol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetMinPrimsol(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetMinPrimsol$address() {
        return SCIPcolGetMinPrimsol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetMinPrimsol(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetMinPrimsol(MemorySegment col) {
        var mh$ = SCIPcolGetMinPrimsol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetMinPrimsol", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetMaxPrimsol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetMaxPrimsol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcolGetMaxPrimsol(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetMaxPrimsol$descriptor() {
        return SCIPcolGetMaxPrimsol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcolGetMaxPrimsol(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetMaxPrimsol$handle() {
        return SCIPcolGetMaxPrimsol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcolGetMaxPrimsol(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetMaxPrimsol$address() {
        return SCIPcolGetMaxPrimsol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcolGetMaxPrimsol(SCIP_COL *col)
     * }
     */
    public static double SCIPcolGetMaxPrimsol(MemorySegment col) {
        var mh$ = SCIPcolGetMaxPrimsol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetMaxPrimsol", col);
            }
            return (double)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetBasisStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetBasisStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIPcolGetBasisStatus(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetBasisStatus$descriptor() {
        return SCIPcolGetBasisStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIPcolGetBasisStatus(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetBasisStatus$handle() {
        return SCIPcolGetBasisStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIPcolGetBasisStatus(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetBasisStatus$address() {
        return SCIPcolGetBasisStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIPcolGetBasisStatus(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetBasisStatus(MemorySegment col) {
        var mh$ = SCIPcolGetBasisStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetBasisStatus", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetVar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetVar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPcolGetVar(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetVar$descriptor() {
        return SCIPcolGetVar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPcolGetVar(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetVar$handle() {
        return SCIPcolGetVar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPcolGetVar(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetVar$address() {
        return SCIPcolGetVar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR *SCIPcolGetVar(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetVar(MemorySegment col) {
        var mh$ = SCIPcolGetVar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetVar", col);
            }
            return (MemorySegment)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetIndex(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetIndex$descriptor() {
        return SCIPcolGetIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetIndex(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetIndex$handle() {
        return SCIPcolGetIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetIndex(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetIndex$address() {
        return SCIPcolGetIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetIndex(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetIndex(MemorySegment col) {
        var mh$ = SCIPcolGetIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetIndex", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetVarProbindex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetVarProbindex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetVarProbindex(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetVarProbindex$descriptor() {
        return SCIPcolGetVarProbindex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetVarProbindex(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetVarProbindex$handle() {
        return SCIPcolGetVarProbindex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetVarProbindex(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetVarProbindex$address() {
        return SCIPcolGetVarProbindex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetVarProbindex(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetVarProbindex(MemorySegment col) {
        var mh$ = SCIPcolGetVarProbindex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetVarProbindex", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolIsIntegral {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolIsIntegral");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsIntegral(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolIsIntegral$descriptor() {
        return SCIPcolIsIntegral.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsIntegral(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolIsIntegral$handle() {
        return SCIPcolIsIntegral.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsIntegral(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolIsIntegral$address() {
        return SCIPcolIsIntegral.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPcolIsIntegral(SCIP_COL *col)
     * }
     */
    public static int SCIPcolIsIntegral(MemorySegment col) {
        var mh$ = SCIPcolIsIntegral.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolIsIntegral", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolIsRemovable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolIsRemovable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsRemovable(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolIsRemovable$descriptor() {
        return SCIPcolIsRemovable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsRemovable(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolIsRemovable$handle() {
        return SCIPcolIsRemovable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsRemovable(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolIsRemovable$address() {
        return SCIPcolIsRemovable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPcolIsRemovable(SCIP_COL *col)
     * }
     */
    public static int SCIPcolIsRemovable(MemorySegment col) {
        var mh$ = SCIPcolIsRemovable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolIsRemovable", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetLPPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetLPPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetLPPos(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetLPPos$descriptor() {
        return SCIPcolGetLPPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetLPPos(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetLPPos$handle() {
        return SCIPcolGetLPPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetLPPos(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetLPPos$address() {
        return SCIPcolGetLPPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetLPPos(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetLPPos(MemorySegment col) {
        var mh$ = SCIPcolGetLPPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetLPPos", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetLPDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetLPDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetLPDepth(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetLPDepth$descriptor() {
        return SCIPcolGetLPDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetLPDepth(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetLPDepth$handle() {
        return SCIPcolGetLPDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetLPDepth(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetLPDepth$address() {
        return SCIPcolGetLPDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetLPDepth(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetLPDepth(MemorySegment col) {
        var mh$ = SCIPcolGetLPDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetLPDepth", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolIsInLP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolIsInLP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsInLP(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolIsInLP$descriptor() {
        return SCIPcolIsInLP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsInLP(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolIsInLP$handle() {
        return SCIPcolIsInLP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPcolIsInLP(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolIsInLP$address() {
        return SCIPcolIsInLP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPcolIsInLP(SCIP_COL *col)
     * }
     */
    public static int SCIPcolIsInLP(MemorySegment col) {
        var mh$ = SCIPcolIsInLP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolIsInLP", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetNNonz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetNNonz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetNNonz(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetNNonz$descriptor() {
        return SCIPcolGetNNonz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetNNonz(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetNNonz$handle() {
        return SCIPcolGetNNonz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetNNonz(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetNNonz$address() {
        return SCIPcolGetNNonz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetNNonz(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetNNonz(MemorySegment col) {
        var mh$ = SCIPcolGetNNonz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetNNonz", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetNLPNonz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetNLPNonz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetNLPNonz(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetNLPNonz$descriptor() {
        return SCIPcolGetNLPNonz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetNLPNonz(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetNLPNonz$handle() {
        return SCIPcolGetNLPNonz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetNLPNonz(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetNLPNonz$address() {
        return SCIPcolGetNLPNonz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetNLPNonz(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetNLPNonz(MemorySegment col) {
        var mh$ = SCIPcolGetNLPNonz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetNLPNonz", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetRows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetRows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_ROW **SCIPcolGetRows(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetRows$descriptor() {
        return SCIPcolGetRows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_ROW **SCIPcolGetRows(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetRows$handle() {
        return SCIPcolGetRows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_ROW **SCIPcolGetRows(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetRows$address() {
        return SCIPcolGetRows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_ROW **SCIPcolGetRows(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetRows(MemorySegment col) {
        var mh$ = SCIPcolGetRows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetRows", col);
            }
            return (MemorySegment)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetVals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetVals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double *SCIPcolGetVals(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetVals$descriptor() {
        return SCIPcolGetVals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double *SCIPcolGetVals(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetVals$handle() {
        return SCIPcolGetVals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double *SCIPcolGetVals(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetVals$address() {
        return SCIPcolGetVals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double *SCIPcolGetVals(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetVals(MemorySegment col) {
        var mh$ = SCIPcolGetVals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetVals", col);
            }
            return (MemorySegment)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetStrongbranchNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetStrongbranchNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long SCIPcolGetStrongbranchNode(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetStrongbranchNode$descriptor() {
        return SCIPcolGetStrongbranchNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long SCIPcolGetStrongbranchNode(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetStrongbranchNode$handle() {
        return SCIPcolGetStrongbranchNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long SCIPcolGetStrongbranchNode(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetStrongbranchNode$address() {
        return SCIPcolGetStrongbranchNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long SCIPcolGetStrongbranchNode(SCIP_COL *col)
     * }
     */
    public static long SCIPcolGetStrongbranchNode(MemorySegment col) {
        var mh$ = SCIPcolGetStrongbranchNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetStrongbranchNode", col);
            }
            return (long)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetNStrongbranchs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetNStrongbranchs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetNStrongbranchs(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetNStrongbranchs$descriptor() {
        return SCIPcolGetNStrongbranchs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetNStrongbranchs(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetNStrongbranchs$handle() {
        return SCIPcolGetNStrongbranchs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetNStrongbranchs(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetNStrongbranchs$address() {
        return SCIPcolGetNStrongbranchs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetNStrongbranchs(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetNStrongbranchs(MemorySegment col) {
        var mh$ = SCIPcolGetNStrongbranchs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetNStrongbranchs", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcolGetAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcolGetAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcolGetAge(SCIP_COL *col)
     * }
     */
    public static FunctionDescriptor SCIPcolGetAge$descriptor() {
        return SCIPcolGetAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcolGetAge(SCIP_COL *col)
     * }
     */
    public static MethodHandle SCIPcolGetAge$handle() {
        return SCIPcolGetAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcolGetAge(SCIP_COL *col)
     * }
     */
    public static MemorySegment SCIPcolGetAge$address() {
        return SCIPcolGetAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcolGetAge(SCIP_COL *col)
     * }
     */
    public static int SCIPcolGetAge(MemorySegment col) {
        var mh$ = SCIPcolGetAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcolGetAge", col);
            }
            return (int)mh$.invokeExact(col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPboundtypeOpposite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPboundtypeOpposite");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_BOUNDTYPE SCIPboundtypeOpposite(SCIP_BOUNDTYPE boundtype)
     * }
     */
    public static FunctionDescriptor SCIPboundtypeOpposite$descriptor() {
        return SCIPboundtypeOpposite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_BOUNDTYPE SCIPboundtypeOpposite(SCIP_BOUNDTYPE boundtype)
     * }
     */
    public static MethodHandle SCIPboundtypeOpposite$handle() {
        return SCIPboundtypeOpposite.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_BOUNDTYPE SCIPboundtypeOpposite(SCIP_BOUNDTYPE boundtype)
     * }
     */
    public static MemorySegment SCIPboundtypeOpposite$address() {
        return SCIPboundtypeOpposite.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_BOUNDTYPE SCIPboundtypeOpposite(SCIP_BOUNDTYPE boundtype)
     * }
     */
    public static int SCIPboundtypeOpposite(int boundtype) {
        var mh$ = SCIPboundtypeOpposite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPboundtypeOpposite", boundtype);
            }
            return (int)mh$.invokeExact(boundtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwComp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwComp");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwComp(void *elem1, void *elem2)
     * }
     */
    public static FunctionDescriptor SCIProwComp$descriptor() {
        return SCIProwComp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwComp(void *elem1, void *elem2)
     * }
     */
    public static MethodHandle SCIProwComp$handle() {
        return SCIProwComp.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwComp(void *elem1, void *elem2)
     * }
     */
    public static MemorySegment SCIProwComp$address() {
        return SCIProwComp.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwComp(void *elem1, void *elem2)
     * }
     */
    public static int SCIProwComp(MemorySegment elem1, MemorySegment elem2) {
        var mh$ = SCIProwComp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwComp", elem1, elem2);
            }
            return (int)mh$.invokeExact(elem1, elem2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwLock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwLock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwLock(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwLock$descriptor() {
        return SCIProwLock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwLock(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwLock$handle() {
        return SCIProwLock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwLock(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwLock$address() {
        return SCIProwLock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwLock(SCIP_ROW *row)
     * }
     */
    public static void SCIProwLock(MemorySegment row) {
        var mh$ = SCIProwLock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwLock", row);
            }
            mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwUnlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwUnlock");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwUnlock(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwUnlock$descriptor() {
        return SCIProwUnlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwUnlock(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwUnlock$handle() {
        return SCIProwUnlock.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwUnlock(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwUnlock$address() {
        return SCIProwUnlock.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwUnlock(SCIP_ROW *row)
     * }
     */
    public static void SCIProwUnlock(MemorySegment row) {
        var mh$ = SCIProwUnlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwUnlock", row);
            }
            mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetScalarProduct {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetScalarProduct");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetScalarProduct(SCIP_ROW *row1, SCIP_ROW *row2)
     * }
     */
    public static FunctionDescriptor SCIProwGetScalarProduct$descriptor() {
        return SCIProwGetScalarProduct.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetScalarProduct(SCIP_ROW *row1, SCIP_ROW *row2)
     * }
     */
    public static MethodHandle SCIProwGetScalarProduct$handle() {
        return SCIProwGetScalarProduct.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetScalarProduct(SCIP_ROW *row1, SCIP_ROW *row2)
     * }
     */
    public static MemorySegment SCIProwGetScalarProduct$address() {
        return SCIProwGetScalarProduct.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetScalarProduct(SCIP_ROW *row1, SCIP_ROW *row2)
     * }
     */
    public static double SCIProwGetScalarProduct(MemorySegment row1, MemorySegment row2) {
        var mh$ = SCIProwGetScalarProduct.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetScalarProduct", row1, row2);
            }
            return (double)mh$.invokeExact(row1, row2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetParallelism {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_CHAR
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetParallelism");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetParallelism(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static FunctionDescriptor SCIProwGetParallelism$descriptor() {
        return SCIProwGetParallelism.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetParallelism(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static MethodHandle SCIProwGetParallelism$handle() {
        return SCIProwGetParallelism.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetParallelism(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static MemorySegment SCIProwGetParallelism$address() {
        return SCIProwGetParallelism.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetParallelism(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static double SCIProwGetParallelism(MemorySegment row1, MemorySegment row2, byte orthofunc) {
        var mh$ = SCIProwGetParallelism.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetParallelism", row1, row2, orthofunc);
            }
            return (double)mh$.invokeExact(row1, row2, orthofunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetOrthogonality {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_CHAR
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetOrthogonality");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetOrthogonality(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static FunctionDescriptor SCIProwGetOrthogonality$descriptor() {
        return SCIProwGetOrthogonality.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetOrthogonality(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static MethodHandle SCIProwGetOrthogonality$handle() {
        return SCIProwGetOrthogonality.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetOrthogonality(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static MemorySegment SCIProwGetOrthogonality$address() {
        return SCIProwGetOrthogonality.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetOrthogonality(SCIP_ROW *row1, SCIP_ROW *row2, char orthofunc)
     * }
     */
    public static double SCIProwGetOrthogonality(MemorySegment row1, MemorySegment row2, byte orthofunc) {
        var mh$ = SCIProwGetOrthogonality.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetOrthogonality", row1, row2, orthofunc);
            }
            return (double)mh$.invokeExact(row1, row2, orthofunc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwSort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwSort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwSort(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwSort$descriptor() {
        return SCIProwSort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwSort(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwSort$handle() {
        return SCIProwSort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwSort(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwSort$address() {
        return SCIProwSort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwSort(SCIP_ROW *row)
     * }
     */
    public static void SCIProwSort(MemorySegment row) {
        var mh$ = SCIProwSort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwSort", row);
            }
            mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetNNonz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetNNonz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetNNonz(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetNNonz$descriptor() {
        return SCIProwGetNNonz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetNNonz(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetNNonz$handle() {
        return SCIProwGetNNonz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetNNonz(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetNNonz$address() {
        return SCIProwGetNNonz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetNNonz(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetNNonz(MemorySegment row) {
        var mh$ = SCIProwGetNNonz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetNNonz", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetNLPNonz {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetNLPNonz");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetNLPNonz(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetNLPNonz$descriptor() {
        return SCIProwGetNLPNonz.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetNLPNonz(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetNLPNonz$handle() {
        return SCIProwGetNLPNonz.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetNLPNonz(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetNLPNonz$address() {
        return SCIProwGetNLPNonz.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetNLPNonz(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetNLPNonz(MemorySegment row) {
        var mh$ = SCIProwGetNLPNonz.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetNLPNonz", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetCols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetCols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_COL **SCIProwGetCols(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetCols$descriptor() {
        return SCIProwGetCols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_COL **SCIProwGetCols(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetCols$handle() {
        return SCIProwGetCols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_COL **SCIProwGetCols(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetCols$address() {
        return SCIProwGetCols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_COL **SCIProwGetCols(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetCols(MemorySegment row) {
        var mh$ = SCIProwGetCols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetCols", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetVals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetVals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double *SCIProwGetVals(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetVals$descriptor() {
        return SCIProwGetVals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double *SCIProwGetVals(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetVals$handle() {
        return SCIProwGetVals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double *SCIProwGetVals(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetVals$address() {
        return SCIProwGetVals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double *SCIProwGetVals(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetVals(MemorySegment row) {
        var mh$ = SCIProwGetVals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetVals", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetConstant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetConstant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetConstant(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetConstant$descriptor() {
        return SCIProwGetConstant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetConstant(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetConstant$handle() {
        return SCIProwGetConstant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetConstant(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetConstant$address() {
        return SCIProwGetConstant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetConstant(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetConstant(MemorySegment row) {
        var mh$ = SCIProwGetConstant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetConstant", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetNorm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetNorm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetNorm(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetNorm$descriptor() {
        return SCIProwGetNorm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetNorm(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetNorm$handle() {
        return SCIProwGetNorm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetNorm(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetNorm$address() {
        return SCIProwGetNorm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetNorm(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetNorm(MemorySegment row) {
        var mh$ = SCIProwGetNorm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetNorm", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetSumNorm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetSumNorm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetSumNorm(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetSumNorm$descriptor() {
        return SCIProwGetSumNorm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetSumNorm(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetSumNorm$handle() {
        return SCIProwGetSumNorm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetSumNorm(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetSumNorm$address() {
        return SCIProwGetSumNorm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetSumNorm(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetSumNorm(MemorySegment row) {
        var mh$ = SCIProwGetSumNorm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetSumNorm", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetLhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetLhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetLhs(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetLhs$descriptor() {
        return SCIProwGetLhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetLhs(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetLhs$handle() {
        return SCIProwGetLhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetLhs(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetLhs$address() {
        return SCIProwGetLhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetLhs(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetLhs(MemorySegment row) {
        var mh$ = SCIProwGetLhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetLhs", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetRhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetRhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetRhs(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetRhs$descriptor() {
        return SCIProwGetRhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetRhs(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetRhs$handle() {
        return SCIProwGetRhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetRhs(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetRhs$address() {
        return SCIProwGetRhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetRhs(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetRhs(MemorySegment row) {
        var mh$ = SCIProwGetRhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetRhs", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetDualsol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetDualsol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetDualsol(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetDualsol$descriptor() {
        return SCIProwGetDualsol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetDualsol(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetDualsol$handle() {
        return SCIProwGetDualsol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetDualsol(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetDualsol$address() {
        return SCIProwGetDualsol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetDualsol(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetDualsol(MemorySegment row) {
        var mh$ = SCIProwGetDualsol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetDualsol", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetDualfarkas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetDualfarkas");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwGetDualfarkas(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetDualfarkas$descriptor() {
        return SCIProwGetDualfarkas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwGetDualfarkas(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetDualfarkas$handle() {
        return SCIProwGetDualfarkas.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwGetDualfarkas(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetDualfarkas$address() {
        return SCIProwGetDualfarkas.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwGetDualfarkas(SCIP_ROW *row)
     * }
     */
    public static double SCIProwGetDualfarkas(MemorySegment row) {
        var mh$ = SCIProwGetDualfarkas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetDualfarkas", row);
            }
            return (double)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetBasisStatus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetBasisStatus");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIProwGetBasisStatus(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetBasisStatus$descriptor() {
        return SCIProwGetBasisStatus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIProwGetBasisStatus(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetBasisStatus$handle() {
        return SCIProwGetBasisStatus.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIProwGetBasisStatus(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetBasisStatus$address() {
        return SCIProwGetBasisStatus.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_BASESTAT SCIProwGetBasisStatus(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetBasisStatus(MemorySegment row) {
        var mh$ = SCIProwGetBasisStatus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetBasisStatus", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SCIProwGetName(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetName$descriptor() {
        return SCIProwGetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SCIProwGetName(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetName$handle() {
        return SCIProwGetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *SCIProwGetName(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetName$address() {
        return SCIProwGetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *SCIProwGetName(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetName(MemorySegment row) {
        var mh$ = SCIProwGetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetName", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetIndex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetIndex");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetIndex(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetIndex$descriptor() {
        return SCIProwGetIndex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetIndex(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetIndex$handle() {
        return SCIProwGetIndex.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetIndex(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetIndex$address() {
        return SCIProwGetIndex.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetIndex(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetIndex(MemorySegment row) {
        var mh$ = SCIProwGetIndex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetIndex", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetAge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetAge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetAge(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetAge$descriptor() {
        return SCIProwGetAge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetAge(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetAge$handle() {
        return SCIProwGetAge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetAge(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetAge$address() {
        return SCIProwGetAge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetAge(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetAge(MemorySegment row) {
        var mh$ = SCIProwGetAge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetAge", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetRank {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetRank");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetRank(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetRank$descriptor() {
        return SCIProwGetRank.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetRank(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetRank$handle() {
        return SCIProwGetRank.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetRank(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetRank$address() {
        return SCIProwGetRank.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetRank(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetRank(MemorySegment row) {
        var mh$ = SCIProwGetRank.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetRank", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwIsIntegral {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwIsIntegral");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsIntegral(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwIsIntegral$descriptor() {
        return SCIProwIsIntegral.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsIntegral(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwIsIntegral$handle() {
        return SCIProwIsIntegral.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsIntegral(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwIsIntegral$address() {
        return SCIProwIsIntegral.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwIsIntegral(SCIP_ROW *row)
     * }
     */
    public static int SCIProwIsIntegral(MemorySegment row) {
        var mh$ = SCIProwIsIntegral.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwIsIntegral", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwIsLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwIsLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsLocal(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwIsLocal$descriptor() {
        return SCIProwIsLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsLocal(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwIsLocal$handle() {
        return SCIProwIsLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsLocal(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwIsLocal$address() {
        return SCIProwIsLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwIsLocal(SCIP_ROW *row)
     * }
     */
    public static int SCIProwIsLocal(MemorySegment row) {
        var mh$ = SCIProwIsLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwIsLocal", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwIsModifiable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwIsModifiable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsModifiable(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwIsModifiable$descriptor() {
        return SCIProwIsModifiable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsModifiable(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwIsModifiable$handle() {
        return SCIProwIsModifiable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsModifiable(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwIsModifiable$address() {
        return SCIProwIsModifiable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwIsModifiable(SCIP_ROW *row)
     * }
     */
    public static int SCIProwIsModifiable(MemorySegment row) {
        var mh$ = SCIProwIsModifiable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwIsModifiable", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwIsRemovable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwIsRemovable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsRemovable(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwIsRemovable$descriptor() {
        return SCIProwIsRemovable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsRemovable(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwIsRemovable$handle() {
        return SCIProwIsRemovable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsRemovable(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwIsRemovable$address() {
        return SCIProwIsRemovable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwIsRemovable(SCIP_ROW *row)
     * }
     */
    public static int SCIProwIsRemovable(MemorySegment row) {
        var mh$ = SCIProwIsRemovable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwIsRemovable", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetOrigintype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetOrigintype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_ROWORIGINTYPE SCIProwGetOrigintype(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetOrigintype$descriptor() {
        return SCIProwGetOrigintype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_ROWORIGINTYPE SCIProwGetOrigintype(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetOrigintype$handle() {
        return SCIProwGetOrigintype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_ROWORIGINTYPE SCIProwGetOrigintype(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOrigintype$address() {
        return SCIProwGetOrigintype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_ROWORIGINTYPE SCIProwGetOrigintype(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetOrigintype(MemorySegment row) {
        var mh$ = SCIProwGetOrigintype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetOrigintype", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetOriginConshdlr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetOriginConshdlr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_CONSHDLR *SCIProwGetOriginConshdlr(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetOriginConshdlr$descriptor() {
        return SCIProwGetOriginConshdlr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_CONSHDLR *SCIProwGetOriginConshdlr(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetOriginConshdlr$handle() {
        return SCIProwGetOriginConshdlr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_CONSHDLR *SCIProwGetOriginConshdlr(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOriginConshdlr$address() {
        return SCIProwGetOriginConshdlr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_CONSHDLR *SCIProwGetOriginConshdlr(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOriginConshdlr(MemorySegment row) {
        var mh$ = SCIProwGetOriginConshdlr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetOriginConshdlr", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetOriginCons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetOriginCons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_CONS *SCIProwGetOriginCons(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetOriginCons$descriptor() {
        return SCIProwGetOriginCons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_CONS *SCIProwGetOriginCons(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetOriginCons$handle() {
        return SCIProwGetOriginCons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_CONS *SCIProwGetOriginCons(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOriginCons$address() {
        return SCIProwGetOriginCons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_CONS *SCIProwGetOriginCons(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOriginCons(MemorySegment row) {
        var mh$ = SCIProwGetOriginCons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetOriginCons", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetOriginSepa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetOriginSepa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_SEPA *SCIProwGetOriginSepa(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetOriginSepa$descriptor() {
        return SCIProwGetOriginSepa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_SEPA *SCIProwGetOriginSepa(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetOriginSepa$handle() {
        return SCIProwGetOriginSepa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_SEPA *SCIProwGetOriginSepa(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOriginSepa$address() {
        return SCIProwGetOriginSepa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_SEPA *SCIProwGetOriginSepa(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetOriginSepa(MemorySegment row) {
        var mh$ = SCIProwGetOriginSepa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetOriginSepa", row);
            }
            return (MemorySegment)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwIsInGlobalCutpool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwIsInGlobalCutpool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsInGlobalCutpool(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwIsInGlobalCutpool$descriptor() {
        return SCIProwIsInGlobalCutpool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsInGlobalCutpool(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwIsInGlobalCutpool$handle() {
        return SCIProwIsInGlobalCutpool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsInGlobalCutpool(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwIsInGlobalCutpool$address() {
        return SCIProwIsInGlobalCutpool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwIsInGlobalCutpool(SCIP_ROW *row)
     * }
     */
    public static int SCIProwIsInGlobalCutpool(MemorySegment row) {
        var mh$ = SCIProwIsInGlobalCutpool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwIsInGlobalCutpool", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetLPPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetLPPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetLPPos(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetLPPos$descriptor() {
        return SCIProwGetLPPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetLPPos(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetLPPos$handle() {
        return SCIProwGetLPPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetLPPos(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetLPPos$address() {
        return SCIProwGetLPPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetLPPos(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetLPPos(MemorySegment row) {
        var mh$ = SCIProwGetLPPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetLPPos", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetLPDepth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetLPDepth");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwGetLPDepth(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetLPDepth$descriptor() {
        return SCIProwGetLPDepth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwGetLPDepth(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetLPDepth$handle() {
        return SCIProwGetLPDepth.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwGetLPDepth(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetLPDepth$address() {
        return SCIProwGetLPDepth.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwGetLPDepth(SCIP_ROW *row)
     * }
     */
    public static int SCIProwGetLPDepth(MemorySegment row) {
        var mh$ = SCIProwGetLPDepth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetLPDepth", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwIsInLP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwIsInLP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsInLP(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwIsInLP$descriptor() {
        return SCIProwIsInLP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsInLP(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwIsInLP$handle() {
        return SCIProwIsInLP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwIsInLP(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwIsInLP$address() {
        return SCIProwIsInLP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwIsInLP(SCIP_ROW *row)
     * }
     */
    public static int SCIProwIsInLP(MemorySegment row) {
        var mh$ = SCIProwIsInLP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwIsInLP", row);
            }
            return (int)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetActiveLPCount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetActiveLPCount");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long SCIProwGetActiveLPCount(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetActiveLPCount$descriptor() {
        return SCIProwGetActiveLPCount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long SCIProwGetActiveLPCount(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetActiveLPCount$handle() {
        return SCIProwGetActiveLPCount.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long SCIProwGetActiveLPCount(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetActiveLPCount$address() {
        return SCIProwGetActiveLPCount.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long SCIProwGetActiveLPCount(SCIP_ROW *row)
     * }
     */
    public static long SCIProwGetActiveLPCount(MemorySegment row) {
        var mh$ = SCIProwGetActiveLPCount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetActiveLPCount", row);
            }
            return (long)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwGetNLPsAfterCreation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwGetNLPsAfterCreation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long SCIProwGetNLPsAfterCreation(SCIP_ROW *row)
     * }
     */
    public static FunctionDescriptor SCIProwGetNLPsAfterCreation$descriptor() {
        return SCIProwGetNLPsAfterCreation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long SCIProwGetNLPsAfterCreation(SCIP_ROW *row)
     * }
     */
    public static MethodHandle SCIProwGetNLPsAfterCreation$handle() {
        return SCIProwGetNLPsAfterCreation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long SCIProwGetNLPsAfterCreation(SCIP_ROW *row)
     * }
     */
    public static MemorySegment SCIProwGetNLPsAfterCreation$address() {
        return SCIProwGetNLPsAfterCreation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long SCIProwGetNLPsAfterCreation(SCIP_ROW *row)
     * }
     */
    public static long SCIProwGetNLPsAfterCreation(MemorySegment row) {
        var mh$ = SCIProwGetNLPsAfterCreation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwGetNLPsAfterCreation", row);
            }
            return (long)mh$.invokeExact(row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwChgRank {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwChgRank");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwChgRank(SCIP_ROW *row, int rank)
     * }
     */
    public static FunctionDescriptor SCIProwChgRank$descriptor() {
        return SCIProwChgRank.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwChgRank(SCIP_ROW *row, int rank)
     * }
     */
    public static MethodHandle SCIProwChgRank$handle() {
        return SCIProwChgRank.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwChgRank(SCIP_ROW *row, int rank)
     * }
     */
    public static MemorySegment SCIProwChgRank$address() {
        return SCIProwChgRank.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwChgRank(SCIP_ROW *row, int rank)
     * }
     */
    public static void SCIProwChgRank(MemorySegment row, int rank) {
        var mh$ = SCIProwChgRank.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwChgRank", row, rank);
            }
            mh$.invokeExact(row, rank);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SCIP_STAGE_INIT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_INIT = 0
     * }
     */
    public static int SCIP_STAGE_INIT() {
        return SCIP_STAGE_INIT;
    }
    private static final int SCIP_STAGE_PROBLEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_PROBLEM = 1
     * }
     */
    public static int SCIP_STAGE_PROBLEM() {
        return SCIP_STAGE_PROBLEM;
    }
    private static final int SCIP_STAGE_TRANSFORMING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_TRANSFORMING = 2
     * }
     */
    public static int SCIP_STAGE_TRANSFORMING() {
        return SCIP_STAGE_TRANSFORMING;
    }
    private static final int SCIP_STAGE_TRANSFORMED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_TRANSFORMED = 3
     * }
     */
    public static int SCIP_STAGE_TRANSFORMED() {
        return SCIP_STAGE_TRANSFORMED;
    }
    private static final int SCIP_STAGE_INITPRESOLVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_INITPRESOLVE = 4
     * }
     */
    public static int SCIP_STAGE_INITPRESOLVE() {
        return SCIP_STAGE_INITPRESOLVE;
    }
    private static final int SCIP_STAGE_PRESOLVING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_PRESOLVING = 5
     * }
     */
    public static int SCIP_STAGE_PRESOLVING() {
        return SCIP_STAGE_PRESOLVING;
    }
    private static final int SCIP_STAGE_EXITPRESOLVE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_EXITPRESOLVE = 6
     * }
     */
    public static int SCIP_STAGE_EXITPRESOLVE() {
        return SCIP_STAGE_EXITPRESOLVE;
    }
    private static final int SCIP_STAGE_PRESOLVED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_PRESOLVED = 7
     * }
     */
    public static int SCIP_STAGE_PRESOLVED() {
        return SCIP_STAGE_PRESOLVED;
    }
    private static final int SCIP_STAGE_INITSOLVE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_INITSOLVE = 8
     * }
     */
    public static int SCIP_STAGE_INITSOLVE() {
        return SCIP_STAGE_INITSOLVE;
    }
    private static final int SCIP_STAGE_SOLVING = (int)9L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_SOLVING = 9
     * }
     */
    public static int SCIP_STAGE_SOLVING() {
        return SCIP_STAGE_SOLVING;
    }
    private static final int SCIP_STAGE_SOLVED = (int)10L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_SOLVED = 10
     * }
     */
    public static int SCIP_STAGE_SOLVED() {
        return SCIP_STAGE_SOLVED;
    }
    private static final int SCIP_STAGE_EXITSOLVE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_EXITSOLVE = 11
     * }
     */
    public static int SCIP_STAGE_EXITSOLVE() {
        return SCIP_STAGE_EXITSOLVE;
    }
    private static final int SCIP_STAGE_FREETRANS = (int)12L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_FREETRANS = 12
     * }
     */
    public static int SCIP_STAGE_FREETRANS() {
        return SCIP_STAGE_FREETRANS;
    }
    private static final int SCIP_STAGE_FREE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Stage.SCIP_STAGE_FREE = 13
     * }
     */
    public static int SCIP_STAGE_FREE() {
        return SCIP_STAGE_FREE;
    }
    private static final int SCIP_UNDEFINED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Setting.SCIP_UNDEFINED = 0
     * }
     */
    public static int SCIP_UNDEFINED() {
        return SCIP_UNDEFINED;
    }
    private static final int SCIP_DISABLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Setting.SCIP_DISABLED = 1
     * }
     */
    public static int SCIP_DISABLED() {
        return SCIP_DISABLED;
    }
    private static final int SCIP_AUTO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Setting.SCIP_AUTO = 2
     * }
     */
    public static int SCIP_AUTO() {
        return SCIP_AUTO;
    }
    private static final int SCIP_ENABLED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum SCIP_Setting.SCIP_ENABLED = 3
     * }
     */
    public static int SCIP_ENABLED() {
        return SCIP_ENABLED;
    }

    private static class SCIPnlrowGetConstant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetConstant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPnlrowGetConstant(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetConstant$descriptor() {
        return SCIPnlrowGetConstant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPnlrowGetConstant(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetConstant$handle() {
        return SCIPnlrowGetConstant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPnlrowGetConstant(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetConstant$address() {
        return SCIPnlrowGetConstant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPnlrowGetConstant(SCIP_NLROW *nlrow)
     * }
     */
    public static double SCIPnlrowGetConstant(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetConstant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetConstant", nlrow);
            }
            return (double)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetNLinearVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetNLinearVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPnlrowGetNLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetNLinearVars$descriptor() {
        return SCIPnlrowGetNLinearVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPnlrowGetNLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetNLinearVars$handle() {
        return SCIPnlrowGetNLinearVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPnlrowGetNLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetNLinearVars$address() {
        return SCIPnlrowGetNLinearVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPnlrowGetNLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static int SCIPnlrowGetNLinearVars(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetNLinearVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetNLinearVars", nlrow);
            }
            return (int)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetLinearVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetLinearVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIPnlrowGetLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetLinearVars$descriptor() {
        return SCIPnlrowGetLinearVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIPnlrowGetLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetLinearVars$handle() {
        return SCIPnlrowGetLinearVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIPnlrowGetLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetLinearVars$address() {
        return SCIPnlrowGetLinearVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR **SCIPnlrowGetLinearVars(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetLinearVars(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetLinearVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetLinearVars", nlrow);
            }
            return (MemorySegment)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetLinearCoefs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetLinearCoefs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double *SCIPnlrowGetLinearCoefs(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetLinearCoefs$descriptor() {
        return SCIPnlrowGetLinearCoefs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double *SCIPnlrowGetLinearCoefs(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetLinearCoefs$handle() {
        return SCIPnlrowGetLinearCoefs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double *SCIPnlrowGetLinearCoefs(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetLinearCoefs$address() {
        return SCIPnlrowGetLinearCoefs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double *SCIPnlrowGetLinearCoefs(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetLinearCoefs(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetLinearCoefs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetLinearCoefs", nlrow);
            }
            return (MemorySegment)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetExpr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetExpr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_EXPR *SCIPnlrowGetExpr(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetExpr$descriptor() {
        return SCIPnlrowGetExpr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_EXPR *SCIPnlrowGetExpr(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetExpr$handle() {
        return SCIPnlrowGetExpr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_EXPR *SCIPnlrowGetExpr(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetExpr$address() {
        return SCIPnlrowGetExpr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_EXPR *SCIPnlrowGetExpr(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetExpr(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetExpr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetExpr", nlrow);
            }
            return (MemorySegment)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetLhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetLhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPnlrowGetLhs(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetLhs$descriptor() {
        return SCIPnlrowGetLhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPnlrowGetLhs(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetLhs$handle() {
        return SCIPnlrowGetLhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPnlrowGetLhs(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetLhs$address() {
        return SCIPnlrowGetLhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPnlrowGetLhs(SCIP_NLROW *nlrow)
     * }
     */
    public static double SCIPnlrowGetLhs(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetLhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetLhs", nlrow);
            }
            return (double)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetRhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetRhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPnlrowGetRhs(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetRhs$descriptor() {
        return SCIPnlrowGetRhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPnlrowGetRhs(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetRhs$handle() {
        return SCIPnlrowGetRhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPnlrowGetRhs(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetRhs$address() {
        return SCIPnlrowGetRhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPnlrowGetRhs(SCIP_NLROW *nlrow)
     * }
     */
    public static double SCIPnlrowGetRhs(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetRhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetRhs", nlrow);
            }
            return (double)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetCurvature {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetCurvature");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_EXPRCURV SCIPnlrowGetCurvature(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetCurvature$descriptor() {
        return SCIPnlrowGetCurvature.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_EXPRCURV SCIPnlrowGetCurvature(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetCurvature$handle() {
        return SCIPnlrowGetCurvature.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_EXPRCURV SCIPnlrowGetCurvature(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetCurvature$address() {
        return SCIPnlrowGetCurvature.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_EXPRCURV SCIPnlrowGetCurvature(SCIP_NLROW *nlrow)
     * }
     */
    public static int SCIPnlrowGetCurvature(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetCurvature.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetCurvature", nlrow);
            }
            return (int)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SCIPnlrowGetName(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetName$descriptor() {
        return SCIPnlrowGetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SCIPnlrowGetName(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetName$handle() {
        return SCIPnlrowGetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *SCIPnlrowGetName(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetName$address() {
        return SCIPnlrowGetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *SCIPnlrowGetName(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetName(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetName", nlrow);
            }
            return (MemorySegment)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetNLPPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetNLPPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPnlrowGetNLPPos(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetNLPPos$descriptor() {
        return SCIPnlrowGetNLPPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPnlrowGetNLPPos(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetNLPPos$handle() {
        return SCIPnlrowGetNLPPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPnlrowGetNLPPos(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetNLPPos$address() {
        return SCIPnlrowGetNLPPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPnlrowGetNLPPos(SCIP_NLROW *nlrow)
     * }
     */
    public static int SCIPnlrowGetNLPPos(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetNLPPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetNLPPos", nlrow);
            }
            return (int)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowIsInNLP {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowIsInNLP");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPnlrowIsInNLP(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowIsInNLP$descriptor() {
        return SCIPnlrowIsInNLP.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPnlrowIsInNLP(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowIsInNLP$handle() {
        return SCIPnlrowIsInNLP.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPnlrowIsInNLP(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowIsInNLP$address() {
        return SCIPnlrowIsInNLP.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPnlrowIsInNLP(SCIP_NLROW *nlrow)
     * }
     */
    public static int SCIPnlrowIsInNLP(MemorySegment nlrow) {
        var mh$ = SCIPnlrowIsInNLP.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowIsInNLP", nlrow);
            }
            return (int)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnlrowGetDualsol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnlrowGetDualsol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPnlrowGetDualsol(SCIP_NLROW *nlrow)
     * }
     */
    public static FunctionDescriptor SCIPnlrowGetDualsol$descriptor() {
        return SCIPnlrowGetDualsol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPnlrowGetDualsol(SCIP_NLROW *nlrow)
     * }
     */
    public static MethodHandle SCIPnlrowGetDualsol$handle() {
        return SCIPnlrowGetDualsol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPnlrowGetDualsol(SCIP_NLROW *nlrow)
     * }
     */
    public static MemorySegment SCIPnlrowGetDualsol$address() {
        return SCIPnlrowGetDualsol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPnlrowGetDualsol(SCIP_NLROW *nlrow)
     * }
     */
    public static double SCIPnlrowGetDualsol(MemorySegment nlrow) {
        var mh$ = SCIPnlrowGetDualsol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnlrowGetDualsol", nlrow);
            }
            return (double)mh$.invokeExact(nlrow);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColValPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColValPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double *SCIPmatrixGetColValPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColValPtr$descriptor() {
        return SCIPmatrixGetColValPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double *SCIPmatrixGetColValPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColValPtr$handle() {
        return SCIPmatrixGetColValPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double *SCIPmatrixGetColValPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColValPtr$address() {
        return SCIPmatrixGetColValPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double *SCIPmatrixGetColValPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColValPtr(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColValPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColValPtr", matrix, col);
            }
            return (MemorySegment)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColIdxPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColIdxPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *SCIPmatrixGetColIdxPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColIdxPtr$descriptor() {
        return SCIPmatrixGetColIdxPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *SCIPmatrixGetColIdxPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColIdxPtr$handle() {
        return SCIPmatrixGetColIdxPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *SCIPmatrixGetColIdxPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColIdxPtr$address() {
        return SCIPmatrixGetColIdxPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *SCIPmatrixGetColIdxPtr(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColIdxPtr(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColIdxPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColIdxPtr", matrix, col);
            }
            return (MemorySegment)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColNNonzs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColNNonzs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNNonzs(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColNNonzs$descriptor() {
        return SCIPmatrixGetColNNonzs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNNonzs(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColNNonzs$handle() {
        return SCIPmatrixGetColNNonzs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNNonzs(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColNNonzs$address() {
        return SCIPmatrixGetColNNonzs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetColNNonzs(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static int SCIPmatrixGetColNNonzs(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColNNonzs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColNNonzs", matrix, col);
            }
            return (int)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetNColumns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetNColumns");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNColumns(SCIP_MATRIX *matrix)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetNColumns$descriptor() {
        return SCIPmatrixGetNColumns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNColumns(SCIP_MATRIX *matrix)
     * }
     */
    public static MethodHandle SCIPmatrixGetNColumns$handle() {
        return SCIPmatrixGetNColumns.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNColumns(SCIP_MATRIX *matrix)
     * }
     */
    public static MemorySegment SCIPmatrixGetNColumns$address() {
        return SCIPmatrixGetNColumns.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetNColumns(SCIP_MATRIX *matrix)
     * }
     */
    public static int SCIPmatrixGetNColumns(MemorySegment matrix) {
        var mh$ = SCIPmatrixGetNColumns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetNColumns", matrix);
            }
            return (int)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColUb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColUb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmatrixGetColUb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColUb$descriptor() {
        return SCIPmatrixGetColUb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmatrixGetColUb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColUb$handle() {
        return SCIPmatrixGetColUb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmatrixGetColUb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColUb$address() {
        return SCIPmatrixGetColUb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmatrixGetColUb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static double SCIPmatrixGetColUb(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColUb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColUb", matrix, col);
            }
            return (double)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColLb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColLb");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmatrixGetColLb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColLb$descriptor() {
        return SCIPmatrixGetColLb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmatrixGetColLb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColLb$handle() {
        return SCIPmatrixGetColLb.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmatrixGetColLb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColLb$address() {
        return SCIPmatrixGetColLb.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmatrixGetColLb(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static double SCIPmatrixGetColLb(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColLb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColLb", matrix, col);
            }
            return (double)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColNUplocks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColNUplocks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNUplocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColNUplocks$descriptor() {
        return SCIPmatrixGetColNUplocks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNUplocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColNUplocks$handle() {
        return SCIPmatrixGetColNUplocks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNUplocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColNUplocks$address() {
        return SCIPmatrixGetColNUplocks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetColNUplocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static int SCIPmatrixGetColNUplocks(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColNUplocks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColNUplocks", matrix, col);
            }
            return (int)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColNDownlocks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColNDownlocks");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNDownlocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColNDownlocks$descriptor() {
        return SCIPmatrixGetColNDownlocks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNDownlocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColNDownlocks$handle() {
        return SCIPmatrixGetColNDownlocks.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetColNDownlocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColNDownlocks$address() {
        return SCIPmatrixGetColNDownlocks.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetColNDownlocks(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static int SCIPmatrixGetColNDownlocks(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColNDownlocks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColNDownlocks", matrix, col);
            }
            return (int)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetVar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetVar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPmatrixGetVar(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetVar$descriptor() {
        return SCIPmatrixGetVar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPmatrixGetVar(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetVar$handle() {
        return SCIPmatrixGetVar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPmatrixGetVar(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetVar$address() {
        return SCIPmatrixGetVar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR *SCIPmatrixGetVar(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetVar(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetVar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetVar", matrix, col);
            }
            return (MemorySegment)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetColName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetColName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SCIPmatrixGetColName(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetColName$descriptor() {
        return SCIPmatrixGetColName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SCIPmatrixGetColName(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixGetColName$handle() {
        return SCIPmatrixGetColName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *SCIPmatrixGetColName(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColName$address() {
        return SCIPmatrixGetColName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *SCIPmatrixGetColName(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixGetColName(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixGetColName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetColName", matrix, col);
            }
            return (MemorySegment)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowValPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowValPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double *SCIPmatrixGetRowValPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowValPtr$descriptor() {
        return SCIPmatrixGetRowValPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double *SCIPmatrixGetRowValPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowValPtr$handle() {
        return SCIPmatrixGetRowValPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double *SCIPmatrixGetRowValPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowValPtr$address() {
        return SCIPmatrixGetRowValPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double *SCIPmatrixGetRowValPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowValPtr(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowValPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowValPtr", matrix, row);
            }
            return (MemorySegment)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowIdxPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowIdxPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *SCIPmatrixGetRowIdxPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowIdxPtr$descriptor() {
        return SCIPmatrixGetRowIdxPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *SCIPmatrixGetRowIdxPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowIdxPtr$handle() {
        return SCIPmatrixGetRowIdxPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *SCIPmatrixGetRowIdxPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowIdxPtr$address() {
        return SCIPmatrixGetRowIdxPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *SCIPmatrixGetRowIdxPtr(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowIdxPtr(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowIdxPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowIdxPtr", matrix, row);
            }
            return (MemorySegment)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowNNonzs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowNNonzs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNNonzs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowNNonzs$descriptor() {
        return SCIPmatrixGetRowNNonzs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNNonzs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowNNonzs$handle() {
        return SCIPmatrixGetRowNNonzs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNNonzs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowNNonzs$address() {
        return SCIPmatrixGetRowNNonzs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNNonzs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static int SCIPmatrixGetRowNNonzs(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowNNonzs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowNNonzs", matrix, row);
            }
            return (int)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * const char *SCIPmatrixGetRowName(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowName$descriptor() {
        return SCIPmatrixGetRowName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * const char *SCIPmatrixGetRowName(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowName$handle() {
        return SCIPmatrixGetRowName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * const char *SCIPmatrixGetRowName(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowName$address() {
        return SCIPmatrixGetRowName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * const char *SCIPmatrixGetRowName(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowName(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowName", matrix, row);
            }
            return (MemorySegment)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetNRows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetNRows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNRows(SCIP_MATRIX *matrix)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetNRows$descriptor() {
        return SCIPmatrixGetNRows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNRows(SCIP_MATRIX *matrix)
     * }
     */
    public static MethodHandle SCIPmatrixGetNRows$handle() {
        return SCIPmatrixGetNRows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNRows(SCIP_MATRIX *matrix)
     * }
     */
    public static MemorySegment SCIPmatrixGetNRows$address() {
        return SCIPmatrixGetNRows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetNRows(SCIP_MATRIX *matrix)
     * }
     */
    public static int SCIPmatrixGetNRows(MemorySegment matrix) {
        var mh$ = SCIPmatrixGetNRows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetNRows", matrix);
            }
            return (int)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowLhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowLhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowLhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowLhs$descriptor() {
        return SCIPmatrixGetRowLhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowLhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowLhs$handle() {
        return SCIPmatrixGetRowLhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowLhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowLhs$address() {
        return SCIPmatrixGetRowLhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmatrixGetRowLhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static double SCIPmatrixGetRowLhs(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowLhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowLhs", matrix, row);
            }
            return (double)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowRhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowRhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowRhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowRhs$descriptor() {
        return SCIPmatrixGetRowRhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowRhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowRhs$handle() {
        return SCIPmatrixGetRowRhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowRhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowRhs$address() {
        return SCIPmatrixGetRowRhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmatrixGetRowRhs(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static double SCIPmatrixGetRowRhs(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowRhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowRhs", matrix, row);
            }
            return (double)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixIsRowRhsInfinity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixIsRowRhsInfinity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixIsRowRhsInfinity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixIsRowRhsInfinity$descriptor() {
        return SCIPmatrixIsRowRhsInfinity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixIsRowRhsInfinity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixIsRowRhsInfinity$handle() {
        return SCIPmatrixIsRowRhsInfinity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixIsRowRhsInfinity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixIsRowRhsInfinity$address() {
        return SCIPmatrixIsRowRhsInfinity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPmatrixIsRowRhsInfinity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static int SCIPmatrixIsRowRhsInfinity(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixIsRowRhsInfinity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixIsRowRhsInfinity", matrix, row);
            }
            return (int)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetNNonzs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetNNonzs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNNonzs(SCIP_MATRIX *matrix)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetNNonzs$descriptor() {
        return SCIPmatrixGetNNonzs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNNonzs(SCIP_MATRIX *matrix)
     * }
     */
    public static MethodHandle SCIPmatrixGetNNonzs$handle() {
        return SCIPmatrixGetNNonzs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetNNonzs(SCIP_MATRIX *matrix)
     * }
     */
    public static MemorySegment SCIPmatrixGetNNonzs$address() {
        return SCIPmatrixGetNNonzs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetNNonzs(SCIP_MATRIX *matrix)
     * }
     */
    public static int SCIPmatrixGetNNonzs(MemorySegment matrix) {
        var mh$ = SCIPmatrixGetNNonzs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetNNonzs", matrix);
            }
            return (int)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowMinActivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowMinActivity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMinActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowMinActivity$descriptor() {
        return SCIPmatrixGetRowMinActivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMinActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowMinActivity$handle() {
        return SCIPmatrixGetRowMinActivity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMinActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowMinActivity$address() {
        return SCIPmatrixGetRowMinActivity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMinActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static double SCIPmatrixGetRowMinActivity(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowMinActivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowMinActivity", matrix, row);
            }
            return (double)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowMaxActivity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowMaxActivity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMaxActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowMaxActivity$descriptor() {
        return SCIPmatrixGetRowMaxActivity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMaxActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowMaxActivity$handle() {
        return SCIPmatrixGetRowMaxActivity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMaxActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowMaxActivity$address() {
        return SCIPmatrixGetRowMaxActivity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmatrixGetRowMaxActivity(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static double SCIPmatrixGetRowMaxActivity(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowMaxActivity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowMaxActivity", matrix, row);
            }
            return (double)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowNMinActNegInf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowNMinActNegInf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowNMinActNegInf$descriptor() {
        return SCIPmatrixGetRowNMinActNegInf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowNMinActNegInf$handle() {
        return SCIPmatrixGetRowNMinActNegInf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowNMinActNegInf$address() {
        return SCIPmatrixGetRowNMinActNegInf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static int SCIPmatrixGetRowNMinActNegInf(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowNMinActNegInf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowNMinActNegInf", matrix, row);
            }
            return (int)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowNMinActPosInf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowNMinActPosInf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowNMinActPosInf$descriptor() {
        return SCIPmatrixGetRowNMinActPosInf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowNMinActPosInf$handle() {
        return SCIPmatrixGetRowNMinActPosInf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowNMinActPosInf$address() {
        return SCIPmatrixGetRowNMinActPosInf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMinActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static int SCIPmatrixGetRowNMinActPosInf(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowNMinActPosInf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowNMinActPosInf", matrix, row);
            }
            return (int)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowNMaxActNegInf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowNMaxActNegInf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowNMaxActNegInf$descriptor() {
        return SCIPmatrixGetRowNMaxActNegInf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowNMaxActNegInf$handle() {
        return SCIPmatrixGetRowNMaxActNegInf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowNMaxActNegInf$address() {
        return SCIPmatrixGetRowNMaxActNegInf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActNegInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static int SCIPmatrixGetRowNMaxActNegInf(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowNMaxActNegInf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowNMaxActNegInf", matrix, row);
            }
            return (int)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetRowNMaxActPosInf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetRowNMaxActPosInf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetRowNMaxActPosInf$descriptor() {
        return SCIPmatrixGetRowNMaxActPosInf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetRowNMaxActPosInf$handle() {
        return SCIPmatrixGetRowNMaxActPosInf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetRowNMaxActPosInf$address() {
        return SCIPmatrixGetRowNMaxActPosInf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPmatrixGetRowNMaxActPosInf(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static int SCIPmatrixGetRowNMaxActPosInf(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetRowNMaxActPosInf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetRowNMaxActPosInf", matrix, row);
            }
            return (int)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetCons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetCons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_CONS *SCIPmatrixGetCons(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetCons$descriptor() {
        return SCIPmatrixGetCons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_CONS *SCIPmatrixGetCons(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixGetCons$handle() {
        return SCIPmatrixGetCons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_CONS *SCIPmatrixGetCons(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetCons$address() {
        return SCIPmatrixGetCons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_CONS *SCIPmatrixGetCons(SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixGetCons(MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixGetCons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetCons", matrix, row);
            }
            return (MemorySegment)mh$.invokeExact(matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixUplockConflict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixUplockConflict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixUplockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixUplockConflict$descriptor() {
        return SCIPmatrixUplockConflict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixUplockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixUplockConflict$handle() {
        return SCIPmatrixUplockConflict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixUplockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixUplockConflict$address() {
        return SCIPmatrixUplockConflict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPmatrixUplockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static int SCIPmatrixUplockConflict(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixUplockConflict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixUplockConflict", matrix, col);
            }
            return (int)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixDownlockConflict {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixDownlockConflict");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixDownlockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixDownlockConflict$descriptor() {
        return SCIPmatrixDownlockConflict.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixDownlockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixDownlockConflict$handle() {
        return SCIPmatrixDownlockConflict.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPmatrixDownlockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixDownlockConflict$address() {
        return SCIPmatrixDownlockConflict.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPmatrixDownlockConflict(SCIP_MATRIX *matrix, int col)
     * }
     */
    public static int SCIPmatrixDownlockConflict(MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixDownlockConflict.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixDownlockConflict", matrix, col);
            }
            return (int)mh$.invokeExact(matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixCreate(SCIP *scip, SCIP_MATRIX **matrixptr, unsigned int onlyifcomplete, unsigned int *initialized, unsigned int *complete, unsigned int *infeasible, int *naddconss, int *ndelconss, int *nchgcoefs, int *nchgbds, int *nfixedvars)
     * }
     */
    public static FunctionDescriptor SCIPmatrixCreate$descriptor() {
        return SCIPmatrixCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixCreate(SCIP *scip, SCIP_MATRIX **matrixptr, unsigned int onlyifcomplete, unsigned int *initialized, unsigned int *complete, unsigned int *infeasible, int *naddconss, int *ndelconss, int *nchgcoefs, int *nchgbds, int *nfixedvars)
     * }
     */
    public static MethodHandle SCIPmatrixCreate$handle() {
        return SCIPmatrixCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixCreate(SCIP *scip, SCIP_MATRIX **matrixptr, unsigned int onlyifcomplete, unsigned int *initialized, unsigned int *complete, unsigned int *infeasible, int *naddconss, int *ndelconss, int *nchgcoefs, int *nchgbds, int *nfixedvars)
     * }
     */
    public static MemorySegment SCIPmatrixCreate$address() {
        return SCIPmatrixCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixCreate(SCIP *scip, SCIP_MATRIX **matrixptr, unsigned int onlyifcomplete, unsigned int *initialized, unsigned int *complete, unsigned int *infeasible, int *naddconss, int *ndelconss, int *nchgcoefs, int *nchgbds, int *nfixedvars)
     * }
     */
    public static int SCIPmatrixCreate(MemorySegment scip, MemorySegment matrixptr, int onlyifcomplete, MemorySegment initialized, MemorySegment complete, MemorySegment infeasible, MemorySegment naddconss, MemorySegment ndelconss, MemorySegment nchgcoefs, MemorySegment nchgbds, MemorySegment nfixedvars) {
        var mh$ = SCIPmatrixCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixCreate", scip, matrixptr, onlyifcomplete, initialized, complete, infeasible, naddconss, ndelconss, nchgcoefs, nchgbds, nfixedvars);
            }
            return (int)mh$.invokeExact(scip, matrixptr, onlyifcomplete, initialized, complete, infeasible, naddconss, ndelconss, nchgcoefs, nchgbds, nfixedvars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmatrixFree(SCIP *scip, SCIP_MATRIX **matrix)
     * }
     */
    public static FunctionDescriptor SCIPmatrixFree$descriptor() {
        return SCIPmatrixFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmatrixFree(SCIP *scip, SCIP_MATRIX **matrix)
     * }
     */
    public static MethodHandle SCIPmatrixFree$handle() {
        return SCIPmatrixFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmatrixFree(SCIP *scip, SCIP_MATRIX **matrix)
     * }
     */
    public static MemorySegment SCIPmatrixFree$address() {
        return SCIPmatrixFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmatrixFree(SCIP *scip, SCIP_MATRIX **matrix)
     * }
     */
    public static void SCIPmatrixFree(MemorySegment scip, MemorySegment matrix) {
        var mh$ = SCIPmatrixFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixFree", scip, matrix);
            }
            mh$.invokeExact(scip, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixPrintRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixPrintRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmatrixPrintRow(SCIP *scip, SCIP_MATRIX *matrix, int row)
     * }
     */
    public static FunctionDescriptor SCIPmatrixPrintRow$descriptor() {
        return SCIPmatrixPrintRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmatrixPrintRow(SCIP *scip, SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MethodHandle SCIPmatrixPrintRow$handle() {
        return SCIPmatrixPrintRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmatrixPrintRow(SCIP *scip, SCIP_MATRIX *matrix, int row)
     * }
     */
    public static MemorySegment SCIPmatrixPrintRow$address() {
        return SCIPmatrixPrintRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmatrixPrintRow(SCIP *scip, SCIP_MATRIX *matrix, int row)
     * }
     */
    public static void SCIPmatrixPrintRow(MemorySegment scip, MemorySegment matrix, int row) {
        var mh$ = SCIPmatrixPrintRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixPrintRow", scip, matrix, row);
            }
            mh$.invokeExact(scip, matrix, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetParallelRows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetParallelRows");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelRows(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetParallelRows$descriptor() {
        return SCIPmatrixGetParallelRows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelRows(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass)
     * }
     */
    public static MethodHandle SCIPmatrixGetParallelRows$handle() {
        return SCIPmatrixGetParallelRows.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelRows(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass)
     * }
     */
    public static MemorySegment SCIPmatrixGetParallelRows$address() {
        return SCIPmatrixGetParallelRows.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelRows(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass)
     * }
     */
    public static int SCIPmatrixGetParallelRows(MemorySegment scip, MemorySegment matrix, MemorySegment scale, MemorySegment pclass) {
        var mh$ = SCIPmatrixGetParallelRows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetParallelRows", scip, matrix, scale, pclass);
            }
            return (int)mh$.invokeExact(scip, matrix, scale, pclass);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixRemoveColumnBounds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixRemoveColumnBounds");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmatrixRemoveColumnBounds(SCIP *scip, SCIP_MATRIX *matrix, int col)
     * }
     */
    public static FunctionDescriptor SCIPmatrixRemoveColumnBounds$descriptor() {
        return SCIPmatrixRemoveColumnBounds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmatrixRemoveColumnBounds(SCIP *scip, SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MethodHandle SCIPmatrixRemoveColumnBounds$handle() {
        return SCIPmatrixRemoveColumnBounds.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmatrixRemoveColumnBounds(SCIP *scip, SCIP_MATRIX *matrix, int col)
     * }
     */
    public static MemorySegment SCIPmatrixRemoveColumnBounds$address() {
        return SCIPmatrixRemoveColumnBounds.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmatrixRemoveColumnBounds(SCIP *scip, SCIP_MATRIX *matrix, int col)
     * }
     */
    public static void SCIPmatrixRemoveColumnBounds(MemorySegment scip, MemorySegment matrix, int col) {
        var mh$ = SCIPmatrixRemoveColumnBounds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixRemoveColumnBounds", scip, matrix, col);
            }
            mh$.invokeExact(scip, matrix, col);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmatrixGetParallelCols {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmatrixGetParallelCols");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelCols(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass, unsigned int *varineq)
     * }
     */
    public static FunctionDescriptor SCIPmatrixGetParallelCols$descriptor() {
        return SCIPmatrixGetParallelCols.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelCols(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass, unsigned int *varineq)
     * }
     */
    public static MethodHandle SCIPmatrixGetParallelCols$handle() {
        return SCIPmatrixGetParallelCols.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelCols(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass, unsigned int *varineq)
     * }
     */
    public static MemorySegment SCIPmatrixGetParallelCols$address() {
        return SCIPmatrixGetParallelCols.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmatrixGetParallelCols(SCIP *scip, SCIP_MATRIX *matrix, double *scale, int *pclass, unsigned int *varineq)
     * }
     */
    public static int SCIPmatrixGetParallelCols(MemorySegment scip, MemorySegment matrix, MemorySegment scale, MemorySegment pclass, MemorySegment varineq) {
        var mh$ = SCIPmatrixGetParallelCols.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmatrixGetParallelCols", scip, matrix, scale, pclass, varineq);
            }
            return (int)mh$.invokeExact(scip, matrix, scale, pclass, varineq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrCreate(SCIP_MESSAGEHDLR **messagehdlr, unsigned int bufferedoutput, const char *filename, unsigned int quiet, void (*messagewarning)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messagedialog)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messageinfo)(SCIP_MESSAGEHDLR *, FILE *, const char *), SCIP_RETCODE (*messagehdlrfree)(SCIP_MESSAGEHDLR *), SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrCreate$descriptor() {
        return SCIPmessagehdlrCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrCreate(SCIP_MESSAGEHDLR **messagehdlr, unsigned int bufferedoutput, const char *filename, unsigned int quiet, void (*messagewarning)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messagedialog)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messageinfo)(SCIP_MESSAGEHDLR *, FILE *, const char *), SCIP_RETCODE (*messagehdlrfree)(SCIP_MESSAGEHDLR *), SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static MethodHandle SCIPmessagehdlrCreate$handle() {
        return SCIPmessagehdlrCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrCreate(SCIP_MESSAGEHDLR **messagehdlr, unsigned int bufferedoutput, const char *filename, unsigned int quiet, void (*messagewarning)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messagedialog)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messageinfo)(SCIP_MESSAGEHDLR *, FILE *, const char *), SCIP_RETCODE (*messagehdlrfree)(SCIP_MESSAGEHDLR *), SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static MemorySegment SCIPmessagehdlrCreate$address() {
        return SCIPmessagehdlrCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrCreate(SCIP_MESSAGEHDLR **messagehdlr, unsigned int bufferedoutput, const char *filename, unsigned int quiet, void (*messagewarning)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messagedialog)(SCIP_MESSAGEHDLR *, FILE *, const char *), void (*messageinfo)(SCIP_MESSAGEHDLR *, FILE *, const char *), SCIP_RETCODE (*messagehdlrfree)(SCIP_MESSAGEHDLR *), SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static int SCIPmessagehdlrCreate(MemorySegment messagehdlr, int bufferedoutput, MemorySegment filename, int quiet, MemorySegment messagewarning, MemorySegment messagedialog, MemorySegment messageinfo, MemorySegment messagehdlrfree, MemorySegment messagehdlrdata) {
        var mh$ = SCIPmessagehdlrCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrCreate", messagehdlr, bufferedoutput, filename, quiet, messagewarning, messagedialog, messageinfo, messagehdlrfree, messagehdlrdata);
            }
            return (int)mh$.invokeExact(messagehdlr, bufferedoutput, filename, quiet, messagewarning, messagedialog, messageinfo, messagehdlrfree, messagehdlrdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrCapture {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrCapture");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrCapture(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrCapture$descriptor() {
        return SCIPmessagehdlrCapture.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrCapture(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPmessagehdlrCapture$handle() {
        return SCIPmessagehdlrCapture.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrCapture(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrCapture$address() {
        return SCIPmessagehdlrCapture.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessagehdlrCapture(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static void SCIPmessagehdlrCapture(MemorySegment messagehdlr) {
        var mh$ = SCIPmessagehdlrCapture.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrCapture", messagehdlr);
            }
            mh$.invokeExact(messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrRelease {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrRelease");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrRelease(SCIP_MESSAGEHDLR **messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrRelease$descriptor() {
        return SCIPmessagehdlrRelease.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrRelease(SCIP_MESSAGEHDLR **messagehdlr)
     * }
     */
    public static MethodHandle SCIPmessagehdlrRelease$handle() {
        return SCIPmessagehdlrRelease.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrRelease(SCIP_MESSAGEHDLR **messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrRelease$address() {
        return SCIPmessagehdlrRelease.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrRelease(SCIP_MESSAGEHDLR **messagehdlr)
     * }
     */
    public static int SCIPmessagehdlrRelease(MemorySegment messagehdlr) {
        var mh$ = SCIPmessagehdlrRelease.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrRelease", messagehdlr);
            }
            return (int)mh$.invokeExact(messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrSetData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrSetData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrSetData(SCIP_MESSAGEHDLR *messagehdlr, SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrSetData$descriptor() {
        return SCIPmessagehdlrSetData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrSetData(SCIP_MESSAGEHDLR *messagehdlr, SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static MethodHandle SCIPmessagehdlrSetData$handle() {
        return SCIPmessagehdlrSetData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrSetData(SCIP_MESSAGEHDLR *messagehdlr, SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static MemorySegment SCIPmessagehdlrSetData$address() {
        return SCIPmessagehdlrSetData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmessagehdlrSetData(SCIP_MESSAGEHDLR *messagehdlr, SCIP_MESSAGEHDLRDATA *messagehdlrdata)
     * }
     */
    public static int SCIPmessagehdlrSetData(MemorySegment messagehdlr, MemorySegment messagehdlrdata) {
        var mh$ = SCIPmessagehdlrSetData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrSetData", messagehdlr, messagehdlrdata);
            }
            return (int)mh$.invokeExact(messagehdlr, messagehdlrdata);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrSetLogfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrSetLogfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetLogfile(SCIP_MESSAGEHDLR *messagehdlr, const char *filename)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrSetLogfile$descriptor() {
        return SCIPmessagehdlrSetLogfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetLogfile(SCIP_MESSAGEHDLR *messagehdlr, const char *filename)
     * }
     */
    public static MethodHandle SCIPmessagehdlrSetLogfile$handle() {
        return SCIPmessagehdlrSetLogfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetLogfile(SCIP_MESSAGEHDLR *messagehdlr, const char *filename)
     * }
     */
    public static MemorySegment SCIPmessagehdlrSetLogfile$address() {
        return SCIPmessagehdlrSetLogfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetLogfile(SCIP_MESSAGEHDLR *messagehdlr, const char *filename)
     * }
     */
    public static void SCIPmessagehdlrSetLogfile(MemorySegment messagehdlr, MemorySegment filename) {
        var mh$ = SCIPmessagehdlrSetLogfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrSetLogfile", messagehdlr, filename);
            }
            mh$.invokeExact(messagehdlr, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrSetQuiet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrSetQuiet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetQuiet(SCIP_MESSAGEHDLR *messagehdlr, unsigned int quiet)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrSetQuiet$descriptor() {
        return SCIPmessagehdlrSetQuiet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetQuiet(SCIP_MESSAGEHDLR *messagehdlr, unsigned int quiet)
     * }
     */
    public static MethodHandle SCIPmessagehdlrSetQuiet$handle() {
        return SCIPmessagehdlrSetQuiet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetQuiet(SCIP_MESSAGEHDLR *messagehdlr, unsigned int quiet)
     * }
     */
    public static MemorySegment SCIPmessagehdlrSetQuiet$address() {
        return SCIPmessagehdlrSetQuiet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessagehdlrSetQuiet(SCIP_MESSAGEHDLR *messagehdlr, unsigned int quiet)
     * }
     */
    public static void SCIPmessagehdlrSetQuiet(MemorySegment messagehdlr, int quiet) {
        var mh$ = SCIPmessagehdlrSetQuiet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrSetQuiet", messagehdlr, quiet);
            }
            mh$.invokeExact(messagehdlr, quiet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessagePrintInfo(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessagePrintInfo {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagePrintInfo");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessagePrintInfo(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessagePrintInfo(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
         * }
         */
        public static SCIPmessagePrintInfo makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessagePrintInfo(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, MemorySegment formatstr, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessagePrintInfo", messagehdlr, formatstr, x2);
                }
                spreader.invokeExact(messagehdlr, formatstr, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVPrintInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVPrintInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVPrintInfo$descriptor() {
        return SCIPmessageVPrintInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVPrintInfo$handle() {
        return SCIPmessageVPrintInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVPrintInfo$address() {
        return SCIPmessageVPrintInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVPrintInfo(MemorySegment messagehdlr, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVPrintInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVPrintInfo", messagehdlr, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessageFPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessageFPrintInfo {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageFPrintInfo");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessageFPrintInfo(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessageFPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, ...)
         * }
         */
        public static SCIPmessageFPrintInfo makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessageFPrintInfo(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, MemorySegment file, MemorySegment formatstr, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessageFPrintInfo", messagehdlr, file, formatstr, x3);
                }
                spreader.invokeExact(messagehdlr, file, formatstr, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVFPrintInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVFPrintInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVFPrintInfo$descriptor() {
        return SCIPmessageVFPrintInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVFPrintInfo$handle() {
        return SCIPmessageVFPrintInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVFPrintInfo$address() {
        return SCIPmessageVFPrintInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVFPrintInfo(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVFPrintInfo(MemorySegment messagehdlr, MemorySegment file, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVFPrintInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVFPrintInfo", messagehdlr, file, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, file, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessagePrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessagePrintWarning {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagePrintWarning");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessagePrintWarning(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessagePrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
         * }
         */
        public static SCIPmessagePrintWarning makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessagePrintWarning(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, MemorySegment formatstr, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessagePrintWarning", messagehdlr, formatstr, x2);
                }
                spreader.invokeExact(messagehdlr, formatstr, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVPrintWarning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVPrintWarning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVPrintWarning$descriptor() {
        return SCIPmessageVPrintWarning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVPrintWarning$handle() {
        return SCIPmessageVPrintWarning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVPrintWarning$address() {
        return SCIPmessageVPrintWarning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVPrintWarning(MemorySegment messagehdlr, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVPrintWarning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVPrintWarning", messagehdlr, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessageFPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessageFPrintWarning {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageFPrintWarning");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessageFPrintWarning(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessageFPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
         * }
         */
        public static SCIPmessageFPrintWarning makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessageFPrintWarning(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, MemorySegment formatstr, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessageFPrintWarning", messagehdlr, formatstr, x2);
                }
                spreader.invokeExact(messagehdlr, formatstr, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVFPrintWarning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVFPrintWarning");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVFPrintWarning$descriptor() {
        return SCIPmessageVFPrintWarning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVFPrintWarning$handle() {
        return SCIPmessageVFPrintWarning.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVFPrintWarning$address() {
        return SCIPmessageVFPrintWarning.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVFPrintWarning(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVFPrintWarning(MemorySegment messagehdlr, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVFPrintWarning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVFPrintWarning", messagehdlr, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessagePrintDialog(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessagePrintDialog {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagePrintDialog");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessagePrintDialog(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessagePrintDialog(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, ...)
         * }
         */
        public static SCIPmessagePrintDialog makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessagePrintDialog(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, MemorySegment formatstr, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessagePrintDialog", messagehdlr, formatstr, x2);
                }
                spreader.invokeExact(messagehdlr, formatstr, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVPrintDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVPrintDialog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVPrintDialog$descriptor() {
        return SCIPmessageVPrintDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVPrintDialog$handle() {
        return SCIPmessageVPrintDialog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVPrintDialog$address() {
        return SCIPmessageVPrintDialog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVPrintDialog(MemorySegment messagehdlr, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVPrintDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVPrintDialog", messagehdlr, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessageFPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessageFPrintDialog {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageFPrintDialog");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessageFPrintDialog(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessageFPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, ...)
         * }
         */
        public static SCIPmessageFPrintDialog makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessageFPrintDialog(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, MemorySegment file, MemorySegment formatstr, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessageFPrintDialog", messagehdlr, file, formatstr, x3);
                }
                spreader.invokeExact(messagehdlr, file, formatstr, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVFPrintDialog {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVFPrintDialog");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVFPrintDialog$descriptor() {
        return SCIPmessageVFPrintDialog.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVFPrintDialog$handle() {
        return SCIPmessageVFPrintDialog.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVFPrintDialog$address() {
        return SCIPmessageVFPrintDialog.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVFPrintDialog(SCIP_MESSAGEHDLR *messagehdlr, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVFPrintDialog(MemorySegment messagehdlr, MemorySegment file, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVFPrintDialog.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVFPrintDialog", messagehdlr, file, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, file, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessagePrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessagePrintVerbInfo {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_INT,
                scip_h.C_INT,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagePrintVerbInfo");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessagePrintVerbInfo(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessagePrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, const char *formatstr, ...)
         * }
         */
        public static SCIPmessagePrintVerbInfo makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessagePrintVerbInfo(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, int verblevel, int msgverblevel, MemorySegment formatstr, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessagePrintVerbInfo", messagehdlr, verblevel, msgverblevel, formatstr, x4);
                }
                spreader.invokeExact(messagehdlr, verblevel, msgverblevel, formatstr, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVPrintVerbInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVPrintVerbInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVPrintVerbInfo$descriptor() {
        return SCIPmessageVPrintVerbInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVPrintVerbInfo$handle() {
        return SCIPmessageVPrintVerbInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVPrintVerbInfo$address() {
        return SCIPmessageVPrintVerbInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVPrintVerbInfo(MemorySegment messagehdlr, int verblevel, int msgverblevel, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVPrintVerbInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVPrintVerbInfo", messagehdlr, verblevel, msgverblevel, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, verblevel, msgverblevel, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessageFPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, FILE *file, const char *formatstr, ...)
     * }
     */
    public static class SCIPmessageFPrintVerbInfo {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER,
                scip_h.C_INT,
                scip_h.C_INT,
                scip_h.C_POINTER,
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageFPrintVerbInfo");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessageFPrintVerbInfo(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessageFPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, FILE *file, const char *formatstr, ...)
         * }
         */
        public static SCIPmessageFPrintVerbInfo makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessageFPrintVerbInfo(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment messagehdlr, int verblevel, int msgverblevel, MemorySegment file, MemorySegment formatstr, Object... x5) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessageFPrintVerbInfo", messagehdlr, verblevel, msgverblevel, file, formatstr, x5);
                }
                spreader.invokeExact(messagehdlr, verblevel, msgverblevel, file, formatstr, x5);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVFPrintVerbInfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVFPrintVerbInfo");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVFPrintVerbInfo$descriptor() {
        return SCIPmessageVFPrintVerbInfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVFPrintVerbInfo$handle() {
        return SCIPmessageVFPrintVerbInfo.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVFPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVFPrintVerbInfo$address() {
        return SCIPmessageVFPrintVerbInfo.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVFPrintVerbInfo(SCIP_MESSAGEHDLR *messagehdlr, SCIP_VERBLEVEL verblevel, SCIP_VERBLEVEL msgverblevel, FILE *file, const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVFPrintVerbInfo(MemorySegment messagehdlr, int verblevel, int msgverblevel, MemorySegment file, MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVFPrintVerbInfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVFPrintVerbInfo", messagehdlr, verblevel, msgverblevel, file, formatstr, ap);
            }
            mh$.invokeExact(messagehdlr, verblevel, msgverblevel, file, formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagePrintErrorHeader {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagePrintErrorHeader");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessagePrintErrorHeader(const char *sourcefile, int sourceline)
     * }
     */
    public static FunctionDescriptor SCIPmessagePrintErrorHeader$descriptor() {
        return SCIPmessagePrintErrorHeader.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessagePrintErrorHeader(const char *sourcefile, int sourceline)
     * }
     */
    public static MethodHandle SCIPmessagePrintErrorHeader$handle() {
        return SCIPmessagePrintErrorHeader.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessagePrintErrorHeader(const char *sourcefile, int sourceline)
     * }
     */
    public static MemorySegment SCIPmessagePrintErrorHeader$address() {
        return SCIPmessagePrintErrorHeader.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessagePrintErrorHeader(const char *sourcefile, int sourceline)
     * }
     */
    public static void SCIPmessagePrintErrorHeader(MemorySegment sourcefile, int sourceline) {
        var mh$ = SCIPmessagePrintErrorHeader.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagePrintErrorHeader", sourcefile, sourceline);
            }
            mh$.invokeExact(sourcefile, sourceline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * void SCIPmessagePrintError(const char *formatstr, ...)
     * }
     */
    public static class SCIPmessagePrintError {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                scip_h.C_POINTER
            );
        private static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagePrintError");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private SCIPmessagePrintError(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * void SCIPmessagePrintError(const char *formatstr, ...)
         * }
         */
        public static SCIPmessagePrintError makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new SCIPmessagePrintError(mh$, desc$, spreader$);
        }

        /**
         * {@return the address}
         */
        public static MemorySegment address() {
            return ADDR;
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment formatstr, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("SCIPmessagePrintError", formatstr, x1);
                }
                spreader.invokeExact(formatstr, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class SCIPmessageVPrintError {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageVPrintError");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintError(const char *formatstr, va_list ap)
     * }
     */
    public static FunctionDescriptor SCIPmessageVPrintError$descriptor() {
        return SCIPmessageVPrintError.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintError(const char *formatstr, va_list ap)
     * }
     */
    public static MethodHandle SCIPmessageVPrintError$handle() {
        return SCIPmessageVPrintError.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageVPrintError(const char *formatstr, va_list ap)
     * }
     */
    public static MemorySegment SCIPmessageVPrintError$address() {
        return SCIPmessageVPrintError.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageVPrintError(const char *formatstr, va_list ap)
     * }
     */
    public static void SCIPmessageVPrintError(MemorySegment formatstr, MemorySegment ap) {
        var mh$ = SCIPmessageVPrintError.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageVPrintError", formatstr, ap);
            }
            mh$.invokeExact(formatstr, ap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessageSetErrorPrinting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageSetErrorPrinting");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrinting(void (*errorPrinting)(void *, FILE *, const char *), void *data)
     * }
     */
    public static FunctionDescriptor SCIPmessageSetErrorPrinting$descriptor() {
        return SCIPmessageSetErrorPrinting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrinting(void (*errorPrinting)(void *, FILE *, const char *), void *data)
     * }
     */
    public static MethodHandle SCIPmessageSetErrorPrinting$handle() {
        return SCIPmessageSetErrorPrinting.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrinting(void (*errorPrinting)(void *, FILE *, const char *), void *data)
     * }
     */
    public static MemorySegment SCIPmessageSetErrorPrinting$address() {
        return SCIPmessageSetErrorPrinting.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrinting(void (*errorPrinting)(void *, FILE *, const char *), void *data)
     * }
     */
    public static void SCIPmessageSetErrorPrinting(MemorySegment errorPrinting, MemorySegment data) {
        var mh$ = SCIPmessageSetErrorPrinting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageSetErrorPrinting", errorPrinting, data);
            }
            mh$.invokeExact(errorPrinting, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessageSetErrorPrintingDefault {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessageSetErrorPrintingDefault");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrintingDefault()
     * }
     */
    public static FunctionDescriptor SCIPmessageSetErrorPrintingDefault$descriptor() {
        return SCIPmessageSetErrorPrintingDefault.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrintingDefault()
     * }
     */
    public static MethodHandle SCIPmessageSetErrorPrintingDefault$handle() {
        return SCIPmessageSetErrorPrintingDefault.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrintingDefault()
     * }
     */
    public static MemorySegment SCIPmessageSetErrorPrintingDefault$address() {
        return SCIPmessageSetErrorPrintingDefault.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmessageSetErrorPrintingDefault()
     * }
     */
    public static void SCIPmessageSetErrorPrintingDefault() {
        var mh$ = SCIPmessageSetErrorPrintingDefault.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessageSetErrorPrintingDefault");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrGetData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrGetData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_MESSAGEHDLRDATA *SCIPmessagehdlrGetData(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrGetData$descriptor() {
        return SCIPmessagehdlrGetData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_MESSAGEHDLRDATA *SCIPmessagehdlrGetData(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPmessagehdlrGetData$handle() {
        return SCIPmessagehdlrGetData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_MESSAGEHDLRDATA *SCIPmessagehdlrGetData(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrGetData$address() {
        return SCIPmessagehdlrGetData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_MESSAGEHDLRDATA *SCIPmessagehdlrGetData(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrGetData(MemorySegment messagehdlr) {
        var mh$ = SCIPmessagehdlrGetData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrGetData", messagehdlr);
            }
            return (MemorySegment)mh$.invokeExact(messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrGetLogfile {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrGetLogfile");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * FILE *SCIPmessagehdlrGetLogfile(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrGetLogfile$descriptor() {
        return SCIPmessagehdlrGetLogfile.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * FILE *SCIPmessagehdlrGetLogfile(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPmessagehdlrGetLogfile$handle() {
        return SCIPmessagehdlrGetLogfile.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * FILE *SCIPmessagehdlrGetLogfile(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrGetLogfile$address() {
        return SCIPmessagehdlrGetLogfile.ADDR;
    }

    /**
     * {@snippet lang=c :
     * FILE *SCIPmessagehdlrGetLogfile(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrGetLogfile(MemorySegment messagehdlr) {
        var mh$ = SCIPmessagehdlrGetLogfile.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrGetLogfile", messagehdlr);
            }
            return (MemorySegment)mh$.invokeExact(messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmessagehdlrIsQuiet {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmessagehdlrIsQuiet");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPmessagehdlrIsQuiet(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPmessagehdlrIsQuiet$descriptor() {
        return SCIPmessagehdlrIsQuiet.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPmessagehdlrIsQuiet(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPmessagehdlrIsQuiet$handle() {
        return SCIPmessagehdlrIsQuiet.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPmessagehdlrIsQuiet(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmessagehdlrIsQuiet$address() {
        return SCIPmessagehdlrIsQuiet.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPmessagehdlrIsQuiet(SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static int SCIPmessagehdlrIsQuiet(MemorySegment messagehdlr) {
        var mh$ = SCIPmessagehdlrIsQuiet.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmessagehdlrIsQuiet", messagehdlr);
            }
            return (int)mh$.invokeExact(messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectInd$descriptor() {
        return SCIPselectInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectInd$handle() {
        return SCIPselectInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectInd$address() {
        return SCIPselectInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static void SCIPselectInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int k, int len) {
        var mh$ = SCIPselectInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectInd", indarray, indcomp, dataptr, k, len);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedInd$descriptor() {
        return SCIPselectWeightedInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedInd$handle() {
        return SCIPselectWeightedInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedInd$address() {
        return SCIPselectWeightedInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedInd", indarray, indcomp, dataptr, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtr$descriptor() {
        return SCIPselectPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtr$handle() {
        return SCIPselectPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtr$address() {
        return SCIPselectPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtr(MemorySegment ptrarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtr", ptrarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtr$descriptor() {
        return SCIPselectWeightedPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtr$handle() {
        return SCIPselectWeightedPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtr$address() {
        return SCIPselectWeightedPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtr(MemorySegment ptrarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtr", ptrarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtr$descriptor() {
        return SCIPselectPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtr$handle() {
        return SCIPselectPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtr$address() {
        return SCIPselectPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtr", ptrarray1, ptrarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtr$descriptor() {
        return SCIPselectWeightedPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtr$handle() {
        return SCIPselectWeightedPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtr$address() {
        return SCIPselectWeightedPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtr", ptrarray1, ptrarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrReal$descriptor() {
        return SCIPselectPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrReal$handle() {
        return SCIPselectPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrReal$address() {
        return SCIPselectPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrReal", ptrarray, realarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrReal$descriptor() {
        return SCIPselectWeightedPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrReal$handle() {
        return SCIPselectWeightedPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrReal$address() {
        return SCIPselectWeightedPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrReal", ptrarray, realarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrInt$descriptor() {
        return SCIPselectPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrInt$handle() {
        return SCIPselectPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrInt$address() {
        return SCIPselectPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrInt", ptrarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrInt$descriptor() {
        return SCIPselectWeightedPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrInt$handle() {
        return SCIPselectWeightedPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrInt$address() {
        return SCIPselectWeightedPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrInt", ptrarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrBool$descriptor() {
        return SCIPselectPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrBool$handle() {
        return SCIPselectPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrBool$address() {
        return SCIPselectPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrBool", ptrarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrBool$descriptor() {
        return SCIPselectWeightedPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrBool$handle() {
        return SCIPselectWeightedPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrBool$address() {
        return SCIPselectWeightedPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrBool", ptrarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrIntInt$descriptor() {
        return SCIPselectPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrIntInt$handle() {
        return SCIPselectPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrIntInt$address() {
        return SCIPselectPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrIntInt$descriptor() {
        return SCIPselectWeightedPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrIntInt$handle() {
        return SCIPselectWeightedPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrIntInt$address() {
        return SCIPselectWeightedPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealInt$descriptor() {
        return SCIPselectPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealInt$handle() {
        return SCIPselectPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealInt$address() {
        return SCIPselectPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealInt", ptrarray, realarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealInt$descriptor() {
        return SCIPselectWeightedPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealInt$handle() {
        return SCIPselectWeightedPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealInt$address() {
        return SCIPselectWeightedPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealInt", ptrarray, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealRealInt$descriptor() {
        return SCIPselectPtrRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealRealInt$handle() {
        return SCIPselectPtrRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealRealInt$address() {
        return SCIPselectPtrRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealRealInt(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealRealInt", ptrarray, realarray1, realarray2, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealRealBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealRealBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealRealBoolBool$descriptor() {
        return SCIPselectPtrRealRealBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealRealBoolBool$handle() {
        return SCIPselectPtrRealRealBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealRealBoolBool$address() {
        return SCIPselectPtrRealRealBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealRealBoolBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealRealBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealRealBoolBool", ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealRealIntBool$descriptor() {
        return SCIPselectPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealRealIntBool$handle() {
        return SCIPselectPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealRealIntBool$address() {
        return SCIPselectPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealRealIntBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealRealIntBool", ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealRealInt$descriptor() {
        return SCIPselectWeightedPtrRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealRealInt$handle() {
        return SCIPselectWeightedPtrRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealRealInt$address() {
        return SCIPselectWeightedPtrRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealRealInt(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealRealInt", ptrarray, realarray1, realarray2, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealRealBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealRealBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealRealBoolBool$descriptor() {
        return SCIPselectWeightedPtrRealRealBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealRealBoolBool$handle() {
        return SCIPselectWeightedPtrRealRealBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealRealBoolBool$address() {
        return SCIPselectWeightedPtrRealRealBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealRealBoolBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealRealBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealRealBoolBool", ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealRealIntBool$descriptor() {
        return SCIPselectWeightedPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealRealIntBool$handle() {
        return SCIPselectWeightedPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealRealIntBool$address() {
        return SCIPselectWeightedPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealRealIntBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealRealIntBool", ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealBool$descriptor() {
        return SCIPselectPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealBool$handle() {
        return SCIPselectPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealBool$address() {
        return SCIPselectPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealBool$descriptor() {
        return SCIPselectWeightedPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealBool$handle() {
        return SCIPselectWeightedPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealBool$address() {
        return SCIPselectWeightedPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealReal$descriptor() {
        return SCIPselectPtrRealReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealReal$handle() {
        return SCIPselectPtrRealReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealReal$address() {
        return SCIPselectPtrRealReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealReal(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealReal", ptrarray, realarray1, realarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealReal$descriptor() {
        return SCIPselectWeightedPtrRealReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealReal$handle() {
        return SCIPselectWeightedPtrRealReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealReal$address() {
        return SCIPselectWeightedPtrRealReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealReal(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealReal", ptrarray, realarray1, realarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrInt$descriptor() {
        return SCIPselectPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrInt$handle() {
        return SCIPselectPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrInt$address() {
        return SCIPselectPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrInt$descriptor() {
        return SCIPselectWeightedPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrInt$handle() {
        return SCIPselectWeightedPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrInt$address() {
        return SCIPselectWeightedPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrReal$descriptor() {
        return SCIPselectPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrReal$handle() {
        return SCIPselectPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrReal$address() {
        return SCIPselectPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrReal$descriptor() {
        return SCIPselectWeightedPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrReal$handle() {
        return SCIPselectWeightedPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrReal$address() {
        return SCIPselectWeightedPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrIntInt$descriptor() {
        return SCIPselectPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrIntInt$handle() {
        return SCIPselectPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrIntInt$address() {
        return SCIPselectPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrIntInt$descriptor() {
        return SCIPselectWeightedPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrIntInt$handle() {
        return SCIPselectWeightedPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrIntInt$address() {
        return SCIPselectWeightedPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrRealIntInt$descriptor() {
        return SCIPselectPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrRealIntInt$handle() {
        return SCIPselectPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrRealIntInt$address() {
        return SCIPselectPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrRealIntInt$descriptor() {
        return SCIPselectWeightedPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrRealIntInt$handle() {
        return SCIPselectWeightedPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrRealIntInt$address() {
        return SCIPselectWeightedPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrRealInt$descriptor() {
        return SCIPselectPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrRealInt$handle() {
        return SCIPselectPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrRealInt$address() {
        return SCIPselectPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrRealInt$descriptor() {
        return SCIPselectWeightedPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrRealInt$handle() {
        return SCIPselectWeightedPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrRealInt$address() {
        return SCIPselectWeightedPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrRealBool$descriptor() {
        return SCIPselectPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrRealBool$handle() {
        return SCIPselectPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrRealBool$address() {
        return SCIPselectPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrRealBool$descriptor() {
        return SCIPselectWeightedPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrRealBool$handle() {
        return SCIPselectWeightedPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrRealBool$address() {
        return SCIPselectWeightedPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrLongInt$descriptor() {
        return SCIPselectPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrLongInt$handle() {
        return SCIPselectPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrLongInt$address() {
        return SCIPselectPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrLongInt$descriptor() {
        return SCIPselectWeightedPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrLongInt$handle() {
        return SCIPselectWeightedPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrLongInt$address() {
        return SCIPselectWeightedPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrPtrLongIntInt$descriptor() {
        return SCIPselectPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrPtrLongIntInt$handle() {
        return SCIPselectPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrPtrLongIntInt$address() {
        return SCIPselectPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrPtrLongIntInt$descriptor() {
        return SCIPselectWeightedPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrPtrLongIntInt$handle() {
        return SCIPselectWeightedPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrPtrLongIntInt$address() {
        return SCIPselectWeightedPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectReal(double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectReal$descriptor() {
        return SCIPselectReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectReal(double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectReal$handle() {
        return SCIPselectReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectReal(double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectReal$address() {
        return SCIPselectReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectReal(double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectReal(MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectReal", realarray, k, len);
            }
            mh$.invokeExact(realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedReal$descriptor() {
        return SCIPselectWeightedReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedReal$handle() {
        return SCIPselectWeightedReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedReal$address() {
        return SCIPselectWeightedReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedReal(MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedReal", realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealPtr$descriptor() {
        return SCIPselectRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealPtr$handle() {
        return SCIPselectRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealPtr$address() {
        return SCIPselectRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealPtr(MemorySegment realarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealPtr", realarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealPtr$descriptor() {
        return SCIPselectWeightedRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealPtr$handle() {
        return SCIPselectWeightedRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealPtr$address() {
        return SCIPselectWeightedRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealPtr(MemorySegment realarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealPtr", realarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealInt$descriptor() {
        return SCIPselectRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealInt$handle() {
        return SCIPselectRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealInt$address() {
        return SCIPselectRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectRealInt(MemorySegment realarray, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealInt", realarray, intarray, k, len);
            }
            mh$.invokeExact(realarray, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealInt$descriptor() {
        return SCIPselectWeightedRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealInt$handle() {
        return SCIPselectWeightedRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealInt$address() {
        return SCIPselectWeightedRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealInt(MemorySegment realarray, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealInt", realarray, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealIntInt$descriptor() {
        return SCIPselectRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealIntInt$handle() {
        return SCIPselectRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealIntInt$address() {
        return SCIPselectRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealIntInt", realarray, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealIntInt$descriptor() {
        return SCIPselectWeightedRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealIntInt$handle() {
        return SCIPselectWeightedRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealIntInt$address() {
        return SCIPselectWeightedRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealIntInt", realarray, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealBoolPtr$descriptor() {
        return SCIPselectRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealBoolPtr$handle() {
        return SCIPselectRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealBoolPtr$address() {
        return SCIPselectRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealBoolPtr", realarray, boolarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealBoolPtr$descriptor() {
        return SCIPselectWeightedRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealBoolPtr$handle() {
        return SCIPselectWeightedRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealBoolPtr$address() {
        return SCIPselectWeightedRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealBoolPtr", realarray, boolarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealIntLong$descriptor() {
        return SCIPselectRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealIntLong$handle() {
        return SCIPselectRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealIntLong$address() {
        return SCIPselectRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealIntLong", realarray, intarray, longarray, k, len);
            }
            mh$.invokeExact(realarray, intarray, longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealIntLong$descriptor() {
        return SCIPselectWeightedRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealIntLong$handle() {
        return SCIPselectWeightedRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealIntLong$address() {
        return SCIPselectWeightedRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealIntLong", realarray, intarray, longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray, longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealIntPtr$descriptor() {
        return SCIPselectRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealIntPtr$handle() {
        return SCIPselectRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealIntPtr$address() {
        return SCIPselectRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealIntPtr", realarray, intarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealIntPtr$descriptor() {
        return SCIPselectWeightedRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealIntPtr$handle() {
        return SCIPselectWeightedRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealIntPtr$address() {
        return SCIPselectWeightedRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealIntPtr", realarray, intarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealRealPtr$descriptor() {
        return SCIPselectRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealRealPtr$handle() {
        return SCIPselectRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealRealPtr$address() {
        return SCIPselectRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealRealPtr", realarray1, realarray2, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealRealPtr$descriptor() {
        return SCIPselectWeightedRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealRealPtr$handle() {
        return SCIPselectWeightedRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealRealPtr$address() {
        return SCIPselectWeightedRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealRealPtr", realarray1, realarray2, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealPtrPtrInt$descriptor() {
        return SCIPselectRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealPtrPtrInt$handle() {
        return SCIPselectRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealPtrPtrInt$address() {
        return SCIPselectRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, k, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealPtrPtrInt$descriptor() {
        return SCIPselectWeightedRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealPtrPtrInt$handle() {
        return SCIPselectWeightedRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealPtrPtrInt$address() {
        return SCIPselectWeightedRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealPtrPtrIntInt$descriptor() {
        return SCIPselectRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealPtrPtrIntInt$handle() {
        return SCIPselectRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealPtrPtrIntInt$address() {
        return SCIPselectRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealPtrPtrIntInt$descriptor() {
        return SCIPselectWeightedRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealPtrPtrIntInt$handle() {
        return SCIPselectWeightedRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealPtrPtrIntInt$address() {
        return SCIPselectWeightedRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealLongRealInt$descriptor() {
        return SCIPselectRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealLongRealInt$handle() {
        return SCIPselectRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealLongRealInt$address() {
        return SCIPselectRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealLongRealInt", realarray1, longarray, realarray3, intarray, k, len);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealLongRealInt$descriptor() {
        return SCIPselectWeightedRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealLongRealInt$handle() {
        return SCIPselectWeightedRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealLongRealInt$address() {
        return SCIPselectWeightedRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealLongRealInt", realarray1, longarray, realarray3, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealRealIntInt$descriptor() {
        return SCIPselectRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealRealIntInt$handle() {
        return SCIPselectRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealRealIntInt$address() {
        return SCIPselectRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealRealIntInt", realarray1, realarray2, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealRealIntInt$descriptor() {
        return SCIPselectWeightedRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealRealIntInt$handle() {
        return SCIPselectWeightedRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealRealIntInt$address() {
        return SCIPselectWeightedRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealRealIntInt", realarray1, realarray2, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealRealRealInt$descriptor() {
        return SCIPselectRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealRealRealInt$handle() {
        return SCIPselectRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealRealRealInt$address() {
        return SCIPselectRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealRealRealInt", realarray1, realarray2, realarray3, intarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealRealRealInt$descriptor() {
        return SCIPselectWeightedRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealRealRealInt$handle() {
        return SCIPselectWeightedRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealRealRealInt$address() {
        return SCIPselectWeightedRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealRealRealInt", realarray1, realarray2, realarray3, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealRealRealPtr$descriptor() {
        return SCIPselectRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealRealRealPtr$handle() {
        return SCIPselectRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealRealRealPtr$address() {
        return SCIPselectRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealRealRealPtr$descriptor() {
        return SCIPselectWeightedRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealRealRealPtr$handle() {
        return SCIPselectWeightedRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealRealRealPtr$address() {
        return SCIPselectWeightedRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealRealRealBoolPtr$descriptor() {
        return SCIPselectRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealRealRealBoolPtr$handle() {
        return SCIPselectRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealRealRealBoolPtr$address() {
        return SCIPselectRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealRealRealBoolPtr$descriptor() {
        return SCIPselectWeightedRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealRealRealBoolPtr$handle() {
        return SCIPselectWeightedRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealRealRealBoolPtr$address() {
        return SCIPselectWeightedRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectRealRealRealBoolBoolPtr$descriptor() {
        return SCIPselectRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectRealRealRealBoolBoolPtr$handle() {
        return SCIPselectRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectRealRealRealBoolBoolPtr$address() {
        return SCIPselectRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedRealRealRealBoolBoolPtr$descriptor() {
        return SCIPselectWeightedRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedRealRealRealBoolBoolPtr$handle() {
        return SCIPselectWeightedRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedRealRealRealBoolBoolPtr$address() {
        return SCIPselectWeightedRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectInt(int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectInt$descriptor() {
        return SCIPselectInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectInt(int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectInt$handle() {
        return SCIPselectInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectInt(int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectInt$address() {
        return SCIPselectInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectInt(int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectInt(MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectInt", intarray, k, len);
            }
            mh$.invokeExact(intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedInt$descriptor() {
        return SCIPselectWeightedInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedInt$handle() {
        return SCIPselectWeightedInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedInt$address() {
        return SCIPselectWeightedInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedInt(MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedInt", intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntInt$descriptor() {
        return SCIPselectIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntInt$handle() {
        return SCIPselectIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntInt$address() {
        return SCIPselectIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectIntInt(MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntInt", intarray1, intarray2, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntInt$descriptor() {
        return SCIPselectWeightedIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntInt$handle() {
        return SCIPselectWeightedIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntInt$address() {
        return SCIPselectWeightedIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntInt", intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntPtr$descriptor() {
        return SCIPselectIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntPtr$handle() {
        return SCIPselectIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntPtr$address() {
        return SCIPselectIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectIntPtr(MemorySegment intarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntPtr", intarray, ptrarray, k, len);
            }
            mh$.invokeExact(intarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntPtr$descriptor() {
        return SCIPselectWeightedIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntPtr$handle() {
        return SCIPselectWeightedIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntPtr$address() {
        return SCIPselectWeightedIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntPtr(MemorySegment intarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntPtr", intarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntReal$descriptor() {
        return SCIPselectIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntReal$handle() {
        return SCIPselectIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntReal$address() {
        return SCIPselectIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectIntReal(MemorySegment intarray, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntReal", intarray, realarray, k, len);
            }
            mh$.invokeExact(intarray, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntReal$descriptor() {
        return SCIPselectWeightedIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntReal$handle() {
        return SCIPselectWeightedIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntReal$address() {
        return SCIPselectWeightedIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntReal(MemorySegment intarray, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntReal", intarray, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntIntInt$descriptor() {
        return SCIPselectIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntIntInt$handle() {
        return SCIPselectIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntIntInt$address() {
        return SCIPselectIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static void SCIPselectIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int k, int len) {
        var mh$ = SCIPselectIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntIntInt", intarray1, intarray2, intarray3, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntIntInt$descriptor() {
        return SCIPselectWeightedIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntIntInt$handle() {
        return SCIPselectWeightedIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntIntInt$address() {
        return SCIPselectWeightedIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntIntInt", intarray1, intarray2, intarray3, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntIntLong$descriptor() {
        return SCIPselectIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntIntLong$handle() {
        return SCIPselectIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntIntLong$address() {
        return SCIPselectIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntIntLong", intarray1, intarray2, longarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntIntLong$descriptor() {
        return SCIPselectWeightedIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntIntLong$handle() {
        return SCIPselectWeightedIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntIntLong$address() {
        return SCIPselectWeightedIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntIntLong", intarray1, intarray2, longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntRealLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntRealLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntRealLong(int *intarray, double *realarray, long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntRealLong$descriptor() {
        return SCIPselectIntRealLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntRealLong(int *intarray, double *realarray, long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntRealLong$handle() {
        return SCIPselectIntRealLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntRealLong(int *intarray, double *realarray, long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntRealLong$address() {
        return SCIPselectIntRealLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntRealLong(int *intarray, double *realarray, long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectIntRealLong(MemorySegment intarray, MemorySegment realarray, MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectIntRealLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntRealLong", intarray, realarray, longarray, k, len);
            }
            mh$.invokeExact(intarray, realarray, longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntRealLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntRealLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntRealLong(int *intarray, double *realarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntRealLong$descriptor() {
        return SCIPselectWeightedIntRealLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntRealLong(int *intarray, double *realarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntRealLong$handle() {
        return SCIPselectWeightedIntRealLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntRealLong(int *intarray, double *realarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntRealLong$address() {
        return SCIPselectWeightedIntRealLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntRealLong(int *intarray, double *realarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntRealLong(MemorySegment intarray, MemorySegment realarray, MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntRealLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntRealLong", intarray, realarray, longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, realarray, longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntIntPtr$descriptor() {
        return SCIPselectIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntIntPtr$handle() {
        return SCIPselectIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntIntPtr$address() {
        return SCIPselectIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntIntPtr", intarray1, intarray2, ptrarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntIntPtr$descriptor() {
        return SCIPselectWeightedIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntIntPtr$handle() {
        return SCIPselectWeightedIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntIntPtr$address() {
        return SCIPselectWeightedIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntIntPtr", intarray1, intarray2, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntIntReal$descriptor() {
        return SCIPselectIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntIntReal$handle() {
        return SCIPselectIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntIntReal$address() {
        return SCIPselectIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntIntReal", intarray1, intarray2, realarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntIntReal$descriptor() {
        return SCIPselectWeightedIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntIntReal$handle() {
        return SCIPselectWeightedIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntIntReal$address() {
        return SCIPselectWeightedIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntIntReal", intarray1, intarray2, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrReal(int *intarray, void **ptrarray, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntPtrReal$descriptor() {
        return SCIPselectIntPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrReal(int *intarray, void **ptrarray, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntPtrReal$handle() {
        return SCIPselectIntPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrReal(int *intarray, void **ptrarray, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntPtrReal$address() {
        return SCIPselectIntPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntPtrReal(int *intarray, void **ptrarray, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectIntPtrReal(MemorySegment intarray, MemorySegment ptrarray, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectIntPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntPtrReal", intarray, ptrarray, realarray, k, len);
            }
            mh$.invokeExact(intarray, ptrarray, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrReal(int *intarray, void **ptrarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntPtrReal$descriptor() {
        return SCIPselectWeightedIntPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrReal(int *intarray, void **ptrarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntPtrReal$handle() {
        return SCIPselectWeightedIntPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrReal(int *intarray, void **ptrarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntPtrReal$address() {
        return SCIPselectWeightedIntPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrReal(int *intarray, void **ptrarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntPtrReal(MemorySegment intarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntPtrReal", intarray, ptrarray, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, ptrarray, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntIntIntPtr$descriptor() {
        return SCIPselectIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntIntIntPtr$handle() {
        return SCIPselectIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntIntIntPtr$address() {
        return SCIPselectIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntIntIntPtr$descriptor() {
        return SCIPselectWeightedIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntIntIntPtr$handle() {
        return SCIPselectWeightedIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntIntIntPtr$address() {
        return SCIPselectWeightedIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntIntIntReal$descriptor() {
        return SCIPselectIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntIntIntReal$handle() {
        return SCIPselectIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntIntIntReal$address() {
        return SCIPselectIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntIntIntReal", intarray1, intarray2, intarray3, realarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntIntIntReal$descriptor() {
        return SCIPselectWeightedIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntIntIntReal$handle() {
        return SCIPselectWeightedIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntIntIntReal$address() {
        return SCIPselectWeightedIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntIntIntReal", intarray1, intarray2, intarray3, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntPtrIntReal$descriptor() {
        return SCIPselectIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntPtrIntReal$handle() {
        return SCIPselectIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntPtrIntReal$address() {
        return SCIPselectIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, k, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntPtrIntReal$descriptor() {
        return SCIPselectWeightedIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntPtrIntReal$handle() {
        return SCIPselectWeightedIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntPtrIntReal$address() {
        return SCIPselectWeightedIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLong(long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLong$descriptor() {
        return SCIPselectLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLong(long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLong$handle() {
        return SCIPselectLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLong(long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLong$address() {
        return SCIPselectLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLong(long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectLong(MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLong", longarray, k, len);
            }
            mh$.invokeExact(longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLong$descriptor() {
        return SCIPselectWeightedLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLong$handle() {
        return SCIPselectWeightedLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLong$address() {
        return SCIPselectWeightedLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLong(MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLong", longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtr$descriptor() {
        return SCIPselectLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtr$handle() {
        return SCIPselectLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtr$address() {
        return SCIPselectLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtr(MemorySegment longarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtr", longarray, ptrarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtr$descriptor() {
        return SCIPselectWeightedLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtr$handle() {
        return SCIPselectWeightedLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtr$address() {
        return SCIPselectWeightedLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtr(MemorySegment longarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtr", longarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrInt$descriptor() {
        return SCIPselectLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrInt$handle() {
        return SCIPselectLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrInt$address() {
        return SCIPselectLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrInt", longarray, ptrarray, intarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrInt$descriptor() {
        return SCIPselectWeightedLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrInt$handle() {
        return SCIPselectWeightedLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrInt$address() {
        return SCIPselectWeightedLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrInt", longarray, ptrarray, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrRealBool$descriptor() {
        return SCIPselectLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrRealBool$handle() {
        return SCIPselectLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrRealBool$address() {
        return SCIPselectLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, int k, int len) {
        var mh$ = SCIPselectLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrRealBool", longarray, ptrarray, realarray, boolarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrRealBool$descriptor() {
        return SCIPselectWeightedLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrRealBool$handle() {
        return SCIPselectWeightedLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrRealBool$address() {
        return SCIPselectWeightedLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrRealBool", longarray, ptrarray, realarray, boolarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrRealRealBool$descriptor() {
        return SCIPselectLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrRealRealBool$handle() {
        return SCIPselectLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrRealRealBool$address() {
        return SCIPselectLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, int k, int len) {
        var mh$ = SCIPselectLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrRealRealBool$descriptor() {
        return SCIPselectWeightedLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrRealRealBool$handle() {
        return SCIPselectWeightedLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrRealRealBool$address() {
        return SCIPselectWeightedLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrRealRealIntBool$descriptor() {
        return SCIPselectLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrRealRealIntBool$handle() {
        return SCIPselectLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrRealRealIntBool$address() {
        return SCIPselectLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, int k, int len) {
        var mh$ = SCIPselectLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrRealRealIntBool$descriptor() {
        return SCIPselectWeightedLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrRealRealIntBool$handle() {
        return SCIPselectWeightedLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrRealRealIntBool$address() {
        return SCIPselectWeightedLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrPtrInt$descriptor() {
        return SCIPselectLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrPtrInt$handle() {
        return SCIPselectLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrPtrInt$address() {
        return SCIPselectLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrPtrInt$descriptor() {
        return SCIPselectWeightedLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrPtrInt$handle() {
        return SCIPselectWeightedLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrPtrInt$address() {
        return SCIPselectWeightedLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrPtrIntInt$descriptor() {
        return SCIPselectLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrPtrIntInt$handle() {
        return SCIPselectLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrPtrIntInt$address() {
        return SCIPselectLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrPtrIntInt$descriptor() {
        return SCIPselectWeightedLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrPtrIntInt$handle() {
        return SCIPselectWeightedLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrPtrIntInt$address() {
        return SCIPselectWeightedLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectLongPtrPtrBoolInt$descriptor() {
        return SCIPselectLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectLongPtrPtrBoolInt$handle() {
        return SCIPselectLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectLongPtrPtrBoolInt$address() {
        return SCIPselectLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedLongPtrPtrBoolInt$descriptor() {
        return SCIPselectWeightedLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedLongPtrPtrBoolInt$handle() {
        return SCIPselectWeightedLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedLongPtrPtrBoolInt$address() {
        return SCIPselectWeightedLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectPtrIntIntBoolBool$descriptor() {
        return SCIPselectPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectPtrIntIntBoolBool$handle() {
        return SCIPselectPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectPtrIntIntBoolBool$address() {
        return SCIPselectPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedPtrIntIntBoolBool$descriptor() {
        return SCIPselectWeightedPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedPtrIntIntBoolBool$handle() {
        return SCIPselectWeightedPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedPtrIntIntBoolBool$address() {
        return SCIPselectWeightedPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectIntPtrIntIntBoolBool$descriptor() {
        return SCIPselectIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectIntPtrIntIntBoolBool$handle() {
        return SCIPselectIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectIntPtrIntIntBoolBool$address() {
        return SCIPselectIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static void SCIPselectIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int k, int len) {
        var mh$ = SCIPselectIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, k, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedIntPtrIntIntBoolBool$descriptor() {
        return SCIPselectWeightedIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedIntPtrIntIntBoolBool$handle() {
        return SCIPselectWeightedIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedIntPtrIntIntBoolBool$address() {
        return SCIPselectWeightedIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownInd$descriptor() {
        return SCIPselectDownInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownInd$handle() {
        return SCIPselectDownInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownInd$address() {
        return SCIPselectDownInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int k, int len)
     * }
     */
    public static void SCIPselectDownInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int k, int len) {
        var mh$ = SCIPselectDownInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownInd", indarray, indcomp, dataptr, k, len);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownInd$descriptor() {
        return SCIPselectWeightedDownInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownInd$handle() {
        return SCIPselectWeightedDownInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownInd$address() {
        return SCIPselectWeightedDownInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownInd", indarray, indcomp, dataptr, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtr$descriptor() {
        return SCIPselectDownPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtr$handle() {
        return SCIPselectDownPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtr$address() {
        return SCIPselectDownPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtr(MemorySegment ptrarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtr", ptrarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtr$descriptor() {
        return SCIPselectWeightedDownPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtr$handle() {
        return SCIPselectWeightedDownPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtr$address() {
        return SCIPselectWeightedDownPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtr(MemorySegment ptrarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtr", ptrarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtr$descriptor() {
        return SCIPselectDownPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtr$handle() {
        return SCIPselectDownPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtr$address() {
        return SCIPselectDownPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtr", ptrarray1, ptrarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtr$descriptor() {
        return SCIPselectWeightedDownPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtr$handle() {
        return SCIPselectWeightedDownPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtr$address() {
        return SCIPselectWeightedDownPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtr", ptrarray1, ptrarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrReal$descriptor() {
        return SCIPselectDownPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrReal$handle() {
        return SCIPselectDownPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrReal$address() {
        return SCIPselectDownPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrReal", ptrarray, realarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrReal$descriptor() {
        return SCIPselectWeightedDownPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrReal$handle() {
        return SCIPselectWeightedDownPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrReal$address() {
        return SCIPselectWeightedDownPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrReal", ptrarray, realarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrInt$descriptor() {
        return SCIPselectDownPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrInt$handle() {
        return SCIPselectDownPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrInt$address() {
        return SCIPselectDownPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrInt", ptrarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrInt$descriptor() {
        return SCIPselectWeightedDownPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrInt$handle() {
        return SCIPselectWeightedDownPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrInt$address() {
        return SCIPselectWeightedDownPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrInt", ptrarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrBool$descriptor() {
        return SCIPselectDownPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrBool$handle() {
        return SCIPselectDownPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrBool$address() {
        return SCIPselectDownPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrBool", ptrarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrBool$descriptor() {
        return SCIPselectWeightedDownPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrBool$handle() {
        return SCIPselectWeightedDownPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrBool$address() {
        return SCIPselectWeightedDownPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrBool", ptrarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrIntInt$descriptor() {
        return SCIPselectDownPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrIntInt$handle() {
        return SCIPselectDownPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrIntInt$address() {
        return SCIPselectDownPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrIntInt$descriptor() {
        return SCIPselectWeightedDownPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrIntInt$handle() {
        return SCIPselectWeightedDownPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrIntInt$address() {
        return SCIPselectWeightedDownPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrRealInt$descriptor() {
        return SCIPselectDownPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrRealInt$handle() {
        return SCIPselectDownPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrRealInt$address() {
        return SCIPselectDownPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrRealInt", ptrarray, realarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrRealInt$descriptor() {
        return SCIPselectWeightedDownPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrRealInt$handle() {
        return SCIPselectWeightedDownPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrRealInt$address() {
        return SCIPselectWeightedDownPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrRealInt", ptrarray, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrRealBool$descriptor() {
        return SCIPselectDownPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrRealBool$handle() {
        return SCIPselectDownPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrRealBool$address() {
        return SCIPselectDownPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrRealBool$descriptor() {
        return SCIPselectWeightedDownPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrRealBool$handle() {
        return SCIPselectWeightedDownPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrRealBool$address() {
        return SCIPselectWeightedDownPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrInt$descriptor() {
        return SCIPselectDownPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrInt$handle() {
        return SCIPselectDownPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrInt$address() {
        return SCIPselectDownPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrInt$descriptor() {
        return SCIPselectWeightedDownPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrInt$handle() {
        return SCIPselectWeightedDownPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrInt$address() {
        return SCIPselectWeightedDownPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrReal$descriptor() {
        return SCIPselectDownPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrReal$handle() {
        return SCIPselectDownPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrReal$address() {
        return SCIPselectDownPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrReal$descriptor() {
        return SCIPselectWeightedDownPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrReal$handle() {
        return SCIPselectWeightedDownPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrReal$address() {
        return SCIPselectWeightedDownPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrIntInt$descriptor() {
        return SCIPselectDownPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrIntInt$handle() {
        return SCIPselectDownPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrIntInt$address() {
        return SCIPselectDownPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrIntInt$descriptor() {
        return SCIPselectWeightedDownPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrIntInt$handle() {
        return SCIPselectWeightedDownPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrIntInt$address() {
        return SCIPselectWeightedDownPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrRealIntInt$descriptor() {
        return SCIPselectDownPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrRealIntInt$handle() {
        return SCIPselectDownPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrRealIntInt$address() {
        return SCIPselectDownPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrRealIntInt$descriptor() {
        return SCIPselectWeightedDownPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrRealIntInt$handle() {
        return SCIPselectWeightedDownPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrRealIntInt$address() {
        return SCIPselectWeightedDownPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrRealInt$descriptor() {
        return SCIPselectDownPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrRealInt$handle() {
        return SCIPselectDownPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrRealInt$address() {
        return SCIPselectDownPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrRealInt$descriptor() {
        return SCIPselectWeightedDownPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrRealInt$handle() {
        return SCIPselectWeightedDownPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrRealInt$address() {
        return SCIPselectWeightedDownPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrRealBool$descriptor() {
        return SCIPselectDownPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrRealBool$handle() {
        return SCIPselectDownPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrRealBool$address() {
        return SCIPselectDownPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrRealBool$descriptor() {
        return SCIPselectWeightedDownPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrRealBool$handle() {
        return SCIPselectWeightedDownPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrRealBool$address() {
        return SCIPselectWeightedDownPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrLongInt$descriptor() {
        return SCIPselectDownPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrLongInt$handle() {
        return SCIPselectDownPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrLongInt$address() {
        return SCIPselectDownPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrLongInt$descriptor() {
        return SCIPselectWeightedDownPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrLongInt$handle() {
        return SCIPselectWeightedDownPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrLongInt$address() {
        return SCIPselectWeightedDownPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrPtrLongIntInt$descriptor() {
        return SCIPselectDownPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrPtrLongIntInt$handle() {
        return SCIPselectDownPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrPtrLongIntInt$address() {
        return SCIPselectDownPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrPtrLongIntInt$descriptor() {
        return SCIPselectWeightedDownPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrPtrLongIntInt$handle() {
        return SCIPselectWeightedDownPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrPtrLongIntInt$address() {
        return SCIPselectWeightedDownPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownReal(double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownReal$descriptor() {
        return SCIPselectDownReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownReal(double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownReal$handle() {
        return SCIPselectDownReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownReal(double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownReal$address() {
        return SCIPselectDownReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownReal(double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectDownReal(MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectDownReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownReal", realarray, k, len);
            }
            mh$.invokeExact(realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownReal$descriptor() {
        return SCIPselectWeightedDownReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownReal$handle() {
        return SCIPselectWeightedDownReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownReal$address() {
        return SCIPselectWeightedDownReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownReal(double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownReal(MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownReal", realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealPtr$descriptor() {
        return SCIPselectDownRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealPtr$handle() {
        return SCIPselectDownRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealPtr$address() {
        return SCIPselectDownRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealPtr(double *realarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealPtr(MemorySegment realarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealPtr", realarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealPtr$descriptor() {
        return SCIPselectWeightedDownRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealPtr$handle() {
        return SCIPselectWeightedDownRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealPtr$address() {
        return SCIPselectWeightedDownRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtr(double *realarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealPtr(MemorySegment realarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealPtr", realarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealInt$descriptor() {
        return SCIPselectDownRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealInt$handle() {
        return SCIPselectDownRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealInt$address() {
        return SCIPselectDownRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealInt(double *realarray, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealInt(MemorySegment realarray, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealInt", realarray, intarray, k, len);
            }
            mh$.invokeExact(realarray, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealIntInt$descriptor() {
        return SCIPselectDownRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealIntInt$handle() {
        return SCIPselectDownRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealIntInt$address() {
        return SCIPselectDownRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectDownRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealIntInt", realarray, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealInt$descriptor() {
        return SCIPselectWeightedDownRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealInt$handle() {
        return SCIPselectWeightedDownRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealInt$address() {
        return SCIPselectWeightedDownRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealInt(double *realarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealInt(MemorySegment realarray, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealInt", realarray, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealIntInt$descriptor() {
        return SCIPselectWeightedDownRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealIntInt$handle() {
        return SCIPselectWeightedDownRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealIntInt$address() {
        return SCIPselectWeightedDownRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealIntInt", realarray, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealBoolPtr$descriptor() {
        return SCIPselectDownRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealBoolPtr$handle() {
        return SCIPselectDownRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealBoolPtr$address() {
        return SCIPselectDownRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealBoolPtr", realarray, boolarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealBoolPtr$descriptor() {
        return SCIPselectWeightedDownRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealBoolPtr$handle() {
        return SCIPselectWeightedDownRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealBoolPtr$address() {
        return SCIPselectWeightedDownRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealBoolPtr", realarray, boolarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealIntLong$descriptor() {
        return SCIPselectDownRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealIntLong$handle() {
        return SCIPselectDownRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealIntLong$address() {
        return SCIPselectDownRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealIntLong(double *realarray, int *intarray, long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectDownRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealIntLong", realarray, intarray, longarray, k, len);
            }
            mh$.invokeExact(realarray, intarray, longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealIntLong$descriptor() {
        return SCIPselectWeightedDownRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealIntLong$handle() {
        return SCIPselectWeightedDownRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealIntLong$address() {
        return SCIPselectWeightedDownRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntLong(double *realarray, int *intarray, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealIntLong", realarray, intarray, longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray, longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealIntPtr$descriptor() {
        return SCIPselectDownRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealIntPtr$handle() {
        return SCIPselectDownRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealIntPtr$address() {
        return SCIPselectDownRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealIntPtr", realarray, intarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealIntPtr$descriptor() {
        return SCIPselectWeightedDownRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealIntPtr$handle() {
        return SCIPselectWeightedDownRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealIntPtr$address() {
        return SCIPselectWeightedDownRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealIntPtr", realarray, intarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealInt$descriptor() {
        return SCIPselectDownRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealInt$handle() {
        return SCIPselectDownRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealInt$address() {
        return SCIPselectDownRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealInt", realarray1, realarray2, intarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealInt(double *realarray1, double *realarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealInt$descriptor() {
        return SCIPselectWeightedDownRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealInt(double *realarray1, double *realarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealInt$handle() {
        return SCIPselectWeightedDownRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealInt(double *realarray1, double *realarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealInt$address() {
        return SCIPselectWeightedDownRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealInt(double *realarray1, double *realarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealInt", realarray1, realarray2, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealPtr$descriptor() {
        return SCIPselectDownRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealPtr$handle() {
        return SCIPselectDownRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealPtr$address() {
        return SCIPselectDownRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealPtr", realarray1, realarray2, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealPtr$descriptor() {
        return SCIPselectWeightedDownRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealPtr$handle() {
        return SCIPselectWeightedDownRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealPtr$address() {
        return SCIPselectWeightedDownRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealPtr", realarray1, realarray2, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealPtrPtr$descriptor() {
        return SCIPselectDownRealRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealPtrPtr$handle() {
        return SCIPselectDownRealRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealPtrPtr$address() {
        return SCIPselectDownRealRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealPtrPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray1, MemorySegment ptrarray2, int k, int len) {
        var mh$ = SCIPselectDownRealRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealPtrPtr", realarray1, realarray2, ptrarray1, ptrarray2, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray1, ptrarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealPtrPtr$descriptor() {
        return SCIPselectWeightedDownRealRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealPtrPtr$handle() {
        return SCIPselectWeightedDownRealRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealPtrPtr$address() {
        return SCIPselectWeightedDownRealRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealPtrPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealPtrPtr", realarray1, realarray2, ptrarray1, ptrarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray1, ptrarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealPtrPtrInt$descriptor() {
        return SCIPselectDownRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealPtrPtrInt$handle() {
        return SCIPselectDownRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealPtrPtrInt$address() {
        return SCIPselectDownRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, k, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealPtrPtrInt$descriptor() {
        return SCIPselectWeightedDownRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealPtrPtrInt$handle() {
        return SCIPselectWeightedDownRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealPtrPtrInt$address() {
        return SCIPselectWeightedDownRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealPtrPtrIntInt$descriptor() {
        return SCIPselectDownRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealPtrPtrIntInt$handle() {
        return SCIPselectDownRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealPtrPtrIntInt$address() {
        return SCIPselectDownRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectDownRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealPtrPtrIntInt$descriptor() {
        return SCIPselectWeightedDownRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealPtrPtrIntInt$handle() {
        return SCIPselectWeightedDownRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealPtrPtrIntInt$address() {
        return SCIPselectWeightedDownRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealLongRealInt$descriptor() {
        return SCIPselectDownRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealLongRealInt$handle() {
        return SCIPselectDownRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealLongRealInt$address() {
        return SCIPselectDownRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealLongRealInt", realarray1, longarray, realarray3, intarray, k, len);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealLongRealInt$descriptor() {
        return SCIPselectWeightedDownRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealLongRealInt$handle() {
        return SCIPselectWeightedDownRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealLongRealInt$address() {
        return SCIPselectWeightedDownRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealLongRealInt", realarray1, longarray, realarray3, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealIntInt$descriptor() {
        return SCIPselectDownRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealIntInt$handle() {
        return SCIPselectDownRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealIntInt$address() {
        return SCIPselectDownRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectDownRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealIntInt", realarray1, realarray2, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealIntInt$descriptor() {
        return SCIPselectWeightedDownRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealIntInt$handle() {
        return SCIPselectWeightedDownRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealIntInt$address() {
        return SCIPselectWeightedDownRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealIntInt", realarray1, realarray2, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealRealInt$descriptor() {
        return SCIPselectDownRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealRealInt$handle() {
        return SCIPselectDownRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealRealInt$address() {
        return SCIPselectDownRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealRealInt", realarray1, realarray2, realarray3, intarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealRealInt$descriptor() {
        return SCIPselectWeightedDownRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealRealInt$handle() {
        return SCIPselectWeightedDownRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealRealInt$address() {
        return SCIPselectWeightedDownRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealRealInt", realarray1, realarray2, realarray3, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealRealPtr$descriptor() {
        return SCIPselectDownRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealRealPtr$handle() {
        return SCIPselectDownRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealRealPtr$address() {
        return SCIPselectDownRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealRealPtr$descriptor() {
        return SCIPselectWeightedDownRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealRealPtr$handle() {
        return SCIPselectWeightedDownRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealRealPtr$address() {
        return SCIPselectWeightedDownRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealPtrPtr$descriptor() {
        return SCIPselectDownRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealPtrPtr$handle() {
        return SCIPselectDownRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealPtrPtr$address() {
        return SCIPselectDownRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownRealPtrPtr(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, int k, int len) {
        var mh$ = SCIPselectDownRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealPtrPtr", realarray, ptrarray1, ptrarray2, k, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealPtrPtr$descriptor() {
        return SCIPselectWeightedDownRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealPtrPtr$handle() {
        return SCIPselectWeightedDownRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealPtrPtr$address() {
        return SCIPselectWeightedDownRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealPtrPtr(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealPtrPtr", realarray, ptrarray1, ptrarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealRealBoolPtr$descriptor() {
        return SCIPselectDownRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealRealBoolPtr$handle() {
        return SCIPselectDownRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealRealBoolPtr$address() {
        return SCIPselectDownRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealRealBoolPtr$descriptor() {
        return SCIPselectWeightedDownRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealRealBoolPtr$handle() {
        return SCIPselectWeightedDownRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealRealBoolPtr$address() {
        return SCIPselectWeightedDownRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownRealRealRealBoolBoolPtr$descriptor() {
        return SCIPselectDownRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownRealRealRealBoolBoolPtr$handle() {
        return SCIPselectDownRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownRealRealRealBoolBoolPtr$address() {
        return SCIPselectDownRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, k, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownRealRealRealBoolBoolPtr$descriptor() {
        return SCIPselectWeightedDownRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownRealRealRealBoolBoolPtr$handle() {
        return SCIPselectWeightedDownRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownRealRealRealBoolBoolPtr$address() {
        return SCIPselectWeightedDownRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownInt(int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownInt$descriptor() {
        return SCIPselectDownInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownInt(int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownInt$handle() {
        return SCIPselectDownInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownInt(int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownInt$address() {
        return SCIPselectDownInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownInt(int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownInt(MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownInt", intarray, k, len);
            }
            mh$.invokeExact(intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownInt$descriptor() {
        return SCIPselectWeightedDownInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownInt$handle() {
        return SCIPselectWeightedDownInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownInt$address() {
        return SCIPselectWeightedDownInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownInt(int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownInt(MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownInt", intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntInt$descriptor() {
        return SCIPselectDownIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntInt$handle() {
        return SCIPselectDownIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntInt$address() {
        return SCIPselectDownIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntInt(int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownIntInt(MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectDownIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntInt", intarray1, intarray2, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntInt$descriptor() {
        return SCIPselectWeightedDownIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntInt$handle() {
        return SCIPselectWeightedDownIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntInt$address() {
        return SCIPselectWeightedDownIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntInt(int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntInt", intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntPtr$descriptor() {
        return SCIPselectDownIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntPtr$handle() {
        return SCIPselectDownIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntPtr$address() {
        return SCIPselectDownIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntPtr(int *intarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntPtr(MemorySegment intarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntPtr", intarray, ptrarray, k, len);
            }
            mh$.invokeExact(intarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntPtr$descriptor() {
        return SCIPselectWeightedDownIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntPtr$handle() {
        return SCIPselectWeightedDownIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntPtr$address() {
        return SCIPselectWeightedDownIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtr(int *intarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntPtr(MemorySegment intarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntPtr", intarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntReal$descriptor() {
        return SCIPselectDownIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntReal$handle() {
        return SCIPselectDownIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntReal$address() {
        return SCIPselectDownIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntReal(int *intarray, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntReal(MemorySegment intarray, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectDownIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntReal", intarray, realarray, k, len);
            }
            mh$.invokeExact(intarray, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntReal$descriptor() {
        return SCIPselectWeightedDownIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntReal$handle() {
        return SCIPselectWeightedDownIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntReal$address() {
        return SCIPselectWeightedDownIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntReal(int *intarray, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntReal(MemorySegment intarray, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntReal", intarray, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntIntInt$descriptor() {
        return SCIPselectDownIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntIntInt$handle() {
        return SCIPselectDownIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntIntInt$address() {
        return SCIPselectDownIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int k, int len)
     * }
     */
    public static void SCIPselectDownIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int k, int len) {
        var mh$ = SCIPselectDownIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntIntInt", intarray1, intarray2, intarray3, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntIntInt$descriptor() {
        return SCIPselectWeightedDownIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntIntInt$handle() {
        return SCIPselectWeightedDownIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntIntInt$address() {
        return SCIPselectWeightedDownIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntIntInt", intarray1, intarray2, intarray3, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntIntLong$descriptor() {
        return SCIPselectDownIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntIntLong$handle() {
        return SCIPselectDownIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntIntLong$address() {
        return SCIPselectDownIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectDownIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntIntLong", intarray1, intarray2, longarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntIntLong$descriptor() {
        return SCIPselectWeightedDownIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntIntLong$handle() {
        return SCIPselectWeightedDownIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntIntLong$address() {
        return SCIPselectWeightedDownIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntIntLong", intarray1, intarray2, longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntIntPtr$descriptor() {
        return SCIPselectDownIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntIntPtr$handle() {
        return SCIPselectDownIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntIntPtr$address() {
        return SCIPselectDownIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntIntPtr", intarray1, intarray2, ptrarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntIntPtr$descriptor() {
        return SCIPselectWeightedDownIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntIntPtr$handle() {
        return SCIPselectWeightedDownIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntIntPtr$address() {
        return SCIPselectWeightedDownIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntIntPtr", intarray1, intarray2, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntIntReal$descriptor() {
        return SCIPselectDownIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntIntReal$handle() {
        return SCIPselectDownIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntIntReal$address() {
        return SCIPselectDownIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectDownIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntIntReal", intarray1, intarray2, realarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntIntReal$descriptor() {
        return SCIPselectWeightedDownIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntIntReal$handle() {
        return SCIPselectWeightedDownIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntIntReal$address() {
        return SCIPselectWeightedDownIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntReal(int *intarray1, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntIntReal", intarray1, intarray2, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntIntIntPtr$descriptor() {
        return SCIPselectDownIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntIntIntPtr$handle() {
        return SCIPselectDownIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntIntIntPtr$address() {
        return SCIPselectDownIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntIntIntPtr$descriptor() {
        return SCIPselectWeightedDownIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntIntIntPtr$handle() {
        return SCIPselectWeightedDownIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntIntIntPtr$address() {
        return SCIPselectWeightedDownIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntIntIntReal$descriptor() {
        return SCIPselectDownIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntIntIntReal$handle() {
        return SCIPselectDownIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntIntIntReal$address() {
        return SCIPselectDownIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectDownIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntIntIntReal", intarray1, intarray2, intarray3, realarray, k, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntIntIntReal$descriptor() {
        return SCIPselectWeightedDownIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntIntIntReal$handle() {
        return SCIPselectWeightedDownIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntIntIntReal$address() {
        return SCIPselectWeightedDownIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntIntIntReal", intarray1, intarray2, intarray3, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntPtrIntReal$descriptor() {
        return SCIPselectDownIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntPtrIntReal$handle() {
        return SCIPselectDownIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntPtrIntReal$address() {
        return SCIPselectDownIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int k, int len)
     * }
     */
    public static void SCIPselectDownIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int k, int len) {
        var mh$ = SCIPselectDownIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, k, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntPtrIntReal$descriptor() {
        return SCIPselectWeightedDownIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntPtrIntReal$handle() {
        return SCIPselectWeightedDownIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntPtrIntReal$address() {
        return SCIPselectWeightedDownIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLong(long long *longarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLong$descriptor() {
        return SCIPselectDownLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLong(long long *longarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLong$handle() {
        return SCIPselectDownLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLong(long long *longarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLong$address() {
        return SCIPselectDownLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLong(long long *longarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLong(MemorySegment longarray, int k, int len) {
        var mh$ = SCIPselectDownLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLong", longarray, k, len);
            }
            mh$.invokeExact(longarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLong$descriptor() {
        return SCIPselectWeightedDownLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLong$handle() {
        return SCIPselectWeightedDownLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLong$address() {
        return SCIPselectWeightedDownLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLong(long long *longarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLong(MemorySegment longarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLong", longarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtr$descriptor() {
        return SCIPselectDownLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtr$handle() {
        return SCIPselectDownLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtr$address() {
        return SCIPselectDownLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtr(long long *longarray, void **ptrarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtr(MemorySegment longarray, MemorySegment ptrarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtr", longarray, ptrarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtr$descriptor() {
        return SCIPselectWeightedDownLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtr$handle() {
        return SCIPselectWeightedDownLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtr$address() {
        return SCIPselectWeightedDownLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtr(long long *longarray, void **ptrarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtr(MemorySegment longarray, MemorySegment ptrarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtr", longarray, ptrarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrInt$descriptor() {
        return SCIPselectDownLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrInt$handle() {
        return SCIPselectDownLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrInt$address() {
        return SCIPselectDownLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrInt", longarray, ptrarray, intarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrInt$descriptor() {
        return SCIPselectWeightedDownLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrInt$handle() {
        return SCIPselectWeightedDownLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrInt$address() {
        return SCIPselectWeightedDownLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrInt", longarray, ptrarray, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrRealBool$descriptor() {
        return SCIPselectDownLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrRealBool$handle() {
        return SCIPselectDownLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrRealBool$address() {
        return SCIPselectDownLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrRealBool", longarray, ptrarray, realarray, boolarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrRealBool$descriptor() {
        return SCIPselectWeightedDownLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrRealBool$handle() {
        return SCIPselectWeightedDownLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrRealBool$address() {
        return SCIPselectWeightedDownLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrRealBool", longarray, ptrarray, realarray, boolarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrRealRealBool$descriptor() {
        return SCIPselectDownLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrRealRealBool$handle() {
        return SCIPselectDownLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrRealRealBool$address() {
        return SCIPselectDownLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrRealRealBool$descriptor() {
        return SCIPselectWeightedDownLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrRealRealBool$handle() {
        return SCIPselectWeightedDownLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrRealRealBool$address() {
        return SCIPselectWeightedDownLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrRealRealIntBool$descriptor() {
        return SCIPselectDownLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrRealRealIntBool$handle() {
        return SCIPselectDownLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrRealRealIntBool$address() {
        return SCIPselectDownLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrRealRealIntBool$descriptor() {
        return SCIPselectWeightedDownLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrRealRealIntBool$handle() {
        return SCIPselectWeightedDownLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrRealRealIntBool$address() {
        return SCIPselectWeightedDownLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrPtrInt$descriptor() {
        return SCIPselectDownLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrPtrInt$handle() {
        return SCIPselectDownLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrPtrInt$address() {
        return SCIPselectDownLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrPtrInt$descriptor() {
        return SCIPselectWeightedDownLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrPtrInt$handle() {
        return SCIPselectWeightedDownLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrPtrInt$address() {
        return SCIPselectWeightedDownLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrPtrIntInt$descriptor() {
        return SCIPselectDownLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrPtrIntInt$handle() {
        return SCIPselectDownLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrPtrIntInt$address() {
        return SCIPselectDownLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int k, int len) {
        var mh$ = SCIPselectDownLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrPtrIntInt$descriptor() {
        return SCIPselectWeightedDownLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrPtrIntInt$handle() {
        return SCIPselectWeightedDownLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrPtrIntInt$address() {
        return SCIPselectWeightedDownLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownLongPtrPtrBoolInt$descriptor() {
        return SCIPselectDownLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownLongPtrPtrBoolInt$handle() {
        return SCIPselectDownLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownLongPtrPtrBoolInt$address() {
        return SCIPselectDownLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int k, int len)
     * }
     */
    public static void SCIPselectDownLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, int k, int len) {
        var mh$ = SCIPselectDownLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, k, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownLongPtrPtrBoolInt$descriptor() {
        return SCIPselectWeightedDownLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownLongPtrPtrBoolInt$handle() {
        return SCIPselectWeightedDownLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownLongPtrPtrBoolInt$address() {
        return SCIPselectWeightedDownLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownPtrIntIntBoolBool$descriptor() {
        return SCIPselectDownPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownPtrIntIntBoolBool$handle() {
        return SCIPselectDownPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownPtrIntIntBoolBool$address() {
        return SCIPselectDownPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int k, int len)
     * }
     */
    public static void SCIPselectDownPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int k, int len) {
        var mh$ = SCIPselectDownPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, k, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownPtrIntIntBoolBool$descriptor() {
        return SCIPselectWeightedDownPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownPtrIntIntBoolBool$handle() {
        return SCIPselectWeightedDownPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownPtrIntIntBoolBool$address() {
        return SCIPselectWeightedDownPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectDownIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectDownIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static FunctionDescriptor SCIPselectDownIntPtrIntIntBoolBool$descriptor() {
        return SCIPselectDownIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static MethodHandle SCIPselectDownIntPtrIntIntBoolBool$handle() {
        return SCIPselectDownIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static MemorySegment SCIPselectDownIntPtrIntIntBoolBool$address() {
        return SCIPselectDownIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int k, int len)
     * }
     */
    public static void SCIPselectDownIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int k, int len) {
        var mh$ = SCIPselectDownIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectDownIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, k, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, k, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPselectWeightedDownIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPselectWeightedDownIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static FunctionDescriptor SCIPselectWeightedDownIntPtrIntIntBoolBool$descriptor() {
        return SCIPselectWeightedDownIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MethodHandle SCIPselectWeightedDownIntPtrIntIntBoolBool$handle() {
        return SCIPselectWeightedDownIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static MemorySegment SCIPselectWeightedDownIntPtrIntIntBoolBool$address() {
        return SCIPselectWeightedDownIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPselectWeightedDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, double *weights, double capacity, int len, int *medianpos)
     * }
     */
    public static void SCIPselectWeightedDownIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment weights, double capacity, int len, MemorySegment medianpos) {
        var mh$ = SCIPselectWeightedDownIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPselectWeightedDownIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, weights, capacity, len, medianpos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, weights, capacity, len, medianpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortCompInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortCompInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPsortCompInt(void *elem1, void *elem2)
     * }
     */
    public static FunctionDescriptor SCIPsortCompInt$descriptor() {
        return SCIPsortCompInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPsortCompInt(void *elem1, void *elem2)
     * }
     */
    public static MethodHandle SCIPsortCompInt$handle() {
        return SCIPsortCompInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPsortCompInt(void *elem1, void *elem2)
     * }
     */
    public static MemorySegment SCIPsortCompInt$address() {
        return SCIPsortCompInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPsortCompInt(void *elem1, void *elem2)
     * }
     */
    public static int SCIPsortCompInt(MemorySegment elem1, MemorySegment elem2) {
        var mh$ = SCIPsortCompInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortCompInt", elem1, elem2);
            }
            return (int)mh$.invokeExact(elem1, elem2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortArgsortInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortArgsortInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPsortArgsortInt(void *dataptr, int ind1, int ind2)
     * }
     */
    public static FunctionDescriptor SCIPsortArgsortInt$descriptor() {
        return SCIPsortArgsortInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPsortArgsortInt(void *dataptr, int ind1, int ind2)
     * }
     */
    public static MethodHandle SCIPsortArgsortInt$handle() {
        return SCIPsortArgsortInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPsortArgsortInt(void *dataptr, int ind1, int ind2)
     * }
     */
    public static MemorySegment SCIPsortArgsortInt$address() {
        return SCIPsortArgsortInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPsortArgsortInt(void *dataptr, int ind1, int ind2)
     * }
     */
    public static int SCIPsortArgsortInt(MemorySegment dataptr, int ind1, int ind2) {
        var mh$ = SCIPsortArgsortInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortArgsortInt", dataptr, ind1, ind2);
            }
            return (int)mh$.invokeExact(dataptr, ind1, ind2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortArgsortPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortArgsortPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPsortArgsortPtr(void *dataptr, int ind1, int ind2)
     * }
     */
    public static FunctionDescriptor SCIPsortArgsortPtr$descriptor() {
        return SCIPsortArgsortPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPsortArgsortPtr(void *dataptr, int ind1, int ind2)
     * }
     */
    public static MethodHandle SCIPsortArgsortPtr$handle() {
        return SCIPsortArgsortPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPsortArgsortPtr(void *dataptr, int ind1, int ind2)
     * }
     */
    public static MemorySegment SCIPsortArgsortPtr$address() {
        return SCIPsortArgsortPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPsortArgsortPtr(void *dataptr, int ind1, int ind2)
     * }
     */
    public static int SCIPsortArgsortPtr(MemorySegment dataptr, int ind1, int ind2) {
        var mh$ = SCIPsortArgsortPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortArgsortPtr", dataptr, ind1, ind2);
            }
            return (int)mh$.invokeExact(dataptr, ind1, ind2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsort");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsort(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static FunctionDescriptor SCIPsort$descriptor() {
        return SCIPsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsort(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MethodHandle SCIPsort$handle() {
        return SCIPsort.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsort(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MemorySegment SCIPsort$address() {
        return SCIPsort.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsort(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static void SCIPsort(MemorySegment perm, MemorySegment indcomp, MemorySegment dataptr, int len) {
        var mh$ = SCIPsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsort", perm, indcomp, dataptr, len);
            }
            mh$.invokeExact(perm, indcomp, dataptr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortInd$descriptor() {
        return SCIPsortInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MethodHandle SCIPsortInd$handle() {
        return SCIPsortInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MemorySegment SCIPsortInd$address() {
        return SCIPsortInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static void SCIPsortInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int len) {
        var mh$ = SCIPsortInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortInd", indarray, indcomp, dataptr, len);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtr$descriptor() {
        return SCIPsortPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtr$handle() {
        return SCIPsortPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtr$address() {
        return SCIPsortPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtr(MemorySegment ptrarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtr", ptrarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtr$descriptor() {
        return SCIPsortPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtr$handle() {
        return SCIPsortPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtr$address() {
        return SCIPsortPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtr", ptrarray1, ptrarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrReal$descriptor() {
        return SCIPsortPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrReal$handle() {
        return SCIPsortPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrReal$address() {
        return SCIPsortPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrReal", ptrarray, realarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrInt$descriptor() {
        return SCIPsortPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrInt$handle() {
        return SCIPsortPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrInt$address() {
        return SCIPsortPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrInt", ptrarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrBool$descriptor() {
        return SCIPsortPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrBool$handle() {
        return SCIPsortPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrBool$address() {
        return SCIPsortPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrBool", ptrarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrIntInt$descriptor() {
        return SCIPsortPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrIntInt$handle() {
        return SCIPsortPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrIntInt$address() {
        return SCIPsortPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealInt$descriptor() {
        return SCIPsortPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealInt$handle() {
        return SCIPsortPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealInt$address() {
        return SCIPsortPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealInt", ptrarray, realarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealRealInt$descriptor() {
        return SCIPsortPtrRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealRealInt$handle() {
        return SCIPsortPtrRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealRealInt$address() {
        return SCIPsortPtrRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealRealInt(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealRealInt", ptrarray, realarray1, realarray2, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealRealBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealRealBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealRealBoolBool$descriptor() {
        return SCIPsortPtrRealRealBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealRealBoolBool$handle() {
        return SCIPsortPtrRealRealBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealRealBoolBool$address() {
        return SCIPsortPtrRealRealBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealRealBoolBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealRealBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealRealBoolBool", ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealRealIntBool$descriptor() {
        return SCIPsortPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealRealIntBool$handle() {
        return SCIPsortPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealRealIntBool$address() {
        return SCIPsortPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealRealIntBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealRealIntBool", ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealBool$descriptor() {
        return SCIPsortPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealBool$handle() {
        return SCIPsortPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealBool$address() {
        return SCIPsortPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealReal$descriptor() {
        return SCIPsortPtrRealReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealReal$handle() {
        return SCIPsortPtrRealReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealReal$address() {
        return SCIPsortPtrRealReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealReal(void **ptrarray, double *realarray1, double *realarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealReal(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealReal", ptrarray, realarray1, realarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrInt$descriptor() {
        return SCIPsortPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrInt$handle() {
        return SCIPsortPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrInt$address() {
        return SCIPsortPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrReal$descriptor() {
        return SCIPsortPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrReal$handle() {
        return SCIPsortPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrReal$address() {
        return SCIPsortPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrIntInt$descriptor() {
        return SCIPsortPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrIntInt$handle() {
        return SCIPsortPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrIntInt$address() {
        return SCIPsortPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrRealIntInt$descriptor() {
        return SCIPsortPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrRealIntInt$handle() {
        return SCIPsortPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrRealIntInt$address() {
        return SCIPsortPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrRealInt$descriptor() {
        return SCIPsortPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrRealInt$handle() {
        return SCIPsortPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrRealInt$address() {
        return SCIPsortPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrRealBool$descriptor() {
        return SCIPsortPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrRealBool$handle() {
        return SCIPsortPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrRealBool$address() {
        return SCIPsortPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrLongInt$descriptor() {
        return SCIPsortPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrLongInt$handle() {
        return SCIPsortPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrLongInt$address() {
        return SCIPsortPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrPtrLongIntInt$descriptor() {
        return SCIPsortPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrPtrLongIntInt$handle() {
        return SCIPsortPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrPtrLongIntInt$address() {
        return SCIPsortPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortReal(double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortReal$descriptor() {
        return SCIPsortReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortReal(double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortReal$handle() {
        return SCIPsortReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortReal(double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortReal$address() {
        return SCIPsortReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortReal(double *realarray, int len)
     * }
     */
    public static void SCIPsortReal(MemorySegment realarray, int len) {
        var mh$ = SCIPsortReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortReal", realarray, len);
            }
            mh$.invokeExact(realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealPtr$descriptor() {
        return SCIPsortRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealPtr$handle() {
        return SCIPsortRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealPtr$address() {
        return SCIPsortRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealPtr(MemorySegment realarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealPtr", realarray, ptrarray, len);
            }
            mh$.invokeExact(realarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealInt$descriptor() {
        return SCIPsortRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealInt$handle() {
        return SCIPsortRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealInt$address() {
        return SCIPsortRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static void SCIPsortRealInt(MemorySegment realarray, MemorySegment intarray, int len) {
        var mh$ = SCIPsortRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealInt", realarray, intarray, len);
            }
            mh$.invokeExact(realarray, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealIntInt$descriptor() {
        return SCIPsortRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortRealIntInt$handle() {
        return SCIPsortRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortRealIntInt$address() {
        return SCIPsortRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealIntInt", realarray, intarray1, intarray2, len);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealBoolPtr$descriptor() {
        return SCIPsortRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealBoolPtr$handle() {
        return SCIPsortRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealBoolPtr$address() {
        return SCIPsortRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealBoolPtr", realarray, boolarray, ptrarray, len);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealIntLong$descriptor() {
        return SCIPsortRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealIntLong$handle() {
        return SCIPsortRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealIntLong$address() {
        return SCIPsortRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static void SCIPsortRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, int len) {
        var mh$ = SCIPsortRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealIntLong", realarray, intarray, longarray, len);
            }
            mh$.invokeExact(realarray, intarray, longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealIntPtr$descriptor() {
        return SCIPsortRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealIntPtr$handle() {
        return SCIPsortRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealIntPtr$address() {
        return SCIPsortRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealIntPtr", realarray, intarray, ptrarray, len);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealRealPtr$descriptor() {
        return SCIPsortRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealRealPtr$handle() {
        return SCIPsortRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealRealPtr$address() {
        return SCIPsortRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealRealPtr", realarray1, realarray2, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealPtrPtrInt$descriptor() {
        return SCIPsortRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealPtrPtrInt$handle() {
        return SCIPsortRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealPtrPtrInt$address() {
        return SCIPsortRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static void SCIPsortRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int len) {
        var mh$ = SCIPsortRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealPtrPtrIntInt$descriptor() {
        return SCIPsortRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortRealPtrPtrIntInt$handle() {
        return SCIPsortRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortRealPtrPtrIntInt$address() {
        return SCIPsortRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealLongRealInt$descriptor() {
        return SCIPsortRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealLongRealInt$handle() {
        return SCIPsortRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealLongRealInt$address() {
        return SCIPsortRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static void SCIPsortRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, int len) {
        var mh$ = SCIPsortRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealLongRealInt", realarray1, longarray, realarray3, intarray, len);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealRealIntInt$descriptor() {
        return SCIPsortRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortRealRealIntInt$handle() {
        return SCIPsortRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortRealRealIntInt$address() {
        return SCIPsortRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealRealIntInt", realarray1, realarray2, intarray1, intarray2, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealRealRealInt$descriptor() {
        return SCIPsortRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealRealRealInt$handle() {
        return SCIPsortRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealRealRealInt$address() {
        return SCIPsortRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static void SCIPsortRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, int len) {
        var mh$ = SCIPsortRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealRealRealInt", realarray1, realarray2, realarray3, intarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealRealRealPtr$descriptor() {
        return SCIPsortRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealRealRealPtr$handle() {
        return SCIPsortRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealRealRealPtr$address() {
        return SCIPsortRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealRealRealBoolPtr$descriptor() {
        return SCIPsortRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealRealRealBoolPtr$handle() {
        return SCIPsortRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealRealRealBoolPtr$address() {
        return SCIPsortRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortRealRealRealBoolBoolPtr$descriptor() {
        return SCIPsortRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortRealRealRealBoolBoolPtr$handle() {
        return SCIPsortRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortRealRealRealBoolBoolPtr$address() {
        return SCIPsortRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortInt(int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortInt$descriptor() {
        return SCIPsortInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortInt(int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortInt$handle() {
        return SCIPsortInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortInt(int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortInt$address() {
        return SCIPsortInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortInt(int *intarray, int len)
     * }
     */
    public static void SCIPsortInt(MemorySegment intarray, int len) {
        var mh$ = SCIPsortInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortInt", intarray, len);
            }
            mh$.invokeExact(intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntInt$descriptor() {
        return SCIPsortIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortIntInt$handle() {
        return SCIPsortIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortIntInt$address() {
        return SCIPsortIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortIntInt(MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntInt", intarray1, intarray2, len);
            }
            mh$.invokeExact(intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntPtr$descriptor() {
        return SCIPsortIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntPtr$handle() {
        return SCIPsortIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntPtr$address() {
        return SCIPsortIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortIntPtr(MemorySegment intarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntPtr", intarray, ptrarray, len);
            }
            mh$.invokeExact(intarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntReal$descriptor() {
        return SCIPsortIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntReal$handle() {
        return SCIPsortIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntReal$address() {
        return SCIPsortIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static void SCIPsortIntReal(MemorySegment intarray, MemorySegment realarray, int len) {
        var mh$ = SCIPsortIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntReal", intarray, realarray, len);
            }
            mh$.invokeExact(intarray, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntIntInt$descriptor() {
        return SCIPsortIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static MethodHandle SCIPsortIntIntInt$handle() {
        return SCIPsortIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static MemorySegment SCIPsortIntIntInt$address() {
        return SCIPsortIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static void SCIPsortIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int len) {
        var mh$ = SCIPsortIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntIntInt", intarray1, intarray2, intarray3, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntIntLong$descriptor() {
        return SCIPsortIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntIntLong$handle() {
        return SCIPsortIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntIntLong$address() {
        return SCIPsortIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static void SCIPsortIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int len) {
        var mh$ = SCIPsortIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntIntLong", intarray1, intarray2, longarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntRealLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntRealLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntRealLong(int *intarray, double *realarray, long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntRealLong$descriptor() {
        return SCIPsortIntRealLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntRealLong(int *intarray, double *realarray, long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntRealLong$handle() {
        return SCIPsortIntRealLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntRealLong(int *intarray, double *realarray, long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntRealLong$address() {
        return SCIPsortIntRealLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntRealLong(int *intarray, double *realarray, long long *longarray, int len)
     * }
     */
    public static void SCIPsortIntRealLong(MemorySegment intarray, MemorySegment realarray, MemorySegment longarray, int len) {
        var mh$ = SCIPsortIntRealLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntRealLong", intarray, realarray, longarray, len);
            }
            mh$.invokeExact(intarray, realarray, longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntIntPtr$descriptor() {
        return SCIPsortIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntIntPtr$handle() {
        return SCIPsortIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntIntPtr$address() {
        return SCIPsortIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntIntPtr", intarray1, intarray2, ptrarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntIntReal$descriptor() {
        return SCIPsortIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntIntReal$handle() {
        return SCIPsortIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntIntReal$address() {
        return SCIPsortIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static void SCIPsortIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int len) {
        var mh$ = SCIPsortIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntIntReal", intarray1, intarray2, realarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrReal(int *intarray, void **ptrarray, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntPtrReal$descriptor() {
        return SCIPsortIntPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrReal(int *intarray, void **ptrarray, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntPtrReal$handle() {
        return SCIPsortIntPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrReal(int *intarray, void **ptrarray, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntPtrReal$address() {
        return SCIPsortIntPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntPtrReal(int *intarray, void **ptrarray, double *realarray, int len)
     * }
     */
    public static void SCIPsortIntPtrReal(MemorySegment intarray, MemorySegment ptrarray, MemorySegment realarray, int len) {
        var mh$ = SCIPsortIntPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntPtrReal", intarray, ptrarray, realarray, len);
            }
            mh$.invokeExact(intarray, ptrarray, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntIntIntPtr$descriptor() {
        return SCIPsortIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntIntIntPtr$handle() {
        return SCIPsortIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntIntIntPtr$address() {
        return SCIPsortIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntIntIntReal$descriptor() {
        return SCIPsortIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntIntIntReal$handle() {
        return SCIPsortIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntIntIntReal$address() {
        return SCIPsortIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static void SCIPsortIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int len) {
        var mh$ = SCIPsortIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntIntIntReal", intarray1, intarray2, intarray3, realarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntPtrIntReal$descriptor() {
        return SCIPsortIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortIntPtrIntReal$handle() {
        return SCIPsortIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortIntPtrIntReal$address() {
        return SCIPsortIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static void SCIPsortIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int len) {
        var mh$ = SCIPsortIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLong(long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLong$descriptor() {
        return SCIPsortLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLong(long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLong$handle() {
        return SCIPsortLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLong(long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLong$address() {
        return SCIPsortLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLong(long long *longarray, int len)
     * }
     */
    public static void SCIPsortLong(MemorySegment longarray, int len) {
        var mh$ = SCIPsortLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLong", longarray, len);
            }
            mh$.invokeExact(longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtr$descriptor() {
        return SCIPsortLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtr$handle() {
        return SCIPsortLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtr$address() {
        return SCIPsortLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortLongPtr(MemorySegment longarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtr", longarray, ptrarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrInt$descriptor() {
        return SCIPsortLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrInt$handle() {
        return SCIPsortLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrInt$address() {
        return SCIPsortLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static void SCIPsortLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, int len) {
        var mh$ = SCIPsortLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrInt", longarray, ptrarray, intarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrRealBool$descriptor() {
        return SCIPsortLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrRealBool$handle() {
        return SCIPsortLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrRealBool$address() {
        return SCIPsortLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static void SCIPsortLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, int len) {
        var mh$ = SCIPsortLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrRealBool", longarray, ptrarray, realarray, boolarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrRealRealBool$descriptor() {
        return SCIPsortLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrRealRealBool$handle() {
        return SCIPsortLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrRealRealBool$address() {
        return SCIPsortLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static void SCIPsortLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, int len) {
        var mh$ = SCIPsortLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrRealRealIntBool$descriptor() {
        return SCIPsortLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrRealRealIntBool$handle() {
        return SCIPsortLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrRealRealIntBool$address() {
        return SCIPsortLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static void SCIPsortLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, int len) {
        var mh$ = SCIPsortLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrPtrInt$descriptor() {
        return SCIPsortLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrPtrInt$handle() {
        return SCIPsortLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrPtrInt$address() {
        return SCIPsortLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static void SCIPsortLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int len) {
        var mh$ = SCIPsortLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrPtrIntInt$descriptor() {
        return SCIPsortLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrPtrIntInt$handle() {
        return SCIPsortLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrPtrIntInt$address() {
        return SCIPsortLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortLongPtrPtrBoolInt$descriptor() {
        return SCIPsortLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortLongPtrPtrBoolInt$handle() {
        return SCIPsortLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortLongPtrPtrBoolInt$address() {
        return SCIPsortLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static void SCIPsortLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, int len) {
        var mh$ = SCIPsortLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortPtrIntIntBoolBool$descriptor() {
        return SCIPsortPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortPtrIntIntBoolBool$handle() {
        return SCIPsortPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortPtrIntIntBoolBool$address() {
        return SCIPsortPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortIntPtrIntIntBoolBool$descriptor() {
        return SCIPsortIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortIntPtrIntIntBoolBool$handle() {
        return SCIPsortIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortIntPtrIntIntBoolBool$address() {
        return SCIPsortIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static void SCIPsortIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int len) {
        var mh$ = SCIPsortIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDown {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDown");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDown(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDown$descriptor() {
        return SCIPsortDown.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDown(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MethodHandle SCIPsortDown$handle() {
        return SCIPsortDown.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDown(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MemorySegment SCIPsortDown$address() {
        return SCIPsortDown.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDown(int *perm, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static void SCIPsortDown(MemorySegment perm, MemorySegment indcomp, MemorySegment dataptr, int len) {
        var mh$ = SCIPsortDown.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDown", perm, indcomp, dataptr, len);
            }
            mh$.invokeExact(perm, indcomp, dataptr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownInd$descriptor() {
        return SCIPsortDownInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MethodHandle SCIPsortDownInd$handle() {
        return SCIPsortDownInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static MemorySegment SCIPsortDownInd$address() {
        return SCIPsortDownInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int len)
     * }
     */
    public static void SCIPsortDownInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int len) {
        var mh$ = SCIPsortDownInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownInd", indarray, indcomp, dataptr, len);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtr$descriptor() {
        return SCIPsortDownPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtr$handle() {
        return SCIPsortDownPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtr$address() {
        return SCIPsortDownPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtr(MemorySegment ptrarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtr", ptrarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtr$descriptor() {
        return SCIPsortDownPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtr$handle() {
        return SCIPsortDownPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtr$address() {
        return SCIPsortDownPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtr", ptrarray1, ptrarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrReal$descriptor() {
        return SCIPsortDownPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrReal$handle() {
        return SCIPsortDownPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrReal$address() {
        return SCIPsortDownPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrReal", ptrarray, realarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrInt$descriptor() {
        return SCIPsortDownPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrInt$handle() {
        return SCIPsortDownPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrInt$address() {
        return SCIPsortDownPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrInt", ptrarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrBool$descriptor() {
        return SCIPsortDownPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrBool$handle() {
        return SCIPsortDownPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrBool$address() {
        return SCIPsortDownPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrBool", ptrarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrIntInt$descriptor() {
        return SCIPsortDownPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrIntInt$handle() {
        return SCIPsortDownPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrIntInt$address() {
        return SCIPsortDownPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrRealInt$descriptor() {
        return SCIPsortDownPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrRealInt$handle() {
        return SCIPsortDownPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrRealInt$address() {
        return SCIPsortDownPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrRealInt", ptrarray, realarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrRealBool$descriptor() {
        return SCIPsortDownPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrRealBool$handle() {
        return SCIPsortDownPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrRealBool$address() {
        return SCIPsortDownPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrInt$descriptor() {
        return SCIPsortDownPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrInt$handle() {
        return SCIPsortDownPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrInt$address() {
        return SCIPsortDownPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrReal$descriptor() {
        return SCIPsortDownPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrReal$handle() {
        return SCIPsortDownPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrReal$address() {
        return SCIPsortDownPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrIntInt$descriptor() {
        return SCIPsortDownPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrIntInt$handle() {
        return SCIPsortDownPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrIntInt$address() {
        return SCIPsortDownPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrRealIntInt$descriptor() {
        return SCIPsortDownPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrRealIntInt$handle() {
        return SCIPsortDownPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrRealIntInt$address() {
        return SCIPsortDownPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrRealInt$descriptor() {
        return SCIPsortDownPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrRealInt$handle() {
        return SCIPsortDownPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrRealInt$address() {
        return SCIPsortDownPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrRealBool$descriptor() {
        return SCIPsortDownPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrRealBool$handle() {
        return SCIPsortDownPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrRealBool$address() {
        return SCIPsortDownPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrLongInt$descriptor() {
        return SCIPsortDownPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrLongInt$handle() {
        return SCIPsortDownPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrLongInt$address() {
        return SCIPsortDownPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrPtrLongIntInt$descriptor() {
        return SCIPsortDownPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrPtrLongIntInt$handle() {
        return SCIPsortDownPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrPtrLongIntInt$address() {
        return SCIPsortDownPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownReal(double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownReal$descriptor() {
        return SCIPsortDownReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownReal(double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownReal$handle() {
        return SCIPsortDownReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownReal(double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownReal$address() {
        return SCIPsortDownReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownReal(double *realarray, int len)
     * }
     */
    public static void SCIPsortDownReal(MemorySegment realarray, int len) {
        var mh$ = SCIPsortDownReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownReal", realarray, len);
            }
            mh$.invokeExact(realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealPtr$descriptor() {
        return SCIPsortDownRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealPtr$handle() {
        return SCIPsortDownRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealPtr$address() {
        return SCIPsortDownRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealPtr(double *realarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealPtr(MemorySegment realarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealPtr", realarray, ptrarray, len);
            }
            mh$.invokeExact(realarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealInt$descriptor() {
        return SCIPsortDownRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealInt$handle() {
        return SCIPsortDownRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealInt$address() {
        return SCIPsortDownRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealInt(double *realarray, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownRealInt(MemorySegment realarray, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealInt", realarray, intarray, len);
            }
            mh$.invokeExact(realarray, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealIntInt$descriptor() {
        return SCIPsortDownRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealIntInt$handle() {
        return SCIPsortDownRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealIntInt$address() {
        return SCIPsortDownRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortDownRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortDownRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealIntInt", realarray, intarray1, intarray2, len);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealBoolPtr$descriptor() {
        return SCIPsortDownRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealBoolPtr$handle() {
        return SCIPsortDownRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealBoolPtr$address() {
        return SCIPsortDownRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealBoolPtr", realarray, boolarray, ptrarray, len);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealIntLong$descriptor() {
        return SCIPsortDownRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealIntLong$handle() {
        return SCIPsortDownRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealIntLong$address() {
        return SCIPsortDownRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealIntLong(double *realarray, int *intarray, long long *longarray, int len)
     * }
     */
    public static void SCIPsortDownRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, int len) {
        var mh$ = SCIPsortDownRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealIntLong", realarray, intarray, longarray, len);
            }
            mh$.invokeExact(realarray, intarray, longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealIntPtr$descriptor() {
        return SCIPsortDownRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealIntPtr$handle() {
        return SCIPsortDownRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealIntPtr$address() {
        return SCIPsortDownRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealIntPtr", realarray, intarray, ptrarray, len);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealInt$descriptor() {
        return SCIPsortDownRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealInt$handle() {
        return SCIPsortDownRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealInt$address() {
        return SCIPsortDownRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealInt", realarray1, realarray2, intarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealPtr$descriptor() {
        return SCIPsortDownRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealPtr$handle() {
        return SCIPsortDownRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealPtr$address() {
        return SCIPsortDownRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealPtr", realarray1, realarray2, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealPtrPtr$descriptor() {
        return SCIPsortDownRealRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealPtrPtr$handle() {
        return SCIPsortDownRealRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealPtrPtr$address() {
        return SCIPsortDownRealRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static void SCIPsortDownRealRealPtrPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray1, MemorySegment ptrarray2, int len) {
        var mh$ = SCIPsortDownRealRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealPtrPtr", realarray1, realarray2, ptrarray1, ptrarray2, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray1, ptrarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealPtrPtrInt$descriptor() {
        return SCIPsortDownRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealPtrPtrInt$handle() {
        return SCIPsortDownRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealPtrPtrInt$address() {
        return SCIPsortDownRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealPtrPtrIntInt$descriptor() {
        return SCIPsortDownRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealPtrPtrIntInt$handle() {
        return SCIPsortDownRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealPtrPtrIntInt$address() {
        return SCIPsortDownRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortDownRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortDownRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealLongRealInt$descriptor() {
        return SCIPsortDownRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealLongRealInt$handle() {
        return SCIPsortDownRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealLongRealInt$address() {
        return SCIPsortDownRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealLongRealInt", realarray1, longarray, realarray3, intarray, len);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealIntInt$descriptor() {
        return SCIPsortDownRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealIntInt$handle() {
        return SCIPsortDownRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealIntInt$address() {
        return SCIPsortDownRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortDownRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortDownRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealIntInt", realarray1, realarray2, intarray1, intarray2, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealRealInt$descriptor() {
        return SCIPsortDownRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealRealInt$handle() {
        return SCIPsortDownRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealRealInt$address() {
        return SCIPsortDownRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealRealInt", realarray1, realarray2, realarray3, intarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealRealPtr$descriptor() {
        return SCIPsortDownRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealRealPtr$handle() {
        return SCIPsortDownRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealRealPtr$address() {
        return SCIPsortDownRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealPtrPtr$descriptor() {
        return SCIPsortDownRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealPtrPtr$handle() {
        return SCIPsortDownRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealPtrPtr$address() {
        return SCIPsortDownRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int len)
     * }
     */
    public static void SCIPsortDownRealPtrPtr(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, int len) {
        var mh$ = SCIPsortDownRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealPtrPtr", realarray, ptrarray1, ptrarray2, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealRealBoolPtr$descriptor() {
        return SCIPsortDownRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealRealBoolPtr$handle() {
        return SCIPsortDownRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealRealBoolPtr$address() {
        return SCIPsortDownRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownRealRealRealBoolBoolPtr$descriptor() {
        return SCIPsortDownRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownRealRealRealBoolBoolPtr$handle() {
        return SCIPsortDownRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownRealRealRealBoolBoolPtr$address() {
        return SCIPsortDownRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownInt(int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownInt$descriptor() {
        return SCIPsortDownInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownInt(int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownInt$handle() {
        return SCIPsortDownInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownInt(int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownInt$address() {
        return SCIPsortDownInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownInt(int *intarray, int len)
     * }
     */
    public static void SCIPsortDownInt(MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownInt", intarray, len);
            }
            mh$.invokeExact(intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntInt$descriptor() {
        return SCIPsortDownIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntInt$handle() {
        return SCIPsortDownIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntInt$address() {
        return SCIPsortDownIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntInt(int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortDownIntInt(MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortDownIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntInt", intarray1, intarray2, len);
            }
            mh$.invokeExact(intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntPtr$descriptor() {
        return SCIPsortDownIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntPtr$handle() {
        return SCIPsortDownIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntPtr$address() {
        return SCIPsortDownIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntPtr(int *intarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownIntPtr(MemorySegment intarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntPtr", intarray, ptrarray, len);
            }
            mh$.invokeExact(intarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntReal$descriptor() {
        return SCIPsortDownIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntReal$handle() {
        return SCIPsortDownIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntReal$address() {
        return SCIPsortDownIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntReal(int *intarray, double *realarray, int len)
     * }
     */
    public static void SCIPsortDownIntReal(MemorySegment intarray, MemorySegment realarray, int len) {
        var mh$ = SCIPsortDownIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntReal", intarray, realarray, len);
            }
            mh$.invokeExact(intarray, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntIntInt$descriptor() {
        return SCIPsortDownIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntIntInt$handle() {
        return SCIPsortDownIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntIntInt$address() {
        return SCIPsortDownIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int len)
     * }
     */
    public static void SCIPsortDownIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int len) {
        var mh$ = SCIPsortDownIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntIntInt", intarray1, intarray2, intarray3, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntIntLong$descriptor() {
        return SCIPsortDownIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntIntLong$handle() {
        return SCIPsortDownIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntIntLong$address() {
        return SCIPsortDownIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int len)
     * }
     */
    public static void SCIPsortDownIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int len) {
        var mh$ = SCIPsortDownIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntIntLong", intarray1, intarray2, longarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntIntPtr$descriptor() {
        return SCIPsortDownIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntIntPtr$handle() {
        return SCIPsortDownIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntIntPtr$address() {
        return SCIPsortDownIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntIntPtr", intarray1, intarray2, ptrarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntIntReal$descriptor() {
        return SCIPsortDownIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntIntReal$handle() {
        return SCIPsortDownIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntIntReal$address() {
        return SCIPsortDownIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int len)
     * }
     */
    public static void SCIPsortDownIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int len) {
        var mh$ = SCIPsortDownIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntIntReal", intarray1, intarray2, realarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntIntIntPtr$descriptor() {
        return SCIPsortDownIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntIntIntPtr$handle() {
        return SCIPsortDownIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntIntIntPtr$address() {
        return SCIPsortDownIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntIntIntReal$descriptor() {
        return SCIPsortDownIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntIntIntReal$handle() {
        return SCIPsortDownIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntIntIntReal$address() {
        return SCIPsortDownIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int len)
     * }
     */
    public static void SCIPsortDownIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int len) {
        var mh$ = SCIPsortDownIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntIntIntReal", intarray1, intarray2, intarray3, realarray, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntPtrIntReal$descriptor() {
        return SCIPsortDownIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntPtrIntReal$handle() {
        return SCIPsortDownIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntPtrIntReal$address() {
        return SCIPsortDownIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int len)
     * }
     */
    public static void SCIPsortDownIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int len) {
        var mh$ = SCIPsortDownIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLong(long long *longarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLong$descriptor() {
        return SCIPsortDownLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLong(long long *longarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLong$handle() {
        return SCIPsortDownLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLong(long long *longarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLong$address() {
        return SCIPsortDownLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLong(long long *longarray, int len)
     * }
     */
    public static void SCIPsortDownLong(MemorySegment longarray, int len) {
        var mh$ = SCIPsortDownLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLong", longarray, len);
            }
            mh$.invokeExact(longarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtr$descriptor() {
        return SCIPsortDownLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtr$handle() {
        return SCIPsortDownLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtr$address() {
        return SCIPsortDownLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtr(long long *longarray, void **ptrarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtr(MemorySegment longarray, MemorySegment ptrarray, int len) {
        var mh$ = SCIPsortDownLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtr", longarray, ptrarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrInt$descriptor() {
        return SCIPsortDownLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrInt$handle() {
        return SCIPsortDownLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrInt$address() {
        return SCIPsortDownLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrInt", longarray, ptrarray, intarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrRealBool$descriptor() {
        return SCIPsortDownLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrRealBool$handle() {
        return SCIPsortDownLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrRealBool$address() {
        return SCIPsortDownLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, int len) {
        var mh$ = SCIPsortDownLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrRealBool", longarray, ptrarray, realarray, boolarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrRealRealBool$descriptor() {
        return SCIPsortDownLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrRealRealBool$handle() {
        return SCIPsortDownLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrRealRealBool$address() {
        return SCIPsortDownLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, int len) {
        var mh$ = SCIPsortDownLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrRealRealIntBool$descriptor() {
        return SCIPsortDownLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrRealRealIntBool$handle() {
        return SCIPsortDownLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrRealRealIntBool$address() {
        return SCIPsortDownLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, int len) {
        var mh$ = SCIPsortDownLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrPtrInt$descriptor() {
        return SCIPsortDownLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrPtrInt$handle() {
        return SCIPsortDownLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrPtrInt$address() {
        return SCIPsortDownLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrPtrIntInt$descriptor() {
        return SCIPsortDownLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrPtrIntInt$handle() {
        return SCIPsortDownLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrPtrIntInt$address() {
        return SCIPsortDownLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int len)
     * }
     */
    public static void SCIPsortDownLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int len) {
        var mh$ = SCIPsortDownLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownLongPtrPtrBoolInt$descriptor() {
        return SCIPsortDownLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static MethodHandle SCIPsortDownLongPtrPtrBoolInt$handle() {
        return SCIPsortDownLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static MemorySegment SCIPsortDownLongPtrPtrBoolInt$address() {
        return SCIPsortDownLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int len)
     * }
     */
    public static void SCIPsortDownLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, int len) {
        var mh$ = SCIPsortDownLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownPtrIntIntBoolBool$descriptor() {
        return SCIPsortDownPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MethodHandle SCIPsortDownPtrIntIntBoolBool$handle() {
        return SCIPsortDownPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static MemorySegment SCIPsortDownPtrIntIntBoolBool$address() {
        return SCIPsortDownPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int len)
     * }
     */
    public static void SCIPsortDownPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int len) {
        var mh$ = SCIPsortDownPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortDownIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortDownIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static FunctionDescriptor SCIPsortDownIntPtrIntIntBoolBool$descriptor() {
        return SCIPsortDownIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static MethodHandle SCIPsortDownIntPtrIntIntBoolBool$handle() {
        return SCIPsortDownIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static MemorySegment SCIPsortDownIntPtrIntIntBoolBool$address() {
        return SCIPsortDownIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int len)
     * }
     */
    public static void SCIPsortDownIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int len) {
        var mh$ = SCIPsortDownIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortDownIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertInd$descriptor() {
        return SCIPsortedvecInsertInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertInd$handle() {
        return SCIPsortedvecInsertInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertInd$address() {
        return SCIPsortedvecInsertInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertInd", indarray, indcomp, dataptr, keyval, len, pos);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtr$descriptor() {
        return SCIPsortedvecInsertPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtr$handle() {
        return SCIPsortedvecInsertPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtr$address() {
        return SCIPsortedvecInsertPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtr(MemorySegment ptrarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtr", ptrarray, ptrcomp, keyval, len, pos);
            }
            mh$.invokeExact(ptrarray, ptrcomp, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtr$descriptor() {
        return SCIPsortedvecInsertPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtr$handle() {
        return SCIPsortedvecInsertPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtr$address() {
        return SCIPsortedvecInsertPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtr", ptrarray1, ptrarray2, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrReal$descriptor() {
        return SCIPsortedvecInsertPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrReal$handle() {
        return SCIPsortedvecInsertPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrReal$address() {
        return SCIPsortedvecInsertPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrReal", ptrarray, realarray, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrInt$descriptor() {
        return SCIPsortedvecInsertPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrInt$handle() {
        return SCIPsortedvecInsertPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrInt$address() {
        return SCIPsortedvecInsertPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrInt", ptrarray, intarray, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrBool$descriptor() {
        return SCIPsortedvecInsertPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrBool$handle() {
        return SCIPsortedvecInsertPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrBool$address() {
        return SCIPsortedvecInsertPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrBool", ptrarray, boolarray, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrIntInt$descriptor() {
        return SCIPsortedvecInsertPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrIntInt$handle() {
        return SCIPsortedvecInsertPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrIntInt$address() {
        return SCIPsortedvecInsertPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, int field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrRealInt$descriptor() {
        return SCIPsortedvecInsertPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrRealInt$handle() {
        return SCIPsortedvecInsertPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrRealInt$address() {
        return SCIPsortedvecInsertPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrRealInt", ptrarray, realarray, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrRealRealInt$descriptor() {
        return SCIPsortedvecInsertPtrRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrRealRealInt$handle() {
        return SCIPsortedvecInsertPtrRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrRealRealInt$address() {
        return SCIPsortedvecInsertPtrRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrRealRealInt(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrRealRealInt", ptrarray, realarray1, realarray2, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrRealRealBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrRealRealBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrRealRealBoolBool$descriptor() {
        return SCIPsortedvecInsertPtrRealRealBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrRealRealBoolBool$handle() {
        return SCIPsortedvecInsertPtrRealRealBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrRealRealBoolBool$address() {
        return SCIPsortedvecInsertPtrRealRealBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrRealRealBoolBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, MemorySegment keyval, double field1val, double field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrRealRealBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrRealRealBoolBool", ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrRealRealIntBool$descriptor() {
        return SCIPsortedvecInsertPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrRealRealIntBool$handle() {
        return SCIPsortedvecInsertPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrRealRealIntBool$address() {
        return SCIPsortedvecInsertPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, double field2val, int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrRealRealIntBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, double field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrRealRealIntBool", ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrRealBool$descriptor() {
        return SCIPsortedvecInsertPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrRealBool$handle() {
        return SCIPsortedvecInsertPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrRealBool$address() {
        return SCIPsortedvecInsertPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrInt$descriptor() {
        return SCIPsortedvecInsertPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrInt$handle() {
        return SCIPsortedvecInsertPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrInt$address() {
        return SCIPsortedvecInsertPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrReal$descriptor() {
        return SCIPsortedvecInsertPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrReal$handle() {
        return SCIPsortedvecInsertPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrReal$address() {
        return SCIPsortedvecInsertPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, double field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrIntInt$descriptor() {
        return SCIPsortedvecInsertPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrIntInt$handle() {
        return SCIPsortedvecInsertPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrIntInt$address() {
        return SCIPsortedvecInsertPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrRealIntInt$descriptor() {
        return SCIPsortedvecInsertPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrRealIntInt$handle() {
        return SCIPsortedvecInsertPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrRealIntInt$address() {
        return SCIPsortedvecInsertPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, double field1val, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrRealInt$descriptor() {
        return SCIPsortedvecInsertPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrRealInt$handle() {
        return SCIPsortedvecInsertPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrRealInt$address() {
        return SCIPsortedvecInsertPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrRealBool$descriptor() {
        return SCIPsortedvecInsertPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrRealBool$handle() {
        return SCIPsortedvecInsertPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrRealBool$address() {
        return SCIPsortedvecInsertPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrLongInt$descriptor() {
        return SCIPsortedvecInsertPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrLongInt$handle() {
        return SCIPsortedvecInsertPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrLongInt$address() {
        return SCIPsortedvecInsertPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, long field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrPtrLongIntInt$descriptor() {
        return SCIPsortedvecInsertPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrPtrLongIntInt$handle() {
        return SCIPsortedvecInsertPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrPtrLongIntInt$address() {
        return SCIPsortedvecInsertPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, long field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealIntInt$descriptor() {
        return SCIPsortedvecInsertRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealIntInt$handle() {
        return SCIPsortedvecInsertRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealIntInt$address() {
        return SCIPsortedvecInsertRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, double keyval, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealIntInt", realarray, intarray1, intarray2, keyval, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, keyval, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealBoolPtr$descriptor() {
        return SCIPsortedvecInsertRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealBoolPtr$handle() {
        return SCIPsortedvecInsertRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealBoolPtr$address() {
        return SCIPsortedvecInsertRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, double keyval, int field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealBoolPtr", realarray, boolarray, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealPtr$descriptor() {
        return SCIPsortedvecInsertRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealPtr$handle() {
        return SCIPsortedvecInsertRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealPtr$address() {
        return SCIPsortedvecInsertRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealPtr(MemorySegment realarray, MemorySegment ptrarray, double keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealPtr", realarray, ptrarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertReal$descriptor() {
        return SCIPsortedvecInsertReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertReal$handle() {
        return SCIPsortedvecInsertReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertReal$address() {
        return SCIPsortedvecInsertReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertReal(MemorySegment realarray, double keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertReal", realarray, keyval, len, pos);
            }
            mh$.invokeExact(realarray, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealInt$descriptor() {
        return SCIPsortedvecInsertRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealInt$handle() {
        return SCIPsortedvecInsertRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealInt$address() {
        return SCIPsortedvecInsertRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealInt(MemorySegment realarray, MemorySegment intarray, double keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealInt", realarray, intarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(realarray, intarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealIntLong$descriptor() {
        return SCIPsortedvecInsertRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealIntLong$handle() {
        return SCIPsortedvecInsertRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealIntLong$address() {
        return SCIPsortedvecInsertRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, double keyval, int field1val, long field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealIntLong", realarray, intarray, longarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, intarray, longarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealIntPtr$descriptor() {
        return SCIPsortedvecInsertRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealIntPtr$handle() {
        return SCIPsortedvecInsertRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealIntPtr$address() {
        return SCIPsortedvecInsertRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, double keyval, int field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealIntPtr", realarray, intarray, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealRealPtr$descriptor() {
        return SCIPsortedvecInsertRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealRealPtr$handle() {
        return SCIPsortedvecInsertRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealRealPtr$address() {
        return SCIPsortedvecInsertRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, double keyval, double field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealRealPtr", realarray1, realarray2, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealPtrPtrInt$descriptor() {
        return SCIPsortedvecInsertRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealPtrPtrInt$handle() {
        return SCIPsortedvecInsertRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealPtrPtrInt$address() {
        return SCIPsortedvecInsertRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, double keyval, MemorySegment field1val, MemorySegment field2val, int intval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, intval, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, intval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealPtrPtrIntInt$descriptor() {
        return SCIPsortedvecInsertRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealPtrPtrIntInt$handle() {
        return SCIPsortedvecInsertRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealPtrPtrIntInt$address() {
        return SCIPsortedvecInsertRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, double keyval, MemorySegment field1val, MemorySegment field2val, int intval1, int intval2, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, intval1, intval2, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, intval1, intval2, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_LONG_LONG,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealLongRealInt$descriptor() {
        return SCIPsortedvecInsertRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealLongRealInt$handle() {
        return SCIPsortedvecInsertRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealLongRealInt$address() {
        return SCIPsortedvecInsertRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, double keyval, long field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealLongRealInt", realarray1, longarray, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealRealIntInt$descriptor() {
        return SCIPsortedvecInsertRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealRealIntInt$handle() {
        return SCIPsortedvecInsertRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealRealIntInt$address() {
        return SCIPsortedvecInsertRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, double keyval, double field1val, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealRealIntInt", realarray1, realarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealRealRealInt$descriptor() {
        return SCIPsortedvecInsertRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealRealRealInt$handle() {
        return SCIPsortedvecInsertRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealRealRealInt$address() {
        return SCIPsortedvecInsertRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, double keyval, double field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealRealRealInt", realarray1, realarray2, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealRealRealPtr$descriptor() {
        return SCIPsortedvecInsertRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealRealRealPtr$handle() {
        return SCIPsortedvecInsertRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealRealRealPtr$address() {
        return SCIPsortedvecInsertRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, double keyval, double field1val, double field2val, MemorySegment field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealRealRealBoolPtr$descriptor() {
        return SCIPsortedvecInsertRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealRealRealBoolPtr$handle() {
        return SCIPsortedvecInsertRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealRealRealBoolPtr$address() {
        return SCIPsortedvecInsertRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, double keyval, double field1val, double field2val, int field3val, MemorySegment field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertRealRealRealBoolBoolPtr$descriptor() {
        return SCIPsortedvecInsertRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertRealRealRealBoolBoolPtr$handle() {
        return SCIPsortedvecInsertRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertRealRealRealBoolBoolPtr$address() {
        return SCIPsortedvecInsertRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, double keyval, double field1val, double field2val, int field3val, int field4val, MemorySegment field5val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertInt$descriptor() {
        return SCIPsortedvecInsertInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertInt$handle() {
        return SCIPsortedvecInsertInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertInt$address() {
        return SCIPsortedvecInsertInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertInt(MemorySegment intarray, int keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertInt", intarray, keyval, len, pos);
            }
            mh$.invokeExact(intarray, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntInt$descriptor() {
        return SCIPsortedvecInsertIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntInt$handle() {
        return SCIPsortedvecInsertIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntInt$address() {
        return SCIPsortedvecInsertIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntInt(MemorySegment intarray1, MemorySegment intarray2, int keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntInt", intarray1, intarray2, keyval, field1val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntPtr$descriptor() {
        return SCIPsortedvecInsertIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntPtr$handle() {
        return SCIPsortedvecInsertIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntPtr$address() {
        return SCIPsortedvecInsertIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntPtr(MemorySegment intarray, MemorySegment ptrarray, int keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntPtr", intarray, ptrarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(intarray, ptrarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntReal$descriptor() {
        return SCIPsortedvecInsertIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntReal$handle() {
        return SCIPsortedvecInsertIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntReal$address() {
        return SCIPsortedvecInsertIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntReal(MemorySegment intarray, MemorySegment realarray, int keyval, double field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntReal", intarray, realarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(intarray, realarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntIntInt$descriptor() {
        return SCIPsortedvecInsertIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntIntInt$handle() {
        return SCIPsortedvecInsertIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntIntInt$address() {
        return SCIPsortedvecInsertIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int keyval, int field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntIntInt", intarray1, intarray2, intarray3, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntIntLong$descriptor() {
        return SCIPsortedvecInsertIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntIntLong$handle() {
        return SCIPsortedvecInsertIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntIntLong$address() {
        return SCIPsortedvecInsertIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int keyval, int field1val, long field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntIntLong", intarray1, intarray2, longarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntRealLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntRealLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntRealLong(int *intarray, double *realarray, long long *longarray, int keyval, double field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntRealLong$descriptor() {
        return SCIPsortedvecInsertIntRealLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntRealLong(int *intarray, double *realarray, long long *longarray, int keyval, double field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntRealLong$handle() {
        return SCIPsortedvecInsertIntRealLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntRealLong(int *intarray, double *realarray, long long *longarray, int keyval, double field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntRealLong$address() {
        return SCIPsortedvecInsertIntRealLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntRealLong(int *intarray, double *realarray, long long *longarray, int keyval, double field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntRealLong(MemorySegment intarray, MemorySegment realarray, MemorySegment longarray, int keyval, double field1val, long field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntRealLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntRealLong", intarray, realarray, longarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray, realarray, longarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntIntPtr$descriptor() {
        return SCIPsortedvecInsertIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntIntPtr$handle() {
        return SCIPsortedvecInsertIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntIntPtr$address() {
        return SCIPsortedvecInsertIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int keyval, int field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntIntPtr", intarray1, intarray2, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntIntReal$descriptor() {
        return SCIPsortedvecInsertIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntIntReal$handle() {
        return SCIPsortedvecInsertIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntIntReal$address() {
        return SCIPsortedvecInsertIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int keyval, int field1val, double field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntIntReal", intarray1, intarray2, realarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrReal(int *intarray, void **ptrarray, double *realarray, int keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntPtrReal$descriptor() {
        return SCIPsortedvecInsertIntPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrReal(int *intarray, void **ptrarray, double *realarray, int keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntPtrReal$handle() {
        return SCIPsortedvecInsertIntPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrReal(int *intarray, void **ptrarray, double *realarray, int keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntPtrReal$address() {
        return SCIPsortedvecInsertIntPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrReal(int *intarray, void **ptrarray, double *realarray, int keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntPtrReal(MemorySegment intarray, MemorySegment ptrarray, MemorySegment realarray, int keyval, MemorySegment field1val, double field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntPtrReal", intarray, ptrarray, realarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray, ptrarray, realarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntIntIntPtr$descriptor() {
        return SCIPsortedvecInsertIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntIntIntPtr$handle() {
        return SCIPsortedvecInsertIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntIntIntPtr$address() {
        return SCIPsortedvecInsertIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int keyval, int field1val, int field2val, MemorySegment field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntIntIntReal$descriptor() {
        return SCIPsortedvecInsertIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntIntIntReal$handle() {
        return SCIPsortedvecInsertIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntIntIntReal$address() {
        return SCIPsortedvecInsertIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int keyval, int field1val, int field2val, double field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntIntIntReal", intarray1, intarray2, intarray3, realarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntPtrIntReal$descriptor() {
        return SCIPsortedvecInsertIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntPtrIntReal$handle() {
        return SCIPsortedvecInsertIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntPtrIntReal$address() {
        return SCIPsortedvecInsertIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int keyval, MemorySegment field1val, int field2val, double field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLong$descriptor() {
        return SCIPsortedvecInsertLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLong$handle() {
        return SCIPsortedvecInsertLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLong$address() {
        return SCIPsortedvecInsertLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLong(MemorySegment longarray, long keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLong", longarray, keyval, len, pos);
            }
            mh$.invokeExact(longarray, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtr$descriptor() {
        return SCIPsortedvecInsertLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtr$handle() {
        return SCIPsortedvecInsertLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtr$address() {
        return SCIPsortedvecInsertLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtr(MemorySegment longarray, MemorySegment ptrarray, long keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtr", longarray, ptrarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrInt$descriptor() {
        return SCIPsortedvecInsertLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrInt$handle() {
        return SCIPsortedvecInsertLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrInt$address() {
        return SCIPsortedvecInsertLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, long keyval, MemorySegment field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrInt", longarray, ptrarray, intarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrRealBool$descriptor() {
        return SCIPsortedvecInsertLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrRealBool$handle() {
        return SCIPsortedvecInsertLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrRealBool$address() {
        return SCIPsortedvecInsertLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, long keyval, MemorySegment field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrRealBool", longarray, ptrarray, realarray, boolarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrRealRealBool$descriptor() {
        return SCIPsortedvecInsertLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrRealRealBool$handle() {
        return SCIPsortedvecInsertLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrRealRealBool$address() {
        return SCIPsortedvecInsertLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, long keyval, MemorySegment field1val, double field2val, double field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrRealRealIntBool$descriptor() {
        return SCIPsortedvecInsertLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrRealRealIntBool$handle() {
        return SCIPsortedvecInsertLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrRealRealIntBool$address() {
        return SCIPsortedvecInsertLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, long keyval, MemorySegment field1val, double field2val, double field3val, int field4val, int field5val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrPtrInt$descriptor() {
        return SCIPsortedvecInsertLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrPtrInt$handle() {
        return SCIPsortedvecInsertLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrPtrInt$address() {
        return SCIPsortedvecInsertLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, long keyval, MemorySegment field1val, MemorySegment field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrPtrIntInt$descriptor() {
        return SCIPsortedvecInsertLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrPtrIntInt$handle() {
        return SCIPsortedvecInsertLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrPtrIntInt$address() {
        return SCIPsortedvecInsertLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, long keyval, MemorySegment field1val, MemorySegment field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertLongPtrPtrBoolInt$descriptor() {
        return SCIPsortedvecInsertLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertLongPtrPtrBoolInt$handle() {
        return SCIPsortedvecInsertLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertLongPtrPtrBoolInt$address() {
        return SCIPsortedvecInsertLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, long keyval, MemorySegment field1val, MemorySegment field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecInsertPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertPtrIntIntBoolBool$handle() {
        return SCIPsortedvecInsertPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertPtrIntIntBoolBool$address() {
        return SCIPsortedvecInsertPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, MemorySegment keyval, int field1val, int field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertIntPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecInsertIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertIntPtrIntIntBoolBool$handle() {
        return SCIPsortedvecInsertIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertIntPtrIntIntBoolBool$address() {
        return SCIPsortedvecInsertIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int keyval, MemorySegment field1val, int field2val, int field3val, int field4val, int field5val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownInd$descriptor() {
        return SCIPsortedvecInsertDownInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownInd$handle() {
        return SCIPsortedvecInsertDownInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownInd$address() {
        return SCIPsortedvecInsertDownInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownInd", indarray, indcomp, dataptr, keyval, len, pos);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtr$descriptor() {
        return SCIPsortedvecInsertDownPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtr$handle() {
        return SCIPsortedvecInsertDownPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtr$address() {
        return SCIPsortedvecInsertDownPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtr(MemorySegment ptrarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtr", ptrarray, ptrcomp, keyval, len, pos);
            }
            mh$.invokeExact(ptrarray, ptrcomp, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtr$descriptor() {
        return SCIPsortedvecInsertDownPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtr$handle() {
        return SCIPsortedvecInsertDownPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtr$address() {
        return SCIPsortedvecInsertDownPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtr", ptrarray1, ptrarray2, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrReal$descriptor() {
        return SCIPsortedvecInsertDownPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrReal$handle() {
        return SCIPsortedvecInsertDownPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrReal$address() {
        return SCIPsortedvecInsertDownPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrReal", ptrarray, realarray, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrInt$descriptor() {
        return SCIPsortedvecInsertDownPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrInt$handle() {
        return SCIPsortedvecInsertDownPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrInt$address() {
        return SCIPsortedvecInsertDownPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrInt", ptrarray, intarray, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrBool$descriptor() {
        return SCIPsortedvecInsertDownPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrBool$handle() {
        return SCIPsortedvecInsertDownPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrBool$address() {
        return SCIPsortedvecInsertDownPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, unsigned int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrBool", ptrarray, boolarray, ptrcomp, keyval, field1val, len, pos);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrIntInt$descriptor() {
        return SCIPsortedvecInsertDownPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrIntInt$handle() {
        return SCIPsortedvecInsertDownPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrIntInt$address() {
        return SCIPsortedvecInsertDownPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, int field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrRealInt$descriptor() {
        return SCIPsortedvecInsertDownPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrRealInt$handle() {
        return SCIPsortedvecInsertDownPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrRealInt$address() {
        return SCIPsortedvecInsertDownPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrRealInt", ptrarray, realarray, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrRealBool$descriptor() {
        return SCIPsortedvecInsertDownPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrRealBool$handle() {
        return SCIPsortedvecInsertDownPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrRealBool$address() {
        return SCIPsortedvecInsertDownPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, double field1val, unsigned int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, double field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrInt$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrInt$handle() {
        return SCIPsortedvecInsertDownPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrInt$address() {
        return SCIPsortedvecInsertDownPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrReal$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrReal$handle() {
        return SCIPsortedvecInsertDownPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrReal$address() {
        return SCIPsortedvecInsertDownPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, double field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrIntInt$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrIntInt$handle() {
        return SCIPsortedvecInsertDownPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrIntInt$address() {
        return SCIPsortedvecInsertDownPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrRealIntInt$descriptor() {
        return SCIPsortedvecInsertDownPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrRealIntInt$handle() {
        return SCIPsortedvecInsertDownPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrRealIntInt$address() {
        return SCIPsortedvecInsertDownPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, double field1val, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrRealInt$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrRealInt$handle() {
        return SCIPsortedvecInsertDownPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrRealInt$address() {
        return SCIPsortedvecInsertDownPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrRealBool$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrRealBool$handle() {
        return SCIPsortedvecInsertDownPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrRealBool$address() {
        return SCIPsortedvecInsertDownPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrLongInt$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrLongInt$handle() {
        return SCIPsortedvecInsertDownPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrLongInt$address() {
        return SCIPsortedvecInsertDownPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, long field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrPtrLongIntInt$descriptor() {
        return SCIPsortedvecInsertDownPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrPtrLongIntInt$handle() {
        return SCIPsortedvecInsertDownPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrPtrLongIntInt$address() {
        return SCIPsortedvecInsertDownPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), void *keyval, void *field1val, long long field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, MemorySegment keyval, MemorySegment field1val, long field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownReal$descriptor() {
        return SCIPsortedvecInsertDownReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownReal$handle() {
        return SCIPsortedvecInsertDownReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownReal$address() {
        return SCIPsortedvecInsertDownReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownReal(double *realarray, double keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownReal(MemorySegment realarray, double keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownReal", realarray, keyval, len, pos);
            }
            mh$.invokeExact(realarray, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealBoolPtr$descriptor() {
        return SCIPsortedvecInsertDownRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealBoolPtr$handle() {
        return SCIPsortedvecInsertDownRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealBoolPtr$address() {
        return SCIPsortedvecInsertDownRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, double keyval, unsigned int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, double keyval, int field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealBoolPtr", realarray, boolarray, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealPtr$descriptor() {
        return SCIPsortedvecInsertDownRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealPtr$handle() {
        return SCIPsortedvecInsertDownRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealPtr$address() {
        return SCIPsortedvecInsertDownRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtr(double *realarray, void **ptrarray, double keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealPtr(MemorySegment realarray, MemorySegment ptrarray, double keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealPtr", realarray, ptrarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double keyval, void *field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealPtrPtr$descriptor() {
        return SCIPsortedvecInsertDownRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double keyval, void *field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealPtrPtr$handle() {
        return SCIPsortedvecInsertDownRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double keyval, void *field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealPtrPtr$address() {
        return SCIPsortedvecInsertDownRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, double keyval, void *field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealPtrPtr(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, double keyval, MemorySegment field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealPtrPtr", realarray, ptrarray1, ptrarray2, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealInt$descriptor() {
        return SCIPsortedvecInsertDownRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealInt$handle() {
        return SCIPsortedvecInsertDownRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealInt$address() {
        return SCIPsortedvecInsertDownRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealInt(double *realarray, int *intarray, double keyval, int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealInt(MemorySegment realarray, MemorySegment intarray, double keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealInt", realarray, intarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(realarray, intarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealIntInt$descriptor() {
        return SCIPsortedvecInsertDownRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealIntInt$handle() {
        return SCIPsortedvecInsertDownRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealIntInt$address() {
        return SCIPsortedvecInsertDownRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntInt(double *realarray, int *intarray1, int *intarray2, double keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, double keyval, int field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealIntInt", realarray, intarray1, intarray2, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealInt(double *realarray, double *realarray2, int *intarray, double keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealInt$descriptor() {
        return SCIPsortedvecInsertDownRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealInt(double *realarray, double *realarray2, int *intarray, double keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealInt$handle() {
        return SCIPsortedvecInsertDownRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealInt(double *realarray, double *realarray2, int *intarray, double keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealInt$address() {
        return SCIPsortedvecInsertDownRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealInt(double *realarray, double *realarray2, int *intarray, double keyval, double field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealInt(MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, double keyval, double field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealInt", realarray, realarray2, intarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, realarray2, intarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealIntLong$descriptor() {
        return SCIPsortedvecInsertDownRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealIntLong$handle() {
        return SCIPsortedvecInsertDownRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealIntLong$address() {
        return SCIPsortedvecInsertDownRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntLong(double *realarray, int *intarray, long long *longarray, double keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, double keyval, int field1val, long field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealIntLong", realarray, intarray, longarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, intarray, longarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealIntPtr$descriptor() {
        return SCIPsortedvecInsertDownRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealIntPtr$handle() {
        return SCIPsortedvecInsertDownRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealIntPtr$address() {
        return SCIPsortedvecInsertDownRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, double keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, double keyval, int field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealIntPtr", realarray, intarray, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealPtr$descriptor() {
        return SCIPsortedvecInsertDownRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealPtr$handle() {
        return SCIPsortedvecInsertDownRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealPtr$address() {
        return SCIPsortedvecInsertDownRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, double keyval, double field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, double keyval, double field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealPtr", realarray1, realarray2, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double keyval, double field1val, void *field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealPtrPtr$descriptor() {
        return SCIPsortedvecInsertDownRealRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double keyval, double field1val, void *field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealPtrPtr$handle() {
        return SCIPsortedvecInsertDownRealRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double keyval, double field1val, void *field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealPtrPtr$address() {
        return SCIPsortedvecInsertDownRealRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, double keyval, double field1val, void *field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealPtrPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray1, MemorySegment ptrarray2, double keyval, double field1val, MemorySegment field2val, MemorySegment field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealPtrPtr", realarray1, realarray2, ptrarray1, ptrarray2, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray1, ptrarray2, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealPtrPtrInt$descriptor() {
        return SCIPsortedvecInsertDownRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealPtrPtrInt$handle() {
        return SCIPsortedvecInsertDownRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealPtrPtrInt$address() {
        return SCIPsortedvecInsertDownRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, double keyval, void *field1val, void *field2val, int intval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, double keyval, MemorySegment field1val, MemorySegment field2val, int intval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, intval, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, intval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealPtrPtrIntInt$descriptor() {
        return SCIPsortedvecInsertDownRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealPtrPtrIntInt$handle() {
        return SCIPsortedvecInsertDownRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealPtrPtrIntInt$address() {
        return SCIPsortedvecInsertDownRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, double keyval, void *field1val, void *field2val, int intval1, int intval2, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, double keyval, MemorySegment field1val, MemorySegment field2val, int intval1, int intval2, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, intval1, intval2, len, pos);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, intval1, intval2, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_LONG_LONG,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealLongRealInt$descriptor() {
        return SCIPsortedvecInsertDownRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealLongRealInt$handle() {
        return SCIPsortedvecInsertDownRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealLongRealInt$address() {
        return SCIPsortedvecInsertDownRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, double keyval, long long field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, double keyval, long field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealLongRealInt", realarray1, longarray, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealIntInt$descriptor() {
        return SCIPsortedvecInsertDownRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealIntInt$handle() {
        return SCIPsortedvecInsertDownRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealIntInt$address() {
        return SCIPsortedvecInsertDownRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, double keyval, double field1val, int field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, double keyval, double field1val, int field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealIntInt", realarray1, realarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealRealInt$descriptor() {
        return SCIPsortedvecInsertDownRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealRealInt$handle() {
        return SCIPsortedvecInsertDownRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealRealInt$address() {
        return SCIPsortedvecInsertDownRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, double keyval, double field1val, double field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, double keyval, double field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealRealInt", realarray1, realarray2, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealRealPtr$descriptor() {
        return SCIPsortedvecInsertDownRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealRealPtr$handle() {
        return SCIPsortedvecInsertDownRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealRealPtr$address() {
        return SCIPsortedvecInsertDownRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, double keyval, double field1val, double field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, double keyval, double field1val, double field2val, MemorySegment field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealRealBoolPtr$descriptor() {
        return SCIPsortedvecInsertDownRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealRealBoolPtr$handle() {
        return SCIPsortedvecInsertDownRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealRealBoolPtr$address() {
        return SCIPsortedvecInsertDownRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, void *field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, double keyval, double field1val, double field2val, int field3val, MemorySegment field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownRealRealRealBoolBoolPtr$descriptor() {
        return SCIPsortedvecInsertDownRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownRealRealRealBoolBoolPtr$handle() {
        return SCIPsortedvecInsertDownRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownRealRealRealBoolBoolPtr$address() {
        return SCIPsortedvecInsertDownRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, double keyval, double field1val, double field2val, unsigned int field3val, unsigned int field4val, void *field5val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, double keyval, double field1val, double field2val, int field3val, int field4val, MemorySegment field5val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownInt$descriptor() {
        return SCIPsortedvecInsertDownInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownInt$handle() {
        return SCIPsortedvecInsertDownInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownInt$address() {
        return SCIPsortedvecInsertDownInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownInt(int *intarray, int keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownInt(MemorySegment intarray, int keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownInt", intarray, keyval, len, pos);
            }
            mh$.invokeExact(intarray, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntInt$descriptor() {
        return SCIPsortedvecInsertDownIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntInt$handle() {
        return SCIPsortedvecInsertDownIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntInt$address() {
        return SCIPsortedvecInsertDownIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntInt(int *intarray1, int *intarray2, int keyval, int field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntInt(MemorySegment intarray1, MemorySegment intarray2, int keyval, int field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntInt", intarray1, intarray2, keyval, field1val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntReal$descriptor() {
        return SCIPsortedvecInsertDownIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntReal$handle() {
        return SCIPsortedvecInsertDownIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntReal$address() {
        return SCIPsortedvecInsertDownIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntReal(int *intarray, double *realarray, int keyval, double field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntReal(MemorySegment intarray, MemorySegment realarray, int keyval, double field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntReal", intarray, realarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(intarray, realarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntIntInt$descriptor() {
        return SCIPsortedvecInsertDownIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntIntInt$handle() {
        return SCIPsortedvecInsertDownIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntIntInt$address() {
        return SCIPsortedvecInsertDownIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int keyval, int field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int keyval, int field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntIntInt", intarray1, intarray2, intarray3, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntIntLong$descriptor() {
        return SCIPsortedvecInsertDownIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntIntLong$handle() {
        return SCIPsortedvecInsertDownIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntIntLong$address() {
        return SCIPsortedvecInsertDownIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int keyval, int field1val, long long field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int keyval, int field1val, long field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntIntLong", intarray1, intarray2, longarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntIntPtr$descriptor() {
        return SCIPsortedvecInsertDownIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntIntPtr$handle() {
        return SCIPsortedvecInsertDownIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntIntPtr$address() {
        return SCIPsortedvecInsertDownIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int keyval, int field1val, void *field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int keyval, int field1val, MemorySegment field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntIntPtr", intarray1, intarray2, ptrarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntIntReal$descriptor() {
        return SCIPsortedvecInsertDownIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntIntReal$handle() {
        return SCIPsortedvecInsertDownIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntIntReal$address() {
        return SCIPsortedvecInsertDownIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int keyval, int field1val, double field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int keyval, int field1val, double field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntIntReal", intarray1, intarray2, realarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntPtr$descriptor() {
        return SCIPsortedvecInsertDownIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntPtr$handle() {
        return SCIPsortedvecInsertDownIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntPtr$address() {
        return SCIPsortedvecInsertDownIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtr(int *intarray, void **ptrarray, int keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntPtr(MemorySegment intarray, MemorySegment ptrarray, int keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntPtr", intarray, ptrarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(intarray, ptrarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntIntIntPtr$descriptor() {
        return SCIPsortedvecInsertDownIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntIntIntPtr$handle() {
        return SCIPsortedvecInsertDownIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntIntIntPtr$address() {
        return SCIPsortedvecInsertDownIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int keyval, int field1val, int field2val, void *field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int keyval, int field1val, int field2val, MemorySegment field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntIntIntReal$descriptor() {
        return SCIPsortedvecInsertDownIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntIntIntReal$handle() {
        return SCIPsortedvecInsertDownIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntIntIntReal$address() {
        return SCIPsortedvecInsertDownIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int keyval, int field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int keyval, int field1val, int field2val, double field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntIntIntReal", intarray1, intarray2, intarray3, realarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntPtrIntReal$descriptor() {
        return SCIPsortedvecInsertDownIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntPtrIntReal$handle() {
        return SCIPsortedvecInsertDownIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntPtrIntReal$address() {
        return SCIPsortedvecInsertDownIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int keyval, void *field1val, int field2val, double field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int keyval, MemorySegment field1val, int field2val, double field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLong$descriptor() {
        return SCIPsortedvecInsertDownLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLong$handle() {
        return SCIPsortedvecInsertDownLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLong$address() {
        return SCIPsortedvecInsertDownLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLong(long long *longarray, long long keyval, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLong(MemorySegment longarray, long keyval, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLong", longarray, keyval, len, pos);
            }
            mh$.invokeExact(longarray, keyval, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtr$descriptor() {
        return SCIPsortedvecInsertDownLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtr$handle() {
        return SCIPsortedvecInsertDownLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtr$address() {
        return SCIPsortedvecInsertDownLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtr(long long *longarray, void **ptrarray, long long keyval, void *field1val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtr(MemorySegment longarray, MemorySegment ptrarray, long keyval, MemorySegment field1val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtr", longarray, ptrarray, keyval, field1val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, keyval, field1val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrInt$descriptor() {
        return SCIPsortedvecInsertDownLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrInt$handle() {
        return SCIPsortedvecInsertDownLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrInt$address() {
        return SCIPsortedvecInsertDownLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, long long keyval, void *field1val, int field2val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, long keyval, MemorySegment field1val, int field2val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrInt", longarray, ptrarray, intarray, keyval, field1val, field2val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, keyval, field1val, field2val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrRealBool$descriptor() {
        return SCIPsortedvecInsertDownLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrRealBool$handle() {
        return SCIPsortedvecInsertDownLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrRealBool$address() {
        return SCIPsortedvecInsertDownLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, unsigned int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, long keyval, MemorySegment field1val, double field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrRealBool", longarray, ptrarray, realarray, boolarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrRealRealBool$descriptor() {
        return SCIPsortedvecInsertDownLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrRealRealBool$handle() {
        return SCIPsortedvecInsertDownLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrRealRealBool$address() {
        return SCIPsortedvecInsertDownLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, long keyval, MemorySegment field1val, double field2val, double field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrRealRealIntBool$descriptor() {
        return SCIPsortedvecInsertDownLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrRealRealIntBool$handle() {
        return SCIPsortedvecInsertDownLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrRealRealIntBool$address() {
        return SCIPsortedvecInsertDownLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, long long keyval, void *field1val, double field2val, double field3val, int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, long keyval, MemorySegment field1val, double field2val, double field3val, int field4val, int field5val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrPtrInt$descriptor() {
        return SCIPsortedvecInsertDownLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrPtrInt$handle() {
        return SCIPsortedvecInsertDownLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrPtrInt$address() {
        return SCIPsortedvecInsertDownLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, long long keyval, void *field1val, void *field2val, int field3val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, long keyval, MemorySegment field1val, MemorySegment field2val, int field3val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, field3val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, keyval, field1val, field2val, field3val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrPtrIntInt$descriptor() {
        return SCIPsortedvecInsertDownLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrPtrIntInt$handle() {
        return SCIPsortedvecInsertDownLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrPtrIntInt$address() {
        return SCIPsortedvecInsertDownLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, long long keyval, void *field1val, void *field2val, int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, long keyval, MemorySegment field1val, MemorySegment field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownLongPtrPtrBoolInt$descriptor() {
        return SCIPsortedvecInsertDownLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownLongPtrPtrBoolInt$handle() {
        return SCIPsortedvecInsertDownLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownLongPtrPtrBoolInt$address() {
        return SCIPsortedvecInsertDownLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, long long keyval, void *field1val, void *field2val, unsigned int field3val, int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, long keyval, MemorySegment field1val, MemorySegment field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecInsertDownPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownPtrIntIntBoolBool$handle() {
        return SCIPsortedvecInsertDownPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownPtrIntIntBoolBool$address() {
        return SCIPsortedvecInsertDownPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), void *keyval, int field1val, int field2val, unsigned int field3val, unsigned int field4val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, MemorySegment keyval, int field1val, int field2val, int field3val, int field4val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, keyval, field1val, field2val, field3val, field4val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecInsertDownIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecInsertDownIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecInsertDownIntPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecInsertDownIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecInsertDownIntPtrIntIntBoolBool$handle() {
        return SCIPsortedvecInsertDownIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecInsertDownIntPtrIntIntBoolBool$address() {
        return SCIPsortedvecInsertDownIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecInsertDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int keyval, void *field1val, int field2val, int field3val, unsigned int field4val, unsigned int field5val, int *len, int *pos)
     * }
     */
    public static void SCIPsortedvecInsertDownIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int keyval, MemorySegment field1val, int field2val, int field3val, int field4val, int field5val, MemorySegment len, MemorySegment pos) {
        var mh$ = SCIPsortedvecInsertDownIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecInsertDownIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, keyval, field1val, field2val, field3val, field4val, field5val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosInd$descriptor() {
        return SCIPsortedvecDelPosInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosInd$handle() {
        return SCIPsortedvecDelPosInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosInd$address() {
        return SCIPsortedvecDelPosInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosInd", indarray, indcomp, dataptr, pos, len);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtr$descriptor() {
        return SCIPsortedvecDelPosPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtr$handle() {
        return SCIPsortedvecDelPosPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtr$address() {
        return SCIPsortedvecDelPosPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtr(MemorySegment ptrarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtr", ptrarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtr$descriptor() {
        return SCIPsortedvecDelPosPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtr$handle() {
        return SCIPsortedvecDelPosPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtr$address() {
        return SCIPsortedvecDelPosPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtr", ptrarray1, ptrarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrReal$descriptor() {
        return SCIPsortedvecDelPosPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrReal$handle() {
        return SCIPsortedvecDelPosPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrReal$address() {
        return SCIPsortedvecDelPosPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrReal", ptrarray, realarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrInt$descriptor() {
        return SCIPsortedvecDelPosPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrInt$handle() {
        return SCIPsortedvecDelPosPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrInt$address() {
        return SCIPsortedvecDelPosPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrInt", ptrarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrBool$descriptor() {
        return SCIPsortedvecDelPosPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrBool$handle() {
        return SCIPsortedvecDelPosPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrBool$address() {
        return SCIPsortedvecDelPosPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrBool", ptrarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrIntInt$handle() {
        return SCIPsortedvecDelPosPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrIntInt$address() {
        return SCIPsortedvecDelPosPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrRealInt$descriptor() {
        return SCIPsortedvecDelPosPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrRealInt$handle() {
        return SCIPsortedvecDelPosPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrRealInt$address() {
        return SCIPsortedvecDelPosPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrRealInt", ptrarray, realarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrRealRealInt$descriptor() {
        return SCIPsortedvecDelPosPtrRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrRealRealInt$handle() {
        return SCIPsortedvecDelPosPtrRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrRealRealInt$address() {
        return SCIPsortedvecDelPosPtrRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealInt(void **ptrarray, double *realarray1, double *realarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrRealRealInt(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrRealRealInt", ptrarray, realarray1, realarray2, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrRealRealBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrRealRealBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrRealRealBoolBool$descriptor() {
        return SCIPsortedvecDelPosPtrRealRealBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrRealRealBoolBool$handle() {
        return SCIPsortedvecDelPosPtrRealRealBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrRealRealBoolBool$address() {
        return SCIPsortedvecDelPosPtrRealRealBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealBoolBool(void **ptrarray, double *realarray1, double *realarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrRealRealBoolBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrRealRealBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrRealRealBoolBool", ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, boolarray1, boolarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrRealRealIntBool$descriptor() {
        return SCIPsortedvecDelPosPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrRealRealIntBool$handle() {
        return SCIPsortedvecDelPosPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrRealRealIntBool$address() {
        return SCIPsortedvecDelPosPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealRealIntBool(void **ptrarray, double *realarray1, double *realarray2, int *intarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrRealRealIntBool(MemorySegment ptrarray, MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrRealRealIntBool", ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray1, realarray2, intarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrRealBool$descriptor() {
        return SCIPsortedvecDelPosPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrRealBool$handle() {
        return SCIPsortedvecDelPosPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrRealBool$address() {
        return SCIPsortedvecDelPosPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrInt$descriptor() {
        return SCIPsortedvecDelPosPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrInt$handle() {
        return SCIPsortedvecDelPosPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrInt$address() {
        return SCIPsortedvecDelPosPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrReal$descriptor() {
        return SCIPsortedvecDelPosPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrReal$handle() {
        return SCIPsortedvecDelPosPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrReal$address() {
        return SCIPsortedvecDelPosPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrIntInt$handle() {
        return SCIPsortedvecDelPosPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrIntInt$address() {
        return SCIPsortedvecDelPosPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrRealIntInt$descriptor() {
        return SCIPsortedvecDelPosPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrRealIntInt$handle() {
        return SCIPsortedvecDelPosPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrRealIntInt$address() {
        return SCIPsortedvecDelPosPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrRealInt$descriptor() {
        return SCIPsortedvecDelPosPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrRealInt$handle() {
        return SCIPsortedvecDelPosPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrRealInt$address() {
        return SCIPsortedvecDelPosPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrRealBool$descriptor() {
        return SCIPsortedvecDelPosPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrRealBool$handle() {
        return SCIPsortedvecDelPosPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrRealBool$address() {
        return SCIPsortedvecDelPosPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrLongInt$descriptor() {
        return SCIPsortedvecDelPosPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrLongInt$handle() {
        return SCIPsortedvecDelPosPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrLongInt$address() {
        return SCIPsortedvecDelPosPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrPtrLongIntInt$descriptor() {
        return SCIPsortedvecDelPosPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrPtrLongIntInt$handle() {
        return SCIPsortedvecDelPosPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrPtrLongIntInt$address() {
        return SCIPsortedvecDelPosPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealBoolPtr$descriptor() {
        return SCIPsortedvecDelPosRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealBoolPtr$handle() {
        return SCIPsortedvecDelPosRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealBoolPtr$address() {
        return SCIPsortedvecDelPosRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealBoolPtr", realarray, boolarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealPtr$descriptor() {
        return SCIPsortedvecDelPosRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealPtr$handle() {
        return SCIPsortedvecDelPosRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealPtr$address() {
        return SCIPsortedvecDelPosRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealPtr(MemorySegment realarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealPtr", realarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosReal(double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosReal$descriptor() {
        return SCIPsortedvecDelPosReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosReal(double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosReal$handle() {
        return SCIPsortedvecDelPosReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosReal(double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosReal$address() {
        return SCIPsortedvecDelPosReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosReal(double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosReal(MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosReal", realarray, pos, len);
            }
            mh$.invokeExact(realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealInt$descriptor() {
        return SCIPsortedvecDelPosRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealInt$handle() {
        return SCIPsortedvecDelPosRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealInt$address() {
        return SCIPsortedvecDelPosRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealInt(MemorySegment realarray, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealInt", realarray, intarray, pos, len);
            }
            mh$.invokeExact(realarray, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealIntInt$descriptor() {
        return SCIPsortedvecDelPosRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealIntInt$handle() {
        return SCIPsortedvecDelPosRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealIntInt$address() {
        return SCIPsortedvecDelPosRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealIntInt", realarray, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealIntLong$descriptor() {
        return SCIPsortedvecDelPosRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealIntLong$handle() {
        return SCIPsortedvecDelPosRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealIntLong$address() {
        return SCIPsortedvecDelPosRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealIntLong", realarray, intarray, longarray, pos, len);
            }
            mh$.invokeExact(realarray, intarray, longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealIntPtr$descriptor() {
        return SCIPsortedvecDelPosRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealIntPtr$handle() {
        return SCIPsortedvecDelPosRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealIntPtr$address() {
        return SCIPsortedvecDelPosRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealIntPtr", realarray, intarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealRealPtr$descriptor() {
        return SCIPsortedvecDelPosRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealRealPtr$handle() {
        return SCIPsortedvecDelPosRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealRealPtr$address() {
        return SCIPsortedvecDelPosRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealRealPtr", realarray1, realarray2, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealPtrPtrInt$descriptor() {
        return SCIPsortedvecDelPosRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealPtrPtrInt$handle() {
        return SCIPsortedvecDelPosRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealPtrPtrInt$address() {
        return SCIPsortedvecDelPosRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealPtrPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealPtrPtrIntInt$handle() {
        return SCIPsortedvecDelPosRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealPtrPtrIntInt$address() {
        return SCIPsortedvecDelPosRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealLongRealInt$descriptor() {
        return SCIPsortedvecDelPosRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealLongRealInt$handle() {
        return SCIPsortedvecDelPosRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealLongRealInt$address() {
        return SCIPsortedvecDelPosRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealLongRealInt", realarray1, longarray, realarray3, intarray, pos, len);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealRealIntInt$descriptor() {
        return SCIPsortedvecDelPosRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealRealIntInt$handle() {
        return SCIPsortedvecDelPosRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealRealIntInt$address() {
        return SCIPsortedvecDelPosRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealRealIntInt", realarray1, realarray2, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealRealRealInt$descriptor() {
        return SCIPsortedvecDelPosRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealRealRealInt$handle() {
        return SCIPsortedvecDelPosRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealRealRealInt$address() {
        return SCIPsortedvecDelPosRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealRealRealInt", realarray1, realarray2, realarray3, intarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealRealRealPtr$descriptor() {
        return SCIPsortedvecDelPosRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealRealRealPtr$handle() {
        return SCIPsortedvecDelPosRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealRealRealPtr$address() {
        return SCIPsortedvecDelPosRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealRealRealBoolPtr$descriptor() {
        return SCIPsortedvecDelPosRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealRealRealBoolPtr$handle() {
        return SCIPsortedvecDelPosRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealRealRealBoolPtr$address() {
        return SCIPsortedvecDelPosRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosRealRealRealBoolBoolPtr$descriptor() {
        return SCIPsortedvecDelPosRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosRealRealRealBoolBoolPtr$handle() {
        return SCIPsortedvecDelPosRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosRealRealRealBoolBoolPtr$address() {
        return SCIPsortedvecDelPosRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInt(int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosInt$descriptor() {
        return SCIPsortedvecDelPosInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInt(int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosInt$handle() {
        return SCIPsortedvecDelPosInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInt(int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosInt$address() {
        return SCIPsortedvecDelPosInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosInt(int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosInt(MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosInt", intarray, pos, len);
            }
            mh$.invokeExact(intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntInt$descriptor() {
        return SCIPsortedvecDelPosIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntInt$handle() {
        return SCIPsortedvecDelPosIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntInt$address() {
        return SCIPsortedvecDelPosIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntInt(MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntInt", intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntReal$descriptor() {
        return SCIPsortedvecDelPosIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntReal$handle() {
        return SCIPsortedvecDelPosIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntReal$address() {
        return SCIPsortedvecDelPosIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntReal(MemorySegment intarray, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntReal", intarray, realarray, pos, len);
            }
            mh$.invokeExact(intarray, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntIntInt$descriptor() {
        return SCIPsortedvecDelPosIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntIntInt$handle() {
        return SCIPsortedvecDelPosIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntIntInt$address() {
        return SCIPsortedvecDelPosIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntIntInt", intarray1, intarray2, intarray3, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntIntLong$descriptor() {
        return SCIPsortedvecDelPosIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntIntLong$handle() {
        return SCIPsortedvecDelPosIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntIntLong$address() {
        return SCIPsortedvecDelPosIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntIntLong", intarray1, intarray2, longarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntRealLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntRealLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntRealLong(int *intarray, double *realarray, long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntRealLong$descriptor() {
        return SCIPsortedvecDelPosIntRealLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntRealLong(int *intarray, double *realarray, long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntRealLong$handle() {
        return SCIPsortedvecDelPosIntRealLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntRealLong(int *intarray, double *realarray, long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntRealLong$address() {
        return SCIPsortedvecDelPosIntRealLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntRealLong(int *intarray, double *realarray, long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntRealLong(MemorySegment intarray, MemorySegment realarray, MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntRealLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntRealLong", intarray, realarray, longarray, pos, len);
            }
            mh$.invokeExact(intarray, realarray, longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntIntPtr$descriptor() {
        return SCIPsortedvecDelPosIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntIntPtr$handle() {
        return SCIPsortedvecDelPosIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntIntPtr$address() {
        return SCIPsortedvecDelPosIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntIntPtr", intarray1, intarray2, ptrarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntIntReal$descriptor() {
        return SCIPsortedvecDelPosIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntIntReal$handle() {
        return SCIPsortedvecDelPosIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntIntReal$address() {
        return SCIPsortedvecDelPosIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntIntReal", intarray1, intarray2, realarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntPtr$descriptor() {
        return SCIPsortedvecDelPosIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntPtr$handle() {
        return SCIPsortedvecDelPosIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntPtr$address() {
        return SCIPsortedvecDelPosIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntPtr(MemorySegment intarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntPtr", intarray, ptrarray, pos, len);
            }
            mh$.invokeExact(intarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrReal(int *intarray, void **ptrarray, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntPtrReal$descriptor() {
        return SCIPsortedvecDelPosIntPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrReal(int *intarray, void **ptrarray, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntPtrReal$handle() {
        return SCIPsortedvecDelPosIntPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrReal(int *intarray, void **ptrarray, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntPtrReal$address() {
        return SCIPsortedvecDelPosIntPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrReal(int *intarray, void **ptrarray, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntPtrReal(MemorySegment intarray, MemorySegment ptrarray, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntPtrReal", intarray, ptrarray, realarray, pos, len);
            }
            mh$.invokeExact(intarray, ptrarray, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntIntIntPtr$descriptor() {
        return SCIPsortedvecDelPosIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntIntIntPtr$handle() {
        return SCIPsortedvecDelPosIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntIntIntPtr$address() {
        return SCIPsortedvecDelPosIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntIntIntReal$descriptor() {
        return SCIPsortedvecDelPosIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntIntIntReal$handle() {
        return SCIPsortedvecDelPosIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntIntIntReal$address() {
        return SCIPsortedvecDelPosIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntIntIntReal", intarray1, intarray2, intarray3, realarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntPtrIntReal$descriptor() {
        return SCIPsortedvecDelPosIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntPtrIntReal$handle() {
        return SCIPsortedvecDelPosIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntPtrIntReal$address() {
        return SCIPsortedvecDelPosIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, pos, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLong(long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLong$descriptor() {
        return SCIPsortedvecDelPosLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLong(long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLong$handle() {
        return SCIPsortedvecDelPosLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLong(long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLong$address() {
        return SCIPsortedvecDelPosLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLong(long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLong(MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLong", longarray, pos, len);
            }
            mh$.invokeExact(longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtr$descriptor() {
        return SCIPsortedvecDelPosLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtr$handle() {
        return SCIPsortedvecDelPosLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtr$address() {
        return SCIPsortedvecDelPosLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtr(MemorySegment longarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtr", longarray, ptrarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrInt$descriptor() {
        return SCIPsortedvecDelPosLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrInt$handle() {
        return SCIPsortedvecDelPosLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrInt$address() {
        return SCIPsortedvecDelPosLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrInt", longarray, ptrarray, intarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrRealBool$descriptor() {
        return SCIPsortedvecDelPosLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrRealBool$handle() {
        return SCIPsortedvecDelPosLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrRealBool$address() {
        return SCIPsortedvecDelPosLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrRealBool", longarray, ptrarray, realarray, boolarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrRealRealBool$descriptor() {
        return SCIPsortedvecDelPosLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrRealRealBool$handle() {
        return SCIPsortedvecDelPosLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrRealRealBool$address() {
        return SCIPsortedvecDelPosLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrRealRealIntBool$descriptor() {
        return SCIPsortedvecDelPosLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrRealRealIntBool$handle() {
        return SCIPsortedvecDelPosLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrRealRealIntBool$address() {
        return SCIPsortedvecDelPosLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrPtrInt$descriptor() {
        return SCIPsortedvecDelPosLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrPtrInt$handle() {
        return SCIPsortedvecDelPosLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrPtrInt$address() {
        return SCIPsortedvecDelPosLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrPtrIntInt$handle() {
        return SCIPsortedvecDelPosLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrPtrIntInt$address() {
        return SCIPsortedvecDelPosLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosLongPtrPtrBoolInt$descriptor() {
        return SCIPsortedvecDelPosLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosLongPtrPtrBoolInt$handle() {
        return SCIPsortedvecDelPosLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosLongPtrPtrBoolInt$address() {
        return SCIPsortedvecDelPosLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecDelPosPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosPtrIntIntBoolBool$handle() {
        return SCIPsortedvecDelPosPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosPtrIntIntBoolBool$address() {
        return SCIPsortedvecDelPosPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosIntPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecDelPosIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosIntPtrIntIntBoolBool$handle() {
        return SCIPsortedvecDelPosIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosIntPtrIntIntBoolBool$address() {
        return SCIPsortedvecDelPosIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, pos, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownInd$descriptor() {
        return SCIPsortedvecDelPosDownInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownInd$handle() {
        return SCIPsortedvecDelPosDownInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownInd$address() {
        return SCIPsortedvecDelPosDownInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownInd", indarray, indcomp, dataptr, pos, len);
            }
            mh$.invokeExact(indarray, indcomp, dataptr, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtr$descriptor() {
        return SCIPsortedvecDelPosDownPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtr$handle() {
        return SCIPsortedvecDelPosDownPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtr$address() {
        return SCIPsortedvecDelPosDownPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtr(MemorySegment ptrarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtr", ptrarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtr$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtr$handle() {
        return SCIPsortedvecDelPosDownPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtr$address() {
        return SCIPsortedvecDelPosDownPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtr(void **ptrarray1, void **ptrarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtr(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtr", ptrarray1, ptrarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrReal$descriptor() {
        return SCIPsortedvecDelPosDownPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrReal$handle() {
        return SCIPsortedvecDelPosDownPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrReal$address() {
        return SCIPsortedvecDelPosDownPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrReal(void **ptrarray, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrReal(MemorySegment ptrarray, MemorySegment realarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrReal", ptrarray, realarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrInt$handle() {
        return SCIPsortedvecDelPosDownPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrInt$address() {
        return SCIPsortedvecDelPosDownPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrInt(void **ptrarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrInt(MemorySegment ptrarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrInt", ptrarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrBool$descriptor() {
        return SCIPsortedvecDelPosDownPtrBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrBool$handle() {
        return SCIPsortedvecDelPosDownPtrBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrBool$address() {
        return SCIPsortedvecDelPosDownPtrBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrBool(void **ptrarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrBool(MemorySegment ptrarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrBool", ptrarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrIntInt$handle() {
        return SCIPsortedvecDelPosDownPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrIntInt$address() {
        return SCIPsortedvecDelPosDownPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntInt(void **ptrarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrIntInt(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrIntInt", ptrarray, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrRealInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrRealInt$handle() {
        return SCIPsortedvecDelPosDownPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrRealInt$address() {
        return SCIPsortedvecDelPosDownPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealInt(void **ptrarray, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrRealInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrRealInt", ptrarray, realarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrRealBool$descriptor() {
        return SCIPsortedvecDelPosDownPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrRealBool$handle() {
        return SCIPsortedvecDelPosDownPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrRealBool$address() {
        return SCIPsortedvecDelPosDownPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealBool(void **ptrarray, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrRealBool(MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrRealBool", ptrarray, realarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrInt$handle() {
        return SCIPsortedvecDelPosDownPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrInt$address() {
        return SCIPsortedvecDelPosDownPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrInt(void **ptrarray1, void **ptrarray2, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrInt", ptrarray1, ptrarray2, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrReal$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrReal$handle() {
        return SCIPsortedvecDelPosDownPtrPtrReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrReal$address() {
        return SCIPsortedvecDelPosDownPtrPtrReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrReal(void **ptrarray1, void **ptrarray2, double *realarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrReal(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrReal", ptrarray1, ptrarray2, realarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrIntInt$handle() {
        return SCIPsortedvecDelPosDownPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrIntInt$address() {
        return SCIPsortedvecDelPosDownPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrIntInt(void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrIntInt", ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrRealIntInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrRealIntInt$handle() {
        return SCIPsortedvecDelPosDownPtrRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrRealIntInt$address() {
        return SCIPsortedvecDelPosDownPtrRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrRealIntInt(void **ptrarray, double *realarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrRealIntInt(MemorySegment ptrarray, MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrRealIntInt", ptrarray, realarray, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, realarray, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrRealInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrRealInt$handle() {
        return SCIPsortedvecDelPosDownPtrPtrRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrRealInt$address() {
        return SCIPsortedvecDelPosDownPtrPtrRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealInt(void **ptrarray1, void **ptrarray2, double *realarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrRealInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrRealInt", ptrarray1, ptrarray2, realarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrRealBool$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrRealBool$handle() {
        return SCIPsortedvecDelPosDownPtrPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrRealBool$address() {
        return SCIPsortedvecDelPosDownPtrPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrRealBool(void **ptrarray1, void **ptrarray2, double *realarray, unsigned int *boolarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrRealBool(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrRealBool", ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, realarray, boolarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrLongInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrLongInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrLongInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrLongInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrLongInt$handle() {
        return SCIPsortedvecDelPosDownPtrPtrLongInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrLongInt$address() {
        return SCIPsortedvecDelPosDownPtrPtrLongInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrLongInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrLongInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrLongInt", ptrarray1, ptrarray2, longarray, intarray, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrPtrLongIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrPtrLongIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrPtrLongIntInt$descriptor() {
        return SCIPsortedvecDelPosDownPtrPtrLongIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrPtrLongIntInt$handle() {
        return SCIPsortedvecDelPosDownPtrPtrLongIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrPtrLongIntInt$address() {
        return SCIPsortedvecDelPosDownPtrPtrLongIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrPtrLongIntInt(void **ptrarray1, void **ptrarray2, long long *longarray, int *intarray1, int *intarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrPtrLongIntInt(MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment longarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrPtrLongIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrPtrLongIntInt", ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray1, ptrarray2, longarray, intarray1, intarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownReal(double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownReal$descriptor() {
        return SCIPsortedvecDelPosDownReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownReal(double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownReal$handle() {
        return SCIPsortedvecDelPosDownReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownReal(double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownReal$address() {
        return SCIPsortedvecDelPosDownReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownReal(double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownReal(MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownReal", realarray, pos, len);
            }
            mh$.invokeExact(realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealBoolPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealBoolPtr$handle() {
        return SCIPsortedvecDelPosDownRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealBoolPtr$address() {
        return SCIPsortedvecDelPosDownRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealBoolPtr(double *realarray, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealBoolPtr(MemorySegment realarray, MemorySegment boolarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealBoolPtr", realarray, boolarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray, boolarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealPtr$handle() {
        return SCIPsortedvecDelPosDownRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealPtr$address() {
        return SCIPsortedvecDelPosDownRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtr(double *realarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealPtr(MemorySegment realarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealPtr", realarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealInt$descriptor() {
        return SCIPsortedvecDelPosDownRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealInt$handle() {
        return SCIPsortedvecDelPosDownRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealInt$address() {
        return SCIPsortedvecDelPosDownRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealInt(double *realarray, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealInt(MemorySegment realarray, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealInt", realarray, intarray, pos, len);
            }
            mh$.invokeExact(realarray, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealIntInt$descriptor() {
        return SCIPsortedvecDelPosDownRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealIntInt$handle() {
        return SCIPsortedvecDelPosDownRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealIntInt$address() {
        return SCIPsortedvecDelPosDownRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntInt(double *realarray, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealIntInt(MemorySegment realarray, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealIntInt", realarray, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(realarray, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealIntLong$descriptor() {
        return SCIPsortedvecDelPosDownRealIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealIntLong$handle() {
        return SCIPsortedvecDelPosDownRealIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealIntLong$address() {
        return SCIPsortedvecDelPosDownRealIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntLong(double *realarray, int *intarray, long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealIntLong(MemorySegment realarray, MemorySegment intarray, MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealIntLong", realarray, intarray, longarray, pos, len);
            }
            mh$.invokeExact(realarray, intarray, longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealIntPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealIntPtr$handle() {
        return SCIPsortedvecDelPosDownRealIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealIntPtr$address() {
        return SCIPsortedvecDelPosDownRealIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealIntPtr(double *realarray, int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealIntPtr(MemorySegment realarray, MemorySegment intarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealIntPtr", realarray, intarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray, intarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealInt$descriptor() {
        return SCIPsortedvecDelPosDownRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealInt$handle() {
        return SCIPsortedvecDelPosDownRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealInt$address() {
        return SCIPsortedvecDelPosDownRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealInt(double *realarray1, double *realarray2, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealInt", realarray1, realarray2, intarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealPtr$handle() {
        return SCIPsortedvecDelPosDownRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealPtr$address() {
        return SCIPsortedvecDelPosDownRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtr(double *realarray1, double *realarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealPtr", realarray1, realarray2, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealPtrPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealPtrPtr$handle() {
        return SCIPsortedvecDelPosDownRealRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealPtrPtr$address() {
        return SCIPsortedvecDelPosDownRealRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealPtrPtr(double *realarray1, double *realarray2, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealPtrPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment ptrarray1, MemorySegment ptrarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealPtrPtr", realarray1, realarray2, ptrarray1, ptrarray2, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, ptrarray1, ptrarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealPtrPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealPtrPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealPtrPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealPtrPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealPtrPtr$handle() {
        return SCIPsortedvecDelPosDownRealPtrPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealPtrPtr$address() {
        return SCIPsortedvecDelPosDownRealPtrPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtr(double *realarray, void **ptrarray1, void **ptrarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealPtrPtr(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealPtrPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealPtrPtr", realarray, ptrarray1, ptrarray2, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealPtrPtrInt$descriptor() {
        return SCIPsortedvecDelPosDownRealPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealPtrPtrInt$handle() {
        return SCIPsortedvecDelPosDownRealPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealPtrPtrInt$address() {
        return SCIPsortedvecDelPosDownRealPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealPtrPtrInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealPtrPtrInt", realarray, ptrarray1, ptrarray2, intarray, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealPtrPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosDownRealPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealPtrPtrIntInt$handle() {
        return SCIPsortedvecDelPosDownRealPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealPtrPtrIntInt$address() {
        return SCIPsortedvecDelPosDownRealPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealPtrPtrIntInt(double *realarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealPtrPtrIntInt(MemorySegment realarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealPtrPtrIntInt", realarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(realarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealLongRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealLongRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealLongRealInt$descriptor() {
        return SCIPsortedvecDelPosDownRealLongRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealLongRealInt$handle() {
        return SCIPsortedvecDelPosDownRealLongRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealLongRealInt$address() {
        return SCIPsortedvecDelPosDownRealLongRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealLongRealInt(double *realarray1, long long *longarray, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealLongRealInt(MemorySegment realarray1, MemorySegment longarray, MemorySegment realarray3, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealLongRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealLongRealInt", realarray1, longarray, realarray3, intarray, pos, len);
            }
            mh$.invokeExact(realarray1, longarray, realarray3, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealIntInt$descriptor() {
        return SCIPsortedvecDelPosDownRealRealIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealIntInt$handle() {
        return SCIPsortedvecDelPosDownRealRealIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealIntInt$address() {
        return SCIPsortedvecDelPosDownRealRealIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealIntInt(double *realarray1, double *realarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealIntInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealIntInt", realarray1, realarray2, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealRealInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealRealInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealRealInt$descriptor() {
        return SCIPsortedvecDelPosDownRealRealRealInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealRealInt$handle() {
        return SCIPsortedvecDelPosDownRealRealRealInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealRealInt$address() {
        return SCIPsortedvecDelPosDownRealRealRealInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealInt(double *realarray1, double *realarray2, double *realarray3, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealRealInt(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealRealInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealRealInt", realarray1, realarray2, realarray3, intarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealRealPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealRealPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealRealPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealRealRealPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealRealPtr$handle() {
        return SCIPsortedvecDelPosDownRealRealRealPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealRealPtr$address() {
        return SCIPsortedvecDelPosDownRealRealRealPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealPtr(double *realarray1, double *realarray2, double *realarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealRealPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealRealPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealRealPtr", realarray1, realarray2, realarray3, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealRealBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealRealBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealRealBoolPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealRealRealBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealRealBoolPtr$handle() {
        return SCIPsortedvecDelPosDownRealRealRealBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealRealBoolPtr$address() {
        return SCIPsortedvecDelPosDownRealRealRealBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealRealBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealRealBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealRealBoolPtr", realarray1, realarray2, realarray3, boolarray, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr$descriptor() {
        return SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr$handle() {
        return SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr$address() {
        return SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr(double *realarray1, double *realarray2, double *realarray3, unsigned int *boolarray1, unsigned int *boolarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr(MemorySegment realarray1, MemorySegment realarray2, MemorySegment realarray3, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownRealRealRealBoolBoolPtr", realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, pos, len);
            }
            mh$.invokeExact(realarray1, realarray2, realarray3, boolarray1, boolarray2, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInt(int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownInt$descriptor() {
        return SCIPsortedvecDelPosDownInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInt(int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownInt$handle() {
        return SCIPsortedvecDelPosDownInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInt(int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownInt$address() {
        return SCIPsortedvecDelPosDownInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownInt(int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownInt(MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownInt", intarray, pos, len);
            }
            mh$.invokeExact(intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntInt$descriptor() {
        return SCIPsortedvecDelPosDownIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntInt$handle() {
        return SCIPsortedvecDelPosDownIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntInt$address() {
        return SCIPsortedvecDelPosDownIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntInt(int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntInt(MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntInt", intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntReal$descriptor() {
        return SCIPsortedvecDelPosDownIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntReal$handle() {
        return SCIPsortedvecDelPosDownIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntReal$address() {
        return SCIPsortedvecDelPosDownIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntReal(int *intarray, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntReal(MemorySegment intarray, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntReal", intarray, realarray, pos, len);
            }
            mh$.invokeExact(intarray, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntIntInt$descriptor() {
        return SCIPsortedvecDelPosDownIntIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntIntInt$handle() {
        return SCIPsortedvecDelPosDownIntIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntIntInt$address() {
        return SCIPsortedvecDelPosDownIntIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntInt(int *intarray1, int *intarray2, int *intarray3, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntIntInt(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntIntInt", intarray1, intarray2, intarray3, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntIntLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntIntLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntIntLong$descriptor() {
        return SCIPsortedvecDelPosDownIntIntLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntIntLong$handle() {
        return SCIPsortedvecDelPosDownIntIntLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntIntLong$address() {
        return SCIPsortedvecDelPosDownIntIntLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntLong(int *intarray1, int *intarray2, long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntIntLong(MemorySegment intarray1, MemorySegment intarray2, MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntIntLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntIntLong", intarray1, intarray2, longarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntIntPtr$descriptor() {
        return SCIPsortedvecDelPosDownIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntIntPtr$handle() {
        return SCIPsortedvecDelPosDownIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntIntPtr$address() {
        return SCIPsortedvecDelPosDownIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntPtr(int *intarray1, int *intarray2, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntIntPtr", intarray1, intarray2, ptrarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntIntReal$descriptor() {
        return SCIPsortedvecDelPosDownIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntIntReal$handle() {
        return SCIPsortedvecDelPosDownIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntIntReal$address() {
        return SCIPsortedvecDelPosDownIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntReal(int *intarray1, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntIntReal", intarray1, intarray2, realarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntPtr$descriptor() {
        return SCIPsortedvecDelPosDownIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntPtr$handle() {
        return SCIPsortedvecDelPosDownIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntPtr$address() {
        return SCIPsortedvecDelPosDownIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtr(int *intarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntPtr(MemorySegment intarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntPtr", intarray, ptrarray, pos, len);
            }
            mh$.invokeExact(intarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntIntIntPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntIntIntPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntIntIntPtr$descriptor() {
        return SCIPsortedvecDelPosDownIntIntIntPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntIntIntPtr$handle() {
        return SCIPsortedvecDelPosDownIntIntIntPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntIntIntPtr$address() {
        return SCIPsortedvecDelPosDownIntIntIntPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntPtr(int *intarray1, int *intarray2, int *intarray3, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntIntIntPtr(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntIntIntPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntIntIntPtr", intarray1, intarray2, intarray3, ptrarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntIntIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntIntIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntIntIntReal$descriptor() {
        return SCIPsortedvecDelPosDownIntIntIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntIntIntReal$handle() {
        return SCIPsortedvecDelPosDownIntIntIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntIntIntReal$address() {
        return SCIPsortedvecDelPosDownIntIntIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntIntIntReal(int *intarray1, int *intarray2, int *intarray3, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntIntIntReal(MemorySegment intarray1, MemorySegment intarray2, MemorySegment intarray3, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntIntIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntIntIntReal", intarray1, intarray2, intarray3, realarray, pos, len);
            }
            mh$.invokeExact(intarray1, intarray2, intarray3, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntPtrIntReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntPtrIntReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntPtrIntReal$descriptor() {
        return SCIPsortedvecDelPosDownIntPtrIntReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntPtrIntReal$handle() {
        return SCIPsortedvecDelPosDownIntPtrIntReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntPtrIntReal$address() {
        return SCIPsortedvecDelPosDownIntPtrIntReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntReal(int *intarray1, void **ptrarray, int *intarray2, double *realarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntPtrIntReal(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment realarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntPtrIntReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntPtrIntReal", intarray1, ptrarray, intarray2, realarray, pos, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, realarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLong(long long *longarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLong$descriptor() {
        return SCIPsortedvecDelPosDownLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLong(long long *longarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLong$handle() {
        return SCIPsortedvecDelPosDownLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLong(long long *longarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLong$address() {
        return SCIPsortedvecDelPosDownLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLong(long long *longarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLong(MemorySegment longarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLong", longarray, pos, len);
            }
            mh$.invokeExact(longarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtr$descriptor() {
        return SCIPsortedvecDelPosDownLongPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtr$handle() {
        return SCIPsortedvecDelPosDownLongPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtr$address() {
        return SCIPsortedvecDelPosDownLongPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtr(long long *longarray, void **ptrarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtr(MemorySegment longarray, MemorySegment ptrarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtr", longarray, ptrarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrInt$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrInt$handle() {
        return SCIPsortedvecDelPosDownLongPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrInt$address() {
        return SCIPsortedvecDelPosDownLongPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrInt(long long *longarray, void **ptrarray, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrInt(MemorySegment longarray, MemorySegment ptrarray, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrInt", longarray, ptrarray, intarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrRealBool$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrRealBool$handle() {
        return SCIPsortedvecDelPosDownLongPtrRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrRealBool$address() {
        return SCIPsortedvecDelPosDownLongPtrRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealBool(long long *longarray, void **ptrarray, double *realarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment boolarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrRealBool", longarray, ptrarray, realarray, boolarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, boolarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrRealRealBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrRealRealBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrRealRealBool$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrRealRealBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrRealRealBool$handle() {
        return SCIPsortedvecDelPosDownLongPtrRealRealBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrRealRealBool$address() {
        return SCIPsortedvecDelPosDownLongPtrRealRealBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrRealRealBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment boolarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrRealRealBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrRealRealBool", longarray, ptrarray, realarray, realarray2, boolarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, boolarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrRealRealIntBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrRealRealIntBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrRealRealIntBool$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrRealRealIntBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrRealRealIntBool$handle() {
        return SCIPsortedvecDelPosDownLongPtrRealRealIntBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrRealRealIntBool$address() {
        return SCIPsortedvecDelPosDownLongPtrRealRealIntBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrRealRealIntBool(long long *longarray, void **ptrarray, double *realarray, double *realarray2, int *intarray, unsigned int *boolarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrRealRealIntBool(MemorySegment longarray, MemorySegment ptrarray, MemorySegment realarray, MemorySegment realarray2, MemorySegment intarray, MemorySegment boolarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrRealRealIntBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrRealRealIntBool", longarray, ptrarray, realarray, realarray2, intarray, boolarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray, realarray, realarray2, intarray, boolarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrPtrInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrPtrInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrPtrInt$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrPtrInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrPtrInt$handle() {
        return SCIPsortedvecDelPosDownLongPtrPtrInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrPtrInt$address() {
        return SCIPsortedvecDelPosDownLongPtrPtrInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrPtrInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrPtrInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrPtrInt", longarray, ptrarray1, ptrarray2, intarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrPtrIntInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrPtrIntInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrPtrIntInt$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrPtrIntInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrPtrIntInt$handle() {
        return SCIPsortedvecDelPosDownLongPtrPtrIntInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrPtrIntInt$address() {
        return SCIPsortedvecDelPosDownLongPtrPtrIntInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrIntInt(long long *longarray, void **ptrarray1, void **ptrarray2, int *intarray1, int *intarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrPtrIntInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment intarray1, MemorySegment intarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrPtrIntInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrPtrIntInt", longarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, intarray1, intarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownLongPtrPtrBoolInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownLongPtrPtrBoolInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownLongPtrPtrBoolInt$descriptor() {
        return SCIPsortedvecDelPosDownLongPtrPtrBoolInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownLongPtrPtrBoolInt$handle() {
        return SCIPsortedvecDelPosDownLongPtrPtrBoolInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownLongPtrPtrBoolInt$address() {
        return SCIPsortedvecDelPosDownLongPtrPtrBoolInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownLongPtrPtrBoolInt(long long *longarray, void **ptrarray1, void **ptrarray2, unsigned int *boolarray, int *intarray, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownLongPtrPtrBoolInt(MemorySegment longarray, MemorySegment ptrarray1, MemorySegment ptrarray2, MemorySegment boolarray, MemorySegment intarray, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownLongPtrPtrBoolInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownLongPtrPtrBoolInt", longarray, ptrarray1, ptrarray2, boolarray, intarray, pos, len);
            }
            mh$.invokeExact(longarray, ptrarray1, ptrarray2, boolarray, intarray, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecDelPosDownPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownPtrIntIntBoolBool$handle() {
        return SCIPsortedvecDelPosDownPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownPtrIntIntBoolBool$address() {
        return SCIPsortedvecDelPosDownPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownPtrIntIntBoolBool(void **ptrarray, int *intarray1, int *intarray2, unsigned int *boolarray1, unsigned int *boolarray2, int (*ptrcomp)(void *, void *), int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownPtrIntIntBoolBool(MemorySegment ptrarray, MemorySegment intarray1, MemorySegment intarray2, MemorySegment boolarray1, MemorySegment boolarray2, MemorySegment ptrcomp, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownPtrIntIntBoolBool", ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, pos, len);
            }
            mh$.invokeExact(ptrarray, intarray1, intarray2, boolarray1, boolarray2, ptrcomp, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecDelPosDownIntPtrIntIntBoolBool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecDelPosDownIntPtrIntIntBoolBool");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecDelPosDownIntPtrIntIntBoolBool$descriptor() {
        return SCIPsortedvecDelPosDownIntPtrIntIntBoolBool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static MethodHandle SCIPsortedvecDelPosDownIntPtrIntIntBoolBool$handle() {
        return SCIPsortedvecDelPosDownIntPtrIntIntBoolBool.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static MemorySegment SCIPsortedvecDelPosDownIntPtrIntIntBoolBool$address() {
        return SCIPsortedvecDelPosDownIntPtrIntIntBoolBool.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsortedvecDelPosDownIntPtrIntIntBoolBool(int *intarray1, void **ptrarray, int *intarray2, int *intarray3, unsigned int *boolarray1, unsigned int *boolarray2, int pos, int *len)
     * }
     */
    public static void SCIPsortedvecDelPosDownIntPtrIntIntBoolBool(MemorySegment intarray1, MemorySegment ptrarray, MemorySegment intarray2, MemorySegment intarray3, MemorySegment boolarray1, MemorySegment boolarray2, int pos, MemorySegment len) {
        var mh$ = SCIPsortedvecDelPosDownIntPtrIntIntBoolBool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecDelPosDownIntPtrIntIntBoolBool", intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, pos, len);
            }
            mh$.invokeExact(intarray1, ptrarray, intarray2, intarray3, boolarray1, boolarray2, pos, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindInd$descriptor() {
        return SCIPsortedvecFindInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindInd$handle() {
        return SCIPsortedvecFindInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindInd$address() {
        return SCIPsortedvecFindInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindInd", indarray, indcomp, dataptr, val, len, pos);
            }
            return (int)mh$.invokeExact(indarray, indcomp, dataptr, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindPtr$descriptor() {
        return SCIPsortedvecFindPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindPtr$handle() {
        return SCIPsortedvecFindPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindPtr$address() {
        return SCIPsortedvecFindPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindPtr(MemorySegment ptrarray, MemorySegment ptrcomp, MemorySegment val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindPtr", ptrarray, ptrcomp, val, len, pos);
            }
            return (int)mh$.invokeExact(ptrarray, ptrcomp, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindReal$descriptor() {
        return SCIPsortedvecFindReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindReal$handle() {
        return SCIPsortedvecFindReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindReal$address() {
        return SCIPsortedvecFindReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindReal(MemorySegment realarray, double val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindReal", realarray, val, len, pos);
            }
            return (int)mh$.invokeExact(realarray, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindInt$descriptor() {
        return SCIPsortedvecFindInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindInt$handle() {
        return SCIPsortedvecFindInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindInt$address() {
        return SCIPsortedvecFindInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindInt(MemorySegment intarray, int val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindInt", intarray, val, len, pos);
            }
            return (int)mh$.invokeExact(intarray, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindLong$descriptor() {
        return SCIPsortedvecFindLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindLong$handle() {
        return SCIPsortedvecFindLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindLong$address() {
        return SCIPsortedvecFindLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindLong(MemorySegment longarray, long val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindLong", longarray, val, len, pos);
            }
            return (int)mh$.invokeExact(longarray, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindDownInd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindDownInd");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindDownInd$descriptor() {
        return SCIPsortedvecFindDownInd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindDownInd$handle() {
        return SCIPsortedvecFindDownInd.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindDownInd$address() {
        return SCIPsortedvecFindDownInd.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInd(int *indarray, int (*indcomp)(void *, int, int), void *dataptr, int val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindDownInd(MemorySegment indarray, MemorySegment indcomp, MemorySegment dataptr, int val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindDownInd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindDownInd", indarray, indcomp, dataptr, val, len, pos);
            }
            return (int)mh$.invokeExact(indarray, indcomp, dataptr, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindDownPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindDownPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindDownPtr$descriptor() {
        return SCIPsortedvecFindDownPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindDownPtr$handle() {
        return SCIPsortedvecFindDownPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindDownPtr$address() {
        return SCIPsortedvecFindDownPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownPtr(void **ptrarray, int (*ptrcomp)(void *, void *), void *val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindDownPtr(MemorySegment ptrarray, MemorySegment ptrcomp, MemorySegment val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindDownPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindDownPtr", ptrarray, ptrcomp, val, len, pos);
            }
            return (int)mh$.invokeExact(ptrarray, ptrcomp, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindDownReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindDownReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindDownReal$descriptor() {
        return SCIPsortedvecFindDownReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindDownReal$handle() {
        return SCIPsortedvecFindDownReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindDownReal$address() {
        return SCIPsortedvecFindDownReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownReal(double *realarray, double val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindDownReal(MemorySegment realarray, double val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindDownReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindDownReal", realarray, val, len, pos);
            }
            return (int)mh$.invokeExact(realarray, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindDownInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindDownInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindDownInt$descriptor() {
        return SCIPsortedvecFindDownInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindDownInt$handle() {
        return SCIPsortedvecFindDownInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindDownInt$address() {
        return SCIPsortedvecFindDownInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownInt(int *intarray, int val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindDownInt(MemorySegment intarray, int val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindDownInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindDownInt", intarray, val, len, pos);
            }
            return (int)mh$.invokeExact(intarray, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsortedvecFindDownLong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_LONG_LONG,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsortedvecFindDownLong");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPsortedvecFindDownLong$descriptor() {
        return SCIPsortedvecFindDownLong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static MethodHandle SCIPsortedvecFindDownLong$handle() {
        return SCIPsortedvecFindDownLong.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static MemorySegment SCIPsortedvecFindDownLong$address() {
        return SCIPsortedvecFindDownLong.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsortedvecFindDownLong(long long *longarray, long long val, int len, int *pos)
     * }
     */
    public static int SCIPsortedvecFindDownLong(MemorySegment longarray, long val, int len, MemorySegment pos) {
        var mh$ = SCIPsortedvecFindDownLong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsortedvecFindDownLong", longarray, val, len, pos);
            }
            return (int)mh$.invokeExact(longarray, val, len, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPconsGetRhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPconsGetRhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPconsGetRhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPconsGetRhs$descriptor() {
        return SCIPconsGetRhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPconsGetRhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPconsGetRhs$handle() {
        return SCIPconsGetRhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPconsGetRhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPconsGetRhs$address() {
        return SCIPconsGetRhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPconsGetRhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static double SCIPconsGetRhs(MemorySegment scip, MemorySegment cons, MemorySegment success) {
        var mh$ = SCIPconsGetRhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPconsGetRhs", scip, cons, success);
            }
            return (double)mh$.invokeExact(scip, cons, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPconsGetLhs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPconsGetLhs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPconsGetLhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPconsGetLhs$descriptor() {
        return SCIPconsGetLhs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPconsGetLhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPconsGetLhs$handle() {
        return SCIPconsGetLhs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPconsGetLhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPconsGetLhs$address() {
        return SCIPconsGetLhs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPconsGetLhs(SCIP *scip, SCIP_CONS *cons, unsigned int *success)
     * }
     */
    public static double SCIPconsGetLhs(MemorySegment scip, MemorySegment cons, MemorySegment success) {
        var mh$ = SCIPconsGetLhs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPconsGetLhs", scip, cons, success);
            }
            return (double)mh$.invokeExact(scip, cons, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgetConsVals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgetConsVals");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetConsVals(SCIP *scip, SCIP_CONS *cons, double *vals, int varssize, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPgetConsVals$descriptor() {
        return SCIPgetConsVals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetConsVals(SCIP *scip, SCIP_CONS *cons, double *vals, int varssize, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPgetConsVals$handle() {
        return SCIPgetConsVals.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetConsVals(SCIP *scip, SCIP_CONS *cons, double *vals, int varssize, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPgetConsVals$address() {
        return SCIPgetConsVals.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetConsVals(SCIP *scip, SCIP_CONS *cons, double *vals, int varssize, unsigned int *success)
     * }
     */
    public static int SCIPgetConsVals(MemorySegment scip, MemorySegment cons, MemorySegment vals, int varssize, MemorySegment success) {
        var mh$ = SCIPgetConsVals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgetConsVals", scip, cons, vals, varssize, success);
            }
            return (int)mh$.invokeExact(scip, cons, vals, varssize, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPconsGetDualfarkas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPconsGetDualfarkas");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPconsGetDualfarkas(SCIP *scip, SCIP_CONS *cons, double *dualfarkas, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPconsGetDualfarkas$descriptor() {
        return SCIPconsGetDualfarkas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPconsGetDualfarkas(SCIP *scip, SCIP_CONS *cons, double *dualfarkas, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPconsGetDualfarkas$handle() {
        return SCIPconsGetDualfarkas.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPconsGetDualfarkas(SCIP *scip, SCIP_CONS *cons, double *dualfarkas, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPconsGetDualfarkas$address() {
        return SCIPconsGetDualfarkas.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPconsGetDualfarkas(SCIP *scip, SCIP_CONS *cons, double *dualfarkas, unsigned int *success)
     * }
     */
    public static void SCIPconsGetDualfarkas(MemorySegment scip, MemorySegment cons, MemorySegment dualfarkas, MemorySegment success) {
        var mh$ = SCIPconsGetDualfarkas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPconsGetDualfarkas", scip, cons, dualfarkas, success);
            }
            mh$.invokeExact(scip, cons, dualfarkas, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPconsGetDualsol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPconsGetDualsol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPconsGetDualsol(SCIP *scip, SCIP_CONS *cons, double *dualsol, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPconsGetDualsol$descriptor() {
        return SCIPconsGetDualsol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPconsGetDualsol(SCIP *scip, SCIP_CONS *cons, double *dualsol, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPconsGetDualsol$handle() {
        return SCIPconsGetDualsol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPconsGetDualsol(SCIP *scip, SCIP_CONS *cons, double *dualsol, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPconsGetDualsol$address() {
        return SCIPconsGetDualsol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPconsGetDualsol(SCIP *scip, SCIP_CONS *cons, double *dualsol, unsigned int *success)
     * }
     */
    public static void SCIPconsGetDualsol(MemorySegment scip, MemorySegment cons, MemorySegment dualsol, MemorySegment success) {
        var mh$ = SCIPconsGetDualsol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPconsGetDualsol", scip, cons, dualsol, success);
            }
            mh$.invokeExact(scip, cons, dualsol, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPconsGetRow {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPconsGetRow");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_ROW *SCIPconsGetRow(SCIP *scip, SCIP_CONS *cons)
     * }
     */
    public static FunctionDescriptor SCIPconsGetRow$descriptor() {
        return SCIPconsGetRow.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_ROW *SCIPconsGetRow(SCIP *scip, SCIP_CONS *cons)
     * }
     */
    public static MethodHandle SCIPconsGetRow$handle() {
        return SCIPconsGetRow.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_ROW *SCIPconsGetRow(SCIP *scip, SCIP_CONS *cons)
     * }
     */
    public static MemorySegment SCIPconsGetRow$address() {
        return SCIPconsGetRow.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_ROW *SCIPconsGetRow(SCIP *scip, SCIP_CONS *cons)
     * }
     */
    public static MemorySegment SCIPconsGetRow(MemorySegment scip, MemorySegment cons) {
        var mh$ = SCIPconsGetRow.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPconsGetRow", scip, cons);
            }
            return (MemorySegment)mh$.invokeExact(scip, cons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPconsAddCoef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPconsAddCoef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPconsAddCoef(SCIP *scip, SCIP_CONS *cons, SCIP_VAR *var, double val)
     * }
     */
    public static FunctionDescriptor SCIPconsAddCoef$descriptor() {
        return SCIPconsAddCoef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPconsAddCoef(SCIP *scip, SCIP_CONS *cons, SCIP_VAR *var, double val)
     * }
     */
    public static MethodHandle SCIPconsAddCoef$handle() {
        return SCIPconsAddCoef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPconsAddCoef(SCIP *scip, SCIP_CONS *cons, SCIP_VAR *var, double val)
     * }
     */
    public static MemorySegment SCIPconsAddCoef$address() {
        return SCIPconsAddCoef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPconsAddCoef(SCIP *scip, SCIP_CONS *cons, SCIP_VAR *var, double val)
     * }
     */
    public static int SCIPconsAddCoef(MemorySegment scip, MemorySegment cons, MemorySegment var_, double val) {
        var mh$ = SCIPconsAddCoef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPconsAddCoef", scip, cons, var_, val);
            }
            return (int)mh$.invokeExact(scip, cons, var_, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcreateRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcreateRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcreateRowprep(SCIP *scip, SCIP_ROWPREP **rowprep, SCIP_SIDETYPE sidetype, unsigned int local)
     * }
     */
    public static FunctionDescriptor SCIPcreateRowprep$descriptor() {
        return SCIPcreateRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcreateRowprep(SCIP *scip, SCIP_ROWPREP **rowprep, SCIP_SIDETYPE sidetype, unsigned int local)
     * }
     */
    public static MethodHandle SCIPcreateRowprep$handle() {
        return SCIPcreateRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcreateRowprep(SCIP *scip, SCIP_ROWPREP **rowprep, SCIP_SIDETYPE sidetype, unsigned int local)
     * }
     */
    public static MemorySegment SCIPcreateRowprep$address() {
        return SCIPcreateRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcreateRowprep(SCIP *scip, SCIP_ROWPREP **rowprep, SCIP_SIDETYPE sidetype, unsigned int local)
     * }
     */
    public static int SCIPcreateRowprep(MemorySegment scip, MemorySegment rowprep, int sidetype, int local) {
        var mh$ = SCIPcreateRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcreateRowprep", scip, rowprep, sidetype, local);
            }
            return (int)mh$.invokeExact(scip, rowprep, sidetype, local);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPfreeRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPfreeRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPfreeRowprep(SCIP *scip, SCIP_ROWPREP **rowprep)
     * }
     */
    public static FunctionDescriptor SCIPfreeRowprep$descriptor() {
        return SCIPfreeRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPfreeRowprep(SCIP *scip, SCIP_ROWPREP **rowprep)
     * }
     */
    public static MethodHandle SCIPfreeRowprep$handle() {
        return SCIPfreeRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPfreeRowprep(SCIP *scip, SCIP_ROWPREP **rowprep)
     * }
     */
    public static MemorySegment SCIPfreeRowprep$address() {
        return SCIPfreeRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPfreeRowprep(SCIP *scip, SCIP_ROWPREP **rowprep)
     * }
     */
    public static void SCIPfreeRowprep(MemorySegment scip, MemorySegment rowprep) {
        var mh$ = SCIPfreeRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPfreeRowprep", scip, rowprep);
            }
            mh$.invokeExact(scip, rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcopyRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcopyRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcopyRowprep(SCIP *scip, SCIP_ROWPREP **target, SCIP_ROWPREP *source)
     * }
     */
    public static FunctionDescriptor SCIPcopyRowprep$descriptor() {
        return SCIPcopyRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcopyRowprep(SCIP *scip, SCIP_ROWPREP **target, SCIP_ROWPREP *source)
     * }
     */
    public static MethodHandle SCIPcopyRowprep$handle() {
        return SCIPcopyRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcopyRowprep(SCIP *scip, SCIP_ROWPREP **target, SCIP_ROWPREP *source)
     * }
     */
    public static MemorySegment SCIPcopyRowprep$address() {
        return SCIPcopyRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcopyRowprep(SCIP *scip, SCIP_ROWPREP **target, SCIP_ROWPREP *source)
     * }
     */
    public static int SCIPcopyRowprep(MemorySegment scip, MemorySegment target, MemorySegment source) {
        var mh$ = SCIPcopyRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcopyRowprep", scip, target, source);
            }
            return (int)mh$.invokeExact(scip, target, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetNVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetNVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwprepGetNVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetNVars$descriptor() {
        return SCIProwprepGetNVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwprepGetNVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetNVars$handle() {
        return SCIProwprepGetNVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwprepGetNVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetNVars$address() {
        return SCIProwprepGetNVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwprepGetNVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static int SCIProwprepGetNVars(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetNVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetNVars", rowprep);
            }
            return (int)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetVars$descriptor() {
        return SCIProwprepGetVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetVars$handle() {
        return SCIProwprepGetVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetVars$address() {
        return SCIProwprepGetVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetVars(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetVars", rowprep);
            }
            return (MemorySegment)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetCoefs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetCoefs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double *SCIProwprepGetCoefs(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetCoefs$descriptor() {
        return SCIProwprepGetCoefs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double *SCIProwprepGetCoefs(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetCoefs$handle() {
        return SCIProwprepGetCoefs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double *SCIProwprepGetCoefs(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetCoefs$address() {
        return SCIProwprepGetCoefs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double *SCIProwprepGetCoefs(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetCoefs(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetCoefs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetCoefs", rowprep);
            }
            return (MemorySegment)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetSide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetSide");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIProwprepGetSide(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetSide$descriptor() {
        return SCIProwprepGetSide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIProwprepGetSide(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetSide$handle() {
        return SCIProwprepGetSide.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIProwprepGetSide(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetSide$address() {
        return SCIProwprepGetSide.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIProwprepGetSide(SCIP_ROWPREP *rowprep)
     * }
     */
    public static double SCIProwprepGetSide(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetSide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetSide", rowprep);
            }
            return (double)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetSidetype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetSidetype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_SIDETYPE SCIProwprepGetSidetype(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetSidetype$descriptor() {
        return SCIProwprepGetSidetype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_SIDETYPE SCIProwprepGetSidetype(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetSidetype$handle() {
        return SCIProwprepGetSidetype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_SIDETYPE SCIProwprepGetSidetype(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetSidetype$address() {
        return SCIProwprepGetSidetype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_SIDETYPE SCIProwprepGetSidetype(SCIP_ROWPREP *rowprep)
     * }
     */
    public static int SCIProwprepGetSidetype(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetSidetype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetSidetype", rowprep);
            }
            return (int)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepIsLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepIsLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIProwprepIsLocal(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepIsLocal$descriptor() {
        return SCIProwprepIsLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIProwprepIsLocal(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepIsLocal$handle() {
        return SCIProwprepIsLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIProwprepIsLocal(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepIsLocal$address() {
        return SCIProwprepIsLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIProwprepIsLocal(SCIP_ROWPREP *rowprep)
     * }
     */
    public static int SCIProwprepIsLocal(MemorySegment rowprep) {
        var mh$ = SCIProwprepIsLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepIsLocal", rowprep);
            }
            return (int)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetName {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetName");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * char *SCIProwprepGetName(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetName$descriptor() {
        return SCIProwprepGetName.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * char *SCIProwprepGetName(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetName$handle() {
        return SCIProwprepGetName.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * char *SCIProwprepGetName(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetName$address() {
        return SCIProwprepGetName.ADDR;
    }

    /**
     * {@snippet lang=c :
     * char *SCIProwprepGetName(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetName(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetName.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetName", rowprep);
            }
            return (MemorySegment)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetNModifiedVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetNModifiedVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIProwprepGetNModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetNModifiedVars$descriptor() {
        return SCIProwprepGetNModifiedVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIProwprepGetNModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetNModifiedVars$handle() {
        return SCIProwprepGetNModifiedVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIProwprepGetNModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetNModifiedVars$address() {
        return SCIProwprepGetNModifiedVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIProwprepGetNModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static int SCIProwprepGetNModifiedVars(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetNModifiedVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetNModifiedVars", rowprep);
            }
            return (int)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepGetModifiedVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepGetModifiedVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepGetModifiedVars$descriptor() {
        return SCIProwprepGetModifiedVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepGetModifiedVars$handle() {
        return SCIProwprepGetModifiedVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetModifiedVars$address() {
        return SCIProwprepGetModifiedVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR **SCIProwprepGetModifiedVars(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepGetModifiedVars(MemorySegment rowprep) {
        var mh$ = SCIProwprepGetModifiedVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepGetModifiedVars", rowprep);
            }
            return (MemorySegment)mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepReset(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepReset$descriptor() {
        return SCIProwprepReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepReset(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepReset$handle() {
        return SCIProwprepReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepReset(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepReset$address() {
        return SCIProwprepReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepReset(SCIP_ROWPREP *rowprep)
     * }
     */
    public static void SCIProwprepReset(MemorySegment rowprep) {
        var mh$ = SCIProwprepReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepReset", rowprep);
            }
            mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepSetCoef {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepSetCoef");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepSetCoef(SCIP_ROWPREP *rowprep, int idx, double newcoef)
     * }
     */
    public static FunctionDescriptor SCIProwprepSetCoef$descriptor() {
        return SCIProwprepSetCoef.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepSetCoef(SCIP_ROWPREP *rowprep, int idx, double newcoef)
     * }
     */
    public static MethodHandle SCIProwprepSetCoef$handle() {
        return SCIProwprepSetCoef.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepSetCoef(SCIP_ROWPREP *rowprep, int idx, double newcoef)
     * }
     */
    public static MemorySegment SCIProwprepSetCoef$address() {
        return SCIProwprepSetCoef.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepSetCoef(SCIP_ROWPREP *rowprep, int idx, double newcoef)
     * }
     */
    public static void SCIProwprepSetCoef(MemorySegment rowprep, int idx, double newcoef) {
        var mh$ = SCIProwprepSetCoef.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepSetCoef", rowprep, idx, newcoef);
            }
            mh$.invokeExact(rowprep, idx, newcoef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepAddSide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepAddSide");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepAddSide(SCIP_ROWPREP *rowprep, double side)
     * }
     */
    public static FunctionDescriptor SCIProwprepAddSide$descriptor() {
        return SCIProwprepAddSide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepAddSide(SCIP_ROWPREP *rowprep, double side)
     * }
     */
    public static MethodHandle SCIProwprepAddSide$handle() {
        return SCIProwprepAddSide.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepAddSide(SCIP_ROWPREP *rowprep, double side)
     * }
     */
    public static MemorySegment SCIProwprepAddSide$address() {
        return SCIProwprepAddSide.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepAddSide(SCIP_ROWPREP *rowprep, double side)
     * }
     */
    public static void SCIProwprepAddSide(MemorySegment rowprep, double side) {
        var mh$ = SCIProwprepAddSide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepAddSide", rowprep, side);
            }
            mh$.invokeExact(rowprep, side);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepAddConstant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepAddConstant");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepAddConstant(SCIP_ROWPREP *rowprep, double constant)
     * }
     */
    public static FunctionDescriptor SCIProwprepAddConstant$descriptor() {
        return SCIProwprepAddConstant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepAddConstant(SCIP_ROWPREP *rowprep, double constant)
     * }
     */
    public static MethodHandle SCIProwprepAddConstant$handle() {
        return SCIProwprepAddConstant.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepAddConstant(SCIP_ROWPREP *rowprep, double constant)
     * }
     */
    public static MemorySegment SCIProwprepAddConstant$address() {
        return SCIProwprepAddConstant.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepAddConstant(SCIP_ROWPREP *rowprep, double constant)
     * }
     */
    public static void SCIProwprepAddConstant(MemorySegment rowprep, double constant) {
        var mh$ = SCIProwprepAddConstant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepAddConstant", rowprep, constant);
            }
            mh$.invokeExact(rowprep, constant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepSetSidetype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepSetSidetype");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepSetSidetype(SCIP_ROWPREP *rowprep, SCIP_SIDETYPE sidetype)
     * }
     */
    public static FunctionDescriptor SCIProwprepSetSidetype$descriptor() {
        return SCIProwprepSetSidetype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepSetSidetype(SCIP_ROWPREP *rowprep, SCIP_SIDETYPE sidetype)
     * }
     */
    public static MethodHandle SCIProwprepSetSidetype$handle() {
        return SCIProwprepSetSidetype.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepSetSidetype(SCIP_ROWPREP *rowprep, SCIP_SIDETYPE sidetype)
     * }
     */
    public static MemorySegment SCIProwprepSetSidetype$address() {
        return SCIProwprepSetSidetype.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepSetSidetype(SCIP_ROWPREP *rowprep, SCIP_SIDETYPE sidetype)
     * }
     */
    public static void SCIProwprepSetSidetype(MemorySegment rowprep, int sidetype) {
        var mh$ = SCIProwprepSetSidetype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepSetSidetype", rowprep, sidetype);
            }
            mh$.invokeExact(rowprep, sidetype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepSetLocal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepSetLocal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepSetLocal(SCIP_ROWPREP *rowprep, unsigned int islocal)
     * }
     */
    public static FunctionDescriptor SCIProwprepSetLocal$descriptor() {
        return SCIProwprepSetLocal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepSetLocal(SCIP_ROWPREP *rowprep, unsigned int islocal)
     * }
     */
    public static MethodHandle SCIProwprepSetLocal$handle() {
        return SCIProwprepSetLocal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepSetLocal(SCIP_ROWPREP *rowprep, unsigned int islocal)
     * }
     */
    public static MemorySegment SCIProwprepSetLocal$address() {
        return SCIProwprepSetLocal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepSetLocal(SCIP_ROWPREP *rowprep, unsigned int islocal)
     * }
     */
    public static void SCIProwprepSetLocal(MemorySegment rowprep, int islocal) {
        var mh$ = SCIProwprepSetLocal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepSetLocal", rowprep, islocal);
            }
            mh$.invokeExact(rowprep, islocal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIProwprepRecordModifications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIProwprepRecordModifications");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIProwprepRecordModifications(SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIProwprepRecordModifications$descriptor() {
        return SCIProwprepRecordModifications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIProwprepRecordModifications(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIProwprepRecordModifications$handle() {
        return SCIProwprepRecordModifications.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIProwprepRecordModifications(SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIProwprepRecordModifications$address() {
        return SCIProwprepRecordModifications.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIProwprepRecordModifications(SCIP_ROWPREP *rowprep)
     * }
     */
    public static void SCIProwprepRecordModifications(MemorySegment rowprep) {
        var mh$ = SCIProwprepRecordModifications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIProwprepRecordModifications", rowprep);
            }
            mh$.invokeExact(rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprintRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprintRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPprintRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPprintRowprep$descriptor() {
        return SCIPprintRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPprintRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, FILE *file)
     * }
     */
    public static MethodHandle SCIPprintRowprep$handle() {
        return SCIPprintRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPprintRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, FILE *file)
     * }
     */
    public static MemorySegment SCIPprintRowprep$address() {
        return SCIPprintRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPprintRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, FILE *file)
     * }
     */
    public static void SCIPprintRowprep(MemorySegment scip, MemorySegment rowprep, MemorySegment file) {
        var mh$ = SCIPprintRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprintRowprep", scip, rowprep, file);
            }
            mh$.invokeExact(scip, rowprep, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprintRowprepSol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprintRowprepSol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPprintRowprepSol(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPprintRowprepSol$descriptor() {
        return SCIPprintRowprepSol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPprintRowprepSol(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, FILE *file)
     * }
     */
    public static MethodHandle SCIPprintRowprepSol$handle() {
        return SCIPprintRowprepSol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPprintRowprepSol(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, FILE *file)
     * }
     */
    public static MemorySegment SCIPprintRowprepSol$address() {
        return SCIPprintRowprepSol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPprintRowprepSol(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, FILE *file)
     * }
     */
    public static void SCIPprintRowprepSol(MemorySegment scip, MemorySegment rowprep, MemorySegment sol, MemorySegment file) {
        var mh$ = SCIPprintRowprepSol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprintRowprepSol", scip, rowprep, sol, file);
            }
            mh$.invokeExact(scip, rowprep, sol, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPensureRowprepSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPensureRowprepSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPensureRowprepSize(SCIP *scip, SCIP_ROWPREP *rowprep, int size)
     * }
     */
    public static FunctionDescriptor SCIPensureRowprepSize$descriptor() {
        return SCIPensureRowprepSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPensureRowprepSize(SCIP *scip, SCIP_ROWPREP *rowprep, int size)
     * }
     */
    public static MethodHandle SCIPensureRowprepSize$handle() {
        return SCIPensureRowprepSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPensureRowprepSize(SCIP *scip, SCIP_ROWPREP *rowprep, int size)
     * }
     */
    public static MemorySegment SCIPensureRowprepSize$address() {
        return SCIPensureRowprepSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPensureRowprepSize(SCIP *scip, SCIP_ROWPREP *rowprep, int size)
     * }
     */
    public static int SCIPensureRowprepSize(MemorySegment scip, MemorySegment rowprep, int size) {
        var mh$ = SCIPensureRowprepSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPensureRowprepSize", scip, rowprep, size);
            }
            return (int)mh$.invokeExact(scip, rowprep, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPaddRowprepTerm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPaddRowprepTerm");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerm(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_VAR *var, double coef)
     * }
     */
    public static FunctionDescriptor SCIPaddRowprepTerm$descriptor() {
        return SCIPaddRowprepTerm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerm(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_VAR *var, double coef)
     * }
     */
    public static MethodHandle SCIPaddRowprepTerm$handle() {
        return SCIPaddRowprepTerm.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerm(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_VAR *var, double coef)
     * }
     */
    public static MemorySegment SCIPaddRowprepTerm$address() {
        return SCIPaddRowprepTerm.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerm(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_VAR *var, double coef)
     * }
     */
    public static int SCIPaddRowprepTerm(MemorySegment scip, MemorySegment rowprep, MemorySegment var_, double coef) {
        var mh$ = SCIPaddRowprepTerm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPaddRowprepTerm", scip, rowprep, var_, coef);
            }
            return (int)mh$.invokeExact(scip, rowprep, var_, coef);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPaddRowprepTerms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPaddRowprepTerms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep, int nvars, SCIP_VAR **vars, double *coefs)
     * }
     */
    public static FunctionDescriptor SCIPaddRowprepTerms$descriptor() {
        return SCIPaddRowprepTerms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep, int nvars, SCIP_VAR **vars, double *coefs)
     * }
     */
    public static MethodHandle SCIPaddRowprepTerms$handle() {
        return SCIPaddRowprepTerms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep, int nvars, SCIP_VAR **vars, double *coefs)
     * }
     */
    public static MemorySegment SCIPaddRowprepTerms$address() {
        return SCIPaddRowprepTerms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPaddRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep, int nvars, SCIP_VAR **vars, double *coefs)
     * }
     */
    public static int SCIPaddRowprepTerms(MemorySegment scip, MemorySegment rowprep, int nvars, MemorySegment vars, MemorySegment coefs) {
        var mh$ = SCIPaddRowprepTerms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPaddRowprepTerms", scip, rowprep, nvars, vars, coefs);
            }
            return (int)mh$.invokeExact(scip, rowprep, nvars, vars, coefs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgetRowprepViolation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgetRowprepViolation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPgetRowprepViolation(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, unsigned int *reliable)
     * }
     */
    public static FunctionDescriptor SCIPgetRowprepViolation$descriptor() {
        return SCIPgetRowprepViolation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPgetRowprepViolation(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, unsigned int *reliable)
     * }
     */
    public static MethodHandle SCIPgetRowprepViolation$handle() {
        return SCIPgetRowprepViolation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPgetRowprepViolation(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, unsigned int *reliable)
     * }
     */
    public static MemorySegment SCIPgetRowprepViolation$address() {
        return SCIPgetRowprepViolation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPgetRowprepViolation(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, unsigned int *reliable)
     * }
     */
    public static double SCIPgetRowprepViolation(MemorySegment scip, MemorySegment rowprep, MemorySegment sol, MemorySegment reliable) {
        var mh$ = SCIPgetRowprepViolation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgetRowprepViolation", scip, rowprep, sol, reliable);
            }
            return (double)mh$.invokeExact(scip, rowprep, sol, reliable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPisRowprepViolationReliable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPisRowprepViolationReliable");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPisRowprepViolationReliable(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol)
     * }
     */
    public static FunctionDescriptor SCIPisRowprepViolationReliable$descriptor() {
        return SCIPisRowprepViolationReliable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPisRowprepViolationReliable(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol)
     * }
     */
    public static MethodHandle SCIPisRowprepViolationReliable$handle() {
        return SCIPisRowprepViolationReliable.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPisRowprepViolationReliable(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol)
     * }
     */
    public static MemorySegment SCIPisRowprepViolationReliable$address() {
        return SCIPisRowprepViolationReliable.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPisRowprepViolationReliable(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol)
     * }
     */
    public static int SCIPisRowprepViolationReliable(MemorySegment scip, MemorySegment rowprep, MemorySegment sol) {
        var mh$ = SCIPisRowprepViolationReliable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPisRowprepViolationReliable", scip, rowprep, sol);
            }
            return (int)mh$.invokeExact(scip, rowprep, sol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmergeRowprepTerms {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmergeRowprepTerms");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmergeRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep)
     * }
     */
    public static FunctionDescriptor SCIPmergeRowprepTerms$descriptor() {
        return SCIPmergeRowprepTerms.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmergeRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep)
     * }
     */
    public static MethodHandle SCIPmergeRowprepTerms$handle() {
        return SCIPmergeRowprepTerms.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmergeRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep)
     * }
     */
    public static MemorySegment SCIPmergeRowprepTerms$address() {
        return SCIPmergeRowprepTerms.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmergeRowprepTerms(SCIP *scip, SCIP_ROWPREP *rowprep)
     * }
     */
    public static void SCIPmergeRowprepTerms(MemorySegment scip, MemorySegment rowprep) {
        var mh$ = SCIPmergeRowprepTerms.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmergeRowprepTerms", scip, rowprep);
            }
            mh$.invokeExact(scip, rowprep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcleanupRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcleanupRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double minviol, double *viol, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPcleanupRowprep$descriptor() {
        return SCIPcleanupRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double minviol, double *viol, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPcleanupRowprep$handle() {
        return SCIPcleanupRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double minviol, double *viol, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPcleanupRowprep$address() {
        return SCIPcleanupRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double minviol, double *viol, unsigned int *success)
     * }
     */
    public static int SCIPcleanupRowprep(MemorySegment scip, MemorySegment rowprep, MemorySegment sol, double minviol, MemorySegment viol, MemorySegment success) {
        var mh$ = SCIPcleanupRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcleanupRowprep", scip, rowprep, sol, minviol, viol, success);
            }
            return (int)mh$.invokeExact(scip, rowprep, sol, minviol, viol, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcleanupRowprep2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcleanupRowprep2");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep2(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double maxcoefbound, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPcleanupRowprep2$descriptor() {
        return SCIPcleanupRowprep2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep2(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double maxcoefbound, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPcleanupRowprep2$handle() {
        return SCIPcleanupRowprep2.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep2(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double maxcoefbound, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPcleanupRowprep2$address() {
        return SCIPcleanupRowprep2.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPcleanupRowprep2(SCIP *scip, SCIP_ROWPREP *rowprep, SCIP_SOL *sol, double maxcoefbound, unsigned int *success)
     * }
     */
    public static int SCIPcleanupRowprep2(MemorySegment scip, MemorySegment rowprep, MemorySegment sol, double maxcoefbound, MemorySegment success) {
        var mh$ = SCIPcleanupRowprep2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcleanupRowprep2", scip, rowprep, sol, maxcoefbound, success);
            }
            return (int)mh$.invokeExact(scip, rowprep, sol, maxcoefbound, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPscaleupRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPscaleupRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPscaleupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, double minscaleup, unsigned int *success)
     * }
     */
    public static FunctionDescriptor SCIPscaleupRowprep$descriptor() {
        return SCIPscaleupRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPscaleupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, double minscaleup, unsigned int *success)
     * }
     */
    public static MethodHandle SCIPscaleupRowprep$handle() {
        return SCIPscaleupRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPscaleupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, double minscaleup, unsigned int *success)
     * }
     */
    public static MemorySegment SCIPscaleupRowprep$address() {
        return SCIPscaleupRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPscaleupRowprep(SCIP *scip, SCIP_ROWPREP *rowprep, double minscaleup, unsigned int *success)
     * }
     */
    public static double SCIPscaleupRowprep(MemorySegment scip, MemorySegment rowprep, double minscaleup, MemorySegment success) {
        var mh$ = SCIPscaleupRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPscaleupRowprep", scip, rowprep, minscaleup, success);
            }
            return (double)mh$.invokeExact(scip, rowprep, minscaleup, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPscaleRowprep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPscaleRowprep");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPscaleRowprep(SCIP_ROWPREP *rowprep, double factor)
     * }
     */
    public static FunctionDescriptor SCIPscaleRowprep$descriptor() {
        return SCIPscaleRowprep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPscaleRowprep(SCIP_ROWPREP *rowprep, double factor)
     * }
     */
    public static MethodHandle SCIPscaleRowprep$handle() {
        return SCIPscaleRowprep.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPscaleRowprep(SCIP_ROWPREP *rowprep, double factor)
     * }
     */
    public static MemorySegment SCIPscaleRowprep$address() {
        return SCIPscaleRowprep.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPscaleRowprep(SCIP_ROWPREP *rowprep, double factor)
     * }
     */
    public static int SCIPscaleRowprep(MemorySegment rowprep, double factor) {
        var mh$ = SCIPscaleRowprep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPscaleRowprep", rowprep, factor);
            }
            return (int)mh$.invokeExact(rowprep, factor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgetRowprepRowConshdlr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgetRowprepRowConshdlr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowConshdlr(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONSHDLR *conshdlr)
     * }
     */
    public static FunctionDescriptor SCIPgetRowprepRowConshdlr$descriptor() {
        return SCIPgetRowprepRowConshdlr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowConshdlr(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONSHDLR *conshdlr)
     * }
     */
    public static MethodHandle SCIPgetRowprepRowConshdlr$handle() {
        return SCIPgetRowprepRowConshdlr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowConshdlr(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONSHDLR *conshdlr)
     * }
     */
    public static MemorySegment SCIPgetRowprepRowConshdlr$address() {
        return SCIPgetRowprepRowConshdlr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowConshdlr(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONSHDLR *conshdlr)
     * }
     */
    public static int SCIPgetRowprepRowConshdlr(MemorySegment scip, MemorySegment row, MemorySegment rowprep, MemorySegment conshdlr) {
        var mh$ = SCIPgetRowprepRowConshdlr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgetRowprepRowConshdlr", scip, row, rowprep, conshdlr);
            }
            return (int)mh$.invokeExact(scip, row, rowprep, conshdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgetRowprepRowCons {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgetRowprepRowCons");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowCons(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONS *cons)
     * }
     */
    public static FunctionDescriptor SCIPgetRowprepRowCons$descriptor() {
        return SCIPgetRowprepRowCons.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowCons(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONS *cons)
     * }
     */
    public static MethodHandle SCIPgetRowprepRowCons$handle() {
        return SCIPgetRowprepRowCons.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowCons(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONS *cons)
     * }
     */
    public static MemorySegment SCIPgetRowprepRowCons$address() {
        return SCIPgetRowprepRowCons.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowCons(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_CONS *cons)
     * }
     */
    public static int SCIPgetRowprepRowCons(MemorySegment scip, MemorySegment row, MemorySegment rowprep, MemorySegment cons) {
        var mh$ = SCIPgetRowprepRowCons.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgetRowprepRowCons", scip, row, rowprep, cons);
            }
            return (int)mh$.invokeExact(scip, row, rowprep, cons);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgetRowprepRowSepa {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgetRowprepRowSepa");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowSepa(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_SEPA *sepa)
     * }
     */
    public static FunctionDescriptor SCIPgetRowprepRowSepa$descriptor() {
        return SCIPgetRowprepRowSepa.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowSepa(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_SEPA *sepa)
     * }
     */
    public static MethodHandle SCIPgetRowprepRowSepa$handle() {
        return SCIPgetRowprepRowSepa.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowSepa(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_SEPA *sepa)
     * }
     */
    public static MemorySegment SCIPgetRowprepRowSepa$address() {
        return SCIPgetRowprepRowSepa.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPgetRowprepRowSepa(SCIP *scip, SCIP_ROW **row, SCIP_ROWPREP *rowprep, SCIP_SEPA *sepa)
     * }
     */
    public static int SCIPgetRowprepRowSepa(MemorySegment scip, MemorySegment row, MemorySegment rowprep, MemorySegment sepa) {
        var mh$ = SCIPgetRowprepRowSepa.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgetRowprepRowSepa", scip, row, rowprep, sepa);
            }
            return (int)mh$.invokeExact(scip, row, rowprep, sepa);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPstudentTGetCriticalValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPstudentTGetCriticalValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPstudentTGetCriticalValue(SCIP_CONFIDENCELEVEL clevel, int df)
     * }
     */
    public static FunctionDescriptor SCIPstudentTGetCriticalValue$descriptor() {
        return SCIPstudentTGetCriticalValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPstudentTGetCriticalValue(SCIP_CONFIDENCELEVEL clevel, int df)
     * }
     */
    public static MethodHandle SCIPstudentTGetCriticalValue$handle() {
        return SCIPstudentTGetCriticalValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPstudentTGetCriticalValue(SCIP_CONFIDENCELEVEL clevel, int df)
     * }
     */
    public static MemorySegment SCIPstudentTGetCriticalValue$address() {
        return SCIPstudentTGetCriticalValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPstudentTGetCriticalValue(SCIP_CONFIDENCELEVEL clevel, int df)
     * }
     */
    public static double SCIPstudentTGetCriticalValue(int clevel, int df) {
        var mh$ = SCIPstudentTGetCriticalValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPstudentTGetCriticalValue", clevel, df);
            }
            return (double)mh$.invokeExact(clevel, df);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcomputeTwoSampleTTestValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcomputeTwoSampleTTestValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPcomputeTwoSampleTTestValue(double meanx, double meany, double variancex, double variancey, double countx, double county)
     * }
     */
    public static FunctionDescriptor SCIPcomputeTwoSampleTTestValue$descriptor() {
        return SCIPcomputeTwoSampleTTestValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPcomputeTwoSampleTTestValue(double meanx, double meany, double variancex, double variancey, double countx, double county)
     * }
     */
    public static MethodHandle SCIPcomputeTwoSampleTTestValue$handle() {
        return SCIPcomputeTwoSampleTTestValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPcomputeTwoSampleTTestValue(double meanx, double meany, double variancex, double variancey, double countx, double county)
     * }
     */
    public static MemorySegment SCIPcomputeTwoSampleTTestValue$address() {
        return SCIPcomputeTwoSampleTTestValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPcomputeTwoSampleTTestValue(double meanx, double meany, double variancex, double variancey, double countx, double county)
     * }
     */
    public static double SCIPcomputeTwoSampleTTestValue(double meanx, double meany, double variancex, double variancey, double countx, double county) {
        var mh$ = SCIPcomputeTwoSampleTTestValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcomputeTwoSampleTTestValue", meanx, meany, variancex, variancey, countx, county);
            }
            return (double)mh$.invokeExact(meanx, meany, variancex, variancey, countx, county);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPerf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPerf");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPerf(double x)
     * }
     */
    public static FunctionDescriptor SCIPerf$descriptor() {
        return SCIPerf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPerf(double x)
     * }
     */
    public static MethodHandle SCIPerf$handle() {
        return SCIPerf.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPerf(double x)
     * }
     */
    public static MemorySegment SCIPerf$address() {
        return SCIPerf.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPerf(double x)
     * }
     */
    public static double SCIPerf(double x) {
        var mh$ = SCIPerf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPerf", x);
            }
            return (double)mh$.invokeExact(x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnormalGetCriticalValue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnormalGetCriticalValue");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPnormalGetCriticalValue(SCIP_CONFIDENCELEVEL clevel)
     * }
     */
    public static FunctionDescriptor SCIPnormalGetCriticalValue$descriptor() {
        return SCIPnormalGetCriticalValue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPnormalGetCriticalValue(SCIP_CONFIDENCELEVEL clevel)
     * }
     */
    public static MethodHandle SCIPnormalGetCriticalValue$handle() {
        return SCIPnormalGetCriticalValue.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPnormalGetCriticalValue(SCIP_CONFIDENCELEVEL clevel)
     * }
     */
    public static MemorySegment SCIPnormalGetCriticalValue$address() {
        return SCIPnormalGetCriticalValue.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPnormalGetCriticalValue(SCIP_CONFIDENCELEVEL clevel)
     * }
     */
    public static double SCIPnormalGetCriticalValue(int clevel) {
        var mh$ = SCIPnormalGetCriticalValue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnormalGetCriticalValue", clevel);
            }
            return (double)mh$.invokeExact(clevel);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPnormalCDF {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPnormalCDF");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPnormalCDF(double mean, double variance, double value)
     * }
     */
    public static FunctionDescriptor SCIPnormalCDF$descriptor() {
        return SCIPnormalCDF.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPnormalCDF(double mean, double variance, double value)
     * }
     */
    public static MethodHandle SCIPnormalCDF$handle() {
        return SCIPnormalCDF.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPnormalCDF(double mean, double variance, double value)
     * }
     */
    public static MemorySegment SCIPnormalCDF$address() {
        return SCIPnormalCDF.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPnormalCDF(double mean, double variance, double value)
     * }
     */
    public static double SCIPnormalCDF(double mean, double variance, double value) {
        var mh$ = SCIPnormalCDF.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPnormalCDF", mean, variance, value);
            }
            return (double)mh$.invokeExact(mean, variance, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionGetNObservations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionGetNObservations");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPregressionGetNObservations(SCIP_REGRESSION *regression)
     * }
     */
    public static FunctionDescriptor SCIPregressionGetNObservations$descriptor() {
        return SCIPregressionGetNObservations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPregressionGetNObservations(SCIP_REGRESSION *regression)
     * }
     */
    public static MethodHandle SCIPregressionGetNObservations$handle() {
        return SCIPregressionGetNObservations.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPregressionGetNObservations(SCIP_REGRESSION *regression)
     * }
     */
    public static MemorySegment SCIPregressionGetNObservations$address() {
        return SCIPregressionGetNObservations.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPregressionGetNObservations(SCIP_REGRESSION *regression)
     * }
     */
    public static int SCIPregressionGetNObservations(MemorySegment regression) {
        var mh$ = SCIPregressionGetNObservations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionGetNObservations", regression);
            }
            return (int)mh$.invokeExact(regression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionGetSlope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionGetSlope");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPregressionGetSlope(SCIP_REGRESSION *regression)
     * }
     */
    public static FunctionDescriptor SCIPregressionGetSlope$descriptor() {
        return SCIPregressionGetSlope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPregressionGetSlope(SCIP_REGRESSION *regression)
     * }
     */
    public static MethodHandle SCIPregressionGetSlope$handle() {
        return SCIPregressionGetSlope.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPregressionGetSlope(SCIP_REGRESSION *regression)
     * }
     */
    public static MemorySegment SCIPregressionGetSlope$address() {
        return SCIPregressionGetSlope.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPregressionGetSlope(SCIP_REGRESSION *regression)
     * }
     */
    public static double SCIPregressionGetSlope(MemorySegment regression) {
        var mh$ = SCIPregressionGetSlope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionGetSlope", regression);
            }
            return (double)mh$.invokeExact(regression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionGetIntercept {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionGetIntercept");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPregressionGetIntercept(SCIP_REGRESSION *regression)
     * }
     */
    public static FunctionDescriptor SCIPregressionGetIntercept$descriptor() {
        return SCIPregressionGetIntercept.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPregressionGetIntercept(SCIP_REGRESSION *regression)
     * }
     */
    public static MethodHandle SCIPregressionGetIntercept$handle() {
        return SCIPregressionGetIntercept.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPregressionGetIntercept(SCIP_REGRESSION *regression)
     * }
     */
    public static MemorySegment SCIPregressionGetIntercept$address() {
        return SCIPregressionGetIntercept.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPregressionGetIntercept(SCIP_REGRESSION *regression)
     * }
     */
    public static double SCIPregressionGetIntercept(MemorySegment regression) {
        var mh$ = SCIPregressionGetIntercept.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionGetIntercept", regression);
            }
            return (double)mh$.invokeExact(regression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionRemoveObservation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionRemoveObservation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPregressionRemoveObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static FunctionDescriptor SCIPregressionRemoveObservation$descriptor() {
        return SCIPregressionRemoveObservation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPregressionRemoveObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static MethodHandle SCIPregressionRemoveObservation$handle() {
        return SCIPregressionRemoveObservation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPregressionRemoveObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static MemorySegment SCIPregressionRemoveObservation$address() {
        return SCIPregressionRemoveObservation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPregressionRemoveObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static void SCIPregressionRemoveObservation(MemorySegment regression, double x, double y) {
        var mh$ = SCIPregressionRemoveObservation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionRemoveObservation", regression, x, y);
            }
            mh$.invokeExact(regression, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionAddObservation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionAddObservation");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPregressionAddObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static FunctionDescriptor SCIPregressionAddObservation$descriptor() {
        return SCIPregressionAddObservation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPregressionAddObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static MethodHandle SCIPregressionAddObservation$handle() {
        return SCIPregressionAddObservation.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPregressionAddObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static MemorySegment SCIPregressionAddObservation$address() {
        return SCIPregressionAddObservation.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPregressionAddObservation(SCIP_REGRESSION *regression, double x, double y)
     * }
     */
    public static void SCIPregressionAddObservation(MemorySegment regression, double x, double y) {
        var mh$ = SCIPregressionAddObservation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionAddObservation", regression, x, y);
            }
            mh$.invokeExact(regression, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionReset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionReset");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPregressionReset(SCIP_REGRESSION *regression)
     * }
     */
    public static FunctionDescriptor SCIPregressionReset$descriptor() {
        return SCIPregressionReset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPregressionReset(SCIP_REGRESSION *regression)
     * }
     */
    public static MethodHandle SCIPregressionReset$handle() {
        return SCIPregressionReset.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPregressionReset(SCIP_REGRESSION *regression)
     * }
     */
    public static MemorySegment SCIPregressionReset$address() {
        return SCIPregressionReset.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPregressionReset(SCIP_REGRESSION *regression)
     * }
     */
    public static void SCIPregressionReset(MemorySegment regression) {
        var mh$ = SCIPregressionReset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionReset", regression);
            }
            mh$.invokeExact(regression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPregressionCreate(SCIP_REGRESSION **regression)
     * }
     */
    public static FunctionDescriptor SCIPregressionCreate$descriptor() {
        return SCIPregressionCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPregressionCreate(SCIP_REGRESSION **regression)
     * }
     */
    public static MethodHandle SCIPregressionCreate$handle() {
        return SCIPregressionCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPregressionCreate(SCIP_REGRESSION **regression)
     * }
     */
    public static MemorySegment SCIPregressionCreate$address() {
        return SCIPregressionCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPregressionCreate(SCIP_REGRESSION **regression)
     * }
     */
    public static int SCIPregressionCreate(MemorySegment regression) {
        var mh$ = SCIPregressionCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionCreate", regression);
            }
            return (int)mh$.invokeExact(regression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPregressionFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPregressionFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPregressionFree(SCIP_REGRESSION **regression)
     * }
     */
    public static FunctionDescriptor SCIPregressionFree$descriptor() {
        return SCIPregressionFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPregressionFree(SCIP_REGRESSION **regression)
     * }
     */
    public static MethodHandle SCIPregressionFree$handle() {
        return SCIPregressionFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPregressionFree(SCIP_REGRESSION **regression)
     * }
     */
    public static MemorySegment SCIPregressionFree$address() {
        return SCIPregressionFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPregressionFree(SCIP_REGRESSION **regression)
     * }
     */
    public static void SCIPregressionFree(MemorySegment regression) {
        var mh$ = SCIPregressionFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPregressionFree", regression);
            }
            mh$.invokeExact(regression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgmlWriteNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgmlWriteNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPgmlWriteNode(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static FunctionDescriptor SCIPgmlWriteNode$descriptor() {
        return SCIPgmlWriteNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPgmlWriteNode(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static MethodHandle SCIPgmlWriteNode$handle() {
        return SCIPgmlWriteNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPgmlWriteNode(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static MemorySegment SCIPgmlWriteNode$address() {
        return SCIPgmlWriteNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPgmlWriteNode(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static void SCIPgmlWriteNode(MemorySegment file, int id, MemorySegment label, MemorySegment nodetype, MemorySegment fillcolor, MemorySegment bordercolor) {
        var mh$ = SCIPgmlWriteNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgmlWriteNode", file, id, label, nodetype, fillcolor, bordercolor);
            }
            mh$.invokeExact(file, id, label, nodetype, fillcolor, bordercolor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgmlWriteNodeWeight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgmlWriteNodeWeight");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPgmlWriteNodeWeight(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor, double weight)
     * }
     */
    public static FunctionDescriptor SCIPgmlWriteNodeWeight$descriptor() {
        return SCIPgmlWriteNodeWeight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPgmlWriteNodeWeight(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor, double weight)
     * }
     */
    public static MethodHandle SCIPgmlWriteNodeWeight$handle() {
        return SCIPgmlWriteNodeWeight.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPgmlWriteNodeWeight(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor, double weight)
     * }
     */
    public static MemorySegment SCIPgmlWriteNodeWeight$address() {
        return SCIPgmlWriteNodeWeight.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPgmlWriteNodeWeight(FILE *file, unsigned int id, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor, double weight)
     * }
     */
    public static void SCIPgmlWriteNodeWeight(MemorySegment file, int id, MemorySegment label, MemorySegment nodetype, MemorySegment fillcolor, MemorySegment bordercolor, double weight) {
        var mh$ = SCIPgmlWriteNodeWeight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgmlWriteNodeWeight", file, id, label, nodetype, fillcolor, bordercolor, weight);
            }
            mh$.invokeExact(file, id, label, nodetype, fillcolor, bordercolor, weight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgmlWriteEdge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgmlWriteEdge");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPgmlWriteEdge(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static FunctionDescriptor SCIPgmlWriteEdge$descriptor() {
        return SCIPgmlWriteEdge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPgmlWriteEdge(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static MethodHandle SCIPgmlWriteEdge$handle() {
        return SCIPgmlWriteEdge.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPgmlWriteEdge(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static MemorySegment SCIPgmlWriteEdge$address() {
        return SCIPgmlWriteEdge.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPgmlWriteEdge(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static void SCIPgmlWriteEdge(MemorySegment file, int source, int target, MemorySegment label, MemorySegment color) {
        var mh$ = SCIPgmlWriteEdge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgmlWriteEdge", file, source, target, label, color);
            }
            mh$.invokeExact(file, source, target, label, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgmlWriteArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgmlWriteArc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPgmlWriteArc(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static FunctionDescriptor SCIPgmlWriteArc$descriptor() {
        return SCIPgmlWriteArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPgmlWriteArc(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static MethodHandle SCIPgmlWriteArc$handle() {
        return SCIPgmlWriteArc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPgmlWriteArc(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static MemorySegment SCIPgmlWriteArc$address() {
        return SCIPgmlWriteArc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPgmlWriteArc(FILE *file, unsigned int source, unsigned int target, const char *label, const char *color)
     * }
     */
    public static void SCIPgmlWriteArc(MemorySegment file, int source, int target, MemorySegment label, MemorySegment color) {
        var mh$ = SCIPgmlWriteArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgmlWriteArc", file, source, target, label, color);
            }
            mh$.invokeExact(file, source, target, label, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgmlWriteOpening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgmlWriteOpening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPgmlWriteOpening(FILE *file, unsigned int directed)
     * }
     */
    public static FunctionDescriptor SCIPgmlWriteOpening$descriptor() {
        return SCIPgmlWriteOpening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPgmlWriteOpening(FILE *file, unsigned int directed)
     * }
     */
    public static MethodHandle SCIPgmlWriteOpening$handle() {
        return SCIPgmlWriteOpening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPgmlWriteOpening(FILE *file, unsigned int directed)
     * }
     */
    public static MemorySegment SCIPgmlWriteOpening$address() {
        return SCIPgmlWriteOpening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPgmlWriteOpening(FILE *file, unsigned int directed)
     * }
     */
    public static void SCIPgmlWriteOpening(MemorySegment file, int directed) {
        var mh$ = SCIPgmlWriteOpening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgmlWriteOpening", file, directed);
            }
            mh$.invokeExact(file, directed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPgmlWriteClosing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPgmlWriteClosing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPgmlWriteClosing(FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPgmlWriteClosing$descriptor() {
        return SCIPgmlWriteClosing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPgmlWriteClosing(FILE *file)
     * }
     */
    public static MethodHandle SCIPgmlWriteClosing$handle() {
        return SCIPgmlWriteClosing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPgmlWriteClosing(FILE *file)
     * }
     */
    public static MemorySegment SCIPgmlWriteClosing$address() {
        return SCIPgmlWriteClosing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPgmlWriteClosing(FILE *file)
     * }
     */
    public static void SCIPgmlWriteClosing(MemorySegment file) {
        var mh$ = SCIPgmlWriteClosing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPgmlWriteClosing", file);
            }
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdotWriteOpening {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdotWriteOpening");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdotWriteOpening(FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPdotWriteOpening$descriptor() {
        return SCIPdotWriteOpening.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdotWriteOpening(FILE *file)
     * }
     */
    public static MethodHandle SCIPdotWriteOpening$handle() {
        return SCIPdotWriteOpening.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdotWriteOpening(FILE *file)
     * }
     */
    public static MemorySegment SCIPdotWriteOpening$address() {
        return SCIPdotWriteOpening.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdotWriteOpening(FILE *file)
     * }
     */
    public static void SCIPdotWriteOpening(MemorySegment file) {
        var mh$ = SCIPdotWriteOpening.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdotWriteOpening", file);
            }
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdotWriteNode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdotWriteNode");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdotWriteNode(FILE *file, int node, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static FunctionDescriptor SCIPdotWriteNode$descriptor() {
        return SCIPdotWriteNode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdotWriteNode(FILE *file, int node, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static MethodHandle SCIPdotWriteNode$handle() {
        return SCIPdotWriteNode.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdotWriteNode(FILE *file, int node, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static MemorySegment SCIPdotWriteNode$address() {
        return SCIPdotWriteNode.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdotWriteNode(FILE *file, int node, const char *label, const char *nodetype, const char *fillcolor, const char *bordercolor)
     * }
     */
    public static void SCIPdotWriteNode(MemorySegment file, int node, MemorySegment label, MemorySegment nodetype, MemorySegment fillcolor, MemorySegment bordercolor) {
        var mh$ = SCIPdotWriteNode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdotWriteNode", file, node, label, nodetype, fillcolor, bordercolor);
            }
            mh$.invokeExact(file, node, label, nodetype, fillcolor, bordercolor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdotWriteArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdotWriteArc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdotWriteArc(FILE *file, int source, int target, const char *color)
     * }
     */
    public static FunctionDescriptor SCIPdotWriteArc$descriptor() {
        return SCIPdotWriteArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdotWriteArc(FILE *file, int source, int target, const char *color)
     * }
     */
    public static MethodHandle SCIPdotWriteArc$handle() {
        return SCIPdotWriteArc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdotWriteArc(FILE *file, int source, int target, const char *color)
     * }
     */
    public static MemorySegment SCIPdotWriteArc$address() {
        return SCIPdotWriteArc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdotWriteArc(FILE *file, int source, int target, const char *color)
     * }
     */
    public static void SCIPdotWriteArc(MemorySegment file, int source, int target, MemorySegment color) {
        var mh$ = SCIPdotWriteArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdotWriteArc", file, source, target, color);
            }
            mh$.invokeExact(file, source, target, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdotWriteClosing {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdotWriteClosing");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdotWriteClosing(FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPdotWriteClosing$descriptor() {
        return SCIPdotWriteClosing.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdotWriteClosing(FILE *file)
     * }
     */
    public static MethodHandle SCIPdotWriteClosing$handle() {
        return SCIPdotWriteClosing.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdotWriteClosing(FILE *file)
     * }
     */
    public static MemorySegment SCIPdotWriteClosing$address() {
        return SCIPdotWriteClosing.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdotWriteClosing(FILE *file)
     * }
     */
    public static void SCIPdotWriteClosing(MemorySegment file) {
        var mh$ = SCIPdotWriteClosing.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdotWriteClosing", file);
            }
            mh$.invokeExact(file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPsparseSolCreate(SCIP_SPARSESOL **sparsesol, SCIP_VAR **vars, int nvars, unsigned int cleared)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolCreate$descriptor() {
        return SCIPsparseSolCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPsparseSolCreate(SCIP_SPARSESOL **sparsesol, SCIP_VAR **vars, int nvars, unsigned int cleared)
     * }
     */
    public static MethodHandle SCIPsparseSolCreate$handle() {
        return SCIPsparseSolCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPsparseSolCreate(SCIP_SPARSESOL **sparsesol, SCIP_VAR **vars, int nvars, unsigned int cleared)
     * }
     */
    public static MemorySegment SCIPsparseSolCreate$address() {
        return SCIPsparseSolCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPsparseSolCreate(SCIP_SPARSESOL **sparsesol, SCIP_VAR **vars, int nvars, unsigned int cleared)
     * }
     */
    public static int SCIPsparseSolCreate(MemorySegment sparsesol, MemorySegment vars, int nvars, int cleared) {
        var mh$ = SCIPsparseSolCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolCreate", sparsesol, vars, nvars, cleared);
            }
            return (int)mh$.invokeExact(sparsesol, vars, nvars, cleared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsparseSolFree(SCIP_SPARSESOL **sparsesol)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolFree$descriptor() {
        return SCIPsparseSolFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsparseSolFree(SCIP_SPARSESOL **sparsesol)
     * }
     */
    public static MethodHandle SCIPsparseSolFree$handle() {
        return SCIPsparseSolFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsparseSolFree(SCIP_SPARSESOL **sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolFree$address() {
        return SCIPsparseSolFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsparseSolFree(SCIP_SPARSESOL **sparsesol)
     * }
     */
    public static void SCIPsparseSolFree(MemorySegment sparsesol) {
        var mh$ = SCIPsparseSolFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolFree", sparsesol);
            }
            mh$.invokeExact(sparsesol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolGetVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolGetVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIPsparseSolGetVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolGetVars$descriptor() {
        return SCIPsparseSolGetVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIPsparseSolGetVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MethodHandle SCIPsparseSolGetVars$handle() {
        return SCIPsparseSolGetVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR **SCIPsparseSolGetVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetVars$address() {
        return SCIPsparseSolGetVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR **SCIPsparseSolGetVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetVars(MemorySegment sparsesol) {
        var mh$ = SCIPsparseSolGetVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolGetVars", sparsesol);
            }
            return (MemorySegment)mh$.invokeExact(sparsesol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolGetNVars {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolGetNVars");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPsparseSolGetNVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolGetNVars$descriptor() {
        return SCIPsparseSolGetNVars.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPsparseSolGetNVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MethodHandle SCIPsparseSolGetNVars$handle() {
        return SCIPsparseSolGetNVars.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPsparseSolGetNVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetNVars$address() {
        return SCIPsparseSolGetNVars.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPsparseSolGetNVars(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static int SCIPsparseSolGetNVars(MemorySegment sparsesol) {
        var mh$ = SCIPsparseSolGetNVars.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolGetNVars", sparsesol);
            }
            return (int)mh$.invokeExact(sparsesol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolGetLbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolGetLbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetLbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolGetLbs$descriptor() {
        return SCIPsparseSolGetLbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetLbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MethodHandle SCIPsparseSolGetLbs$handle() {
        return SCIPsparseSolGetLbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetLbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetLbs$address() {
        return SCIPsparseSolGetLbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetLbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetLbs(MemorySegment sparsesol) {
        var mh$ = SCIPsparseSolGetLbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolGetLbs", sparsesol);
            }
            return (MemorySegment)mh$.invokeExact(sparsesol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolGetUbs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolGetUbs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetUbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolGetUbs$descriptor() {
        return SCIPsparseSolGetUbs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetUbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MethodHandle SCIPsparseSolGetUbs$handle() {
        return SCIPsparseSolGetUbs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetUbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetUbs$address() {
        return SCIPsparseSolGetUbs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long *SCIPsparseSolGetUbs(SCIP_SPARSESOL *sparsesol)
     * }
     */
    public static MemorySegment SCIPsparseSolGetUbs(MemorySegment sparsesol) {
        var mh$ = SCIPsparseSolGetUbs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolGetUbs", sparsesol);
            }
            return (MemorySegment)mh$.invokeExact(sparsesol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolGetFirstSol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolGetFirstSol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPsparseSolGetFirstSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolGetFirstSol$descriptor() {
        return SCIPsparseSolGetFirstSol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPsparseSolGetFirstSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static MethodHandle SCIPsparseSolGetFirstSol$handle() {
        return SCIPsparseSolGetFirstSol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPsparseSolGetFirstSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static MemorySegment SCIPsparseSolGetFirstSol$address() {
        return SCIPsparseSolGetFirstSol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPsparseSolGetFirstSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static void SCIPsparseSolGetFirstSol(MemorySegment sparsesol, MemorySegment sol, int nvars) {
        var mh$ = SCIPsparseSolGetFirstSol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolGetFirstSol", sparsesol, sol, nvars);
            }
            mh$.invokeExact(sparsesol, sol, nvars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPsparseSolGetNextSol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPsparseSolGetNextSol");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPsparseSolGetNextSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static FunctionDescriptor SCIPsparseSolGetNextSol$descriptor() {
        return SCIPsparseSolGetNextSol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPsparseSolGetNextSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static MethodHandle SCIPsparseSolGetNextSol$handle() {
        return SCIPsparseSolGetNextSol.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPsparseSolGetNextSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static MemorySegment SCIPsparseSolGetNextSol$address() {
        return SCIPsparseSolGetNextSol.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPsparseSolGetNextSol(SCIP_SPARSESOL *sparsesol, long long *sol, int nvars)
     * }
     */
    public static int SCIPsparseSolGetNextSol(MemorySegment sparsesol, MemorySegment sol, int nvars) {
        var mh$ = SCIPsparseSolGetNextSol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPsparseSolGetNextSol", sparsesol, sol, nvars);
            }
            return (int)mh$.invokeExact(sparsesol, sol, nvars);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueCreate(SCIP_QUEUE **queue, int initsize, double sizefac)
     * }
     */
    public static FunctionDescriptor SCIPqueueCreate$descriptor() {
        return SCIPqueueCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueCreate(SCIP_QUEUE **queue, int initsize, double sizefac)
     * }
     */
    public static MethodHandle SCIPqueueCreate$handle() {
        return SCIPqueueCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueCreate(SCIP_QUEUE **queue, int initsize, double sizefac)
     * }
     */
    public static MemorySegment SCIPqueueCreate$address() {
        return SCIPqueueCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueCreate(SCIP_QUEUE **queue, int initsize, double sizefac)
     * }
     */
    public static int SCIPqueueCreate(MemorySegment queue, int initsize, double sizefac) {
        var mh$ = SCIPqueueCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueCreate", queue, initsize, sizefac);
            }
            return (int)mh$.invokeExact(queue, initsize, sizefac);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPqueueFree(SCIP_QUEUE **queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueFree$descriptor() {
        return SCIPqueueFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPqueueFree(SCIP_QUEUE **queue)
     * }
     */
    public static MethodHandle SCIPqueueFree$handle() {
        return SCIPqueueFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPqueueFree(SCIP_QUEUE **queue)
     * }
     */
    public static MemorySegment SCIPqueueFree$address() {
        return SCIPqueueFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPqueueFree(SCIP_QUEUE **queue)
     * }
     */
    public static void SCIPqueueFree(MemorySegment queue) {
        var mh$ = SCIPqueueFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueFree", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPqueueClear(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueClear$descriptor() {
        return SCIPqueueClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPqueueClear(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueClear$handle() {
        return SCIPqueueClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPqueueClear(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueClear$address() {
        return SCIPqueueClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPqueueClear(SCIP_QUEUE *queue)
     * }
     */
    public static void SCIPqueueClear(MemorySegment queue) {
        var mh$ = SCIPqueueClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueClear", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsert(SCIP_QUEUE *queue, void *elem)
     * }
     */
    public static FunctionDescriptor SCIPqueueInsert$descriptor() {
        return SCIPqueueInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsert(SCIP_QUEUE *queue, void *elem)
     * }
     */
    public static MethodHandle SCIPqueueInsert$handle() {
        return SCIPqueueInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsert(SCIP_QUEUE *queue, void *elem)
     * }
     */
    public static MemorySegment SCIPqueueInsert$address() {
        return SCIPqueueInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsert(SCIP_QUEUE *queue, void *elem)
     * }
     */
    public static int SCIPqueueInsert(MemorySegment queue, MemorySegment elem) {
        var mh$ = SCIPqueueInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueInsert", queue, elem);
            }
            return (int)mh$.invokeExact(queue, elem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueInsertUInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueInsertUInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsertUInt(SCIP_QUEUE *queue, unsigned int elem)
     * }
     */
    public static FunctionDescriptor SCIPqueueInsertUInt$descriptor() {
        return SCIPqueueInsertUInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsertUInt(SCIP_QUEUE *queue, unsigned int elem)
     * }
     */
    public static MethodHandle SCIPqueueInsertUInt$handle() {
        return SCIPqueueInsertUInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsertUInt(SCIP_QUEUE *queue, unsigned int elem)
     * }
     */
    public static MemorySegment SCIPqueueInsertUInt$address() {
        return SCIPqueueInsertUInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPqueueInsertUInt(SCIP_QUEUE *queue, unsigned int elem)
     * }
     */
    public static int SCIPqueueInsertUInt(MemorySegment queue, int elem) {
        var mh$ = SCIPqueueInsertUInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueInsertUInt", queue, elem);
            }
            return (int)mh$.invokeExact(queue, elem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPqueueRemove(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueRemove$descriptor() {
        return SCIPqueueRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPqueueRemove(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueRemove$handle() {
        return SCIPqueueRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPqueueRemove(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueRemove$address() {
        return SCIPqueueRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPqueueRemove(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueRemove(MemorySegment queue) {
        var mh$ = SCIPqueueRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueRemove", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueRemoveUInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueRemoveUInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueRemoveUInt(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueRemoveUInt$descriptor() {
        return SCIPqueueRemoveUInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueRemoveUInt(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueRemoveUInt$handle() {
        return SCIPqueueRemoveUInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueRemoveUInt(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueRemoveUInt$address() {
        return SCIPqueueRemoveUInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPqueueRemoveUInt(SCIP_QUEUE *queue)
     * }
     */
    public static int SCIPqueueRemoveUInt(MemorySegment queue) {
        var mh$ = SCIPqueueRemoveUInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueRemoveUInt", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueFirst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueFirst");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPqueueFirst(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueFirst$descriptor() {
        return SCIPqueueFirst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPqueueFirst(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueFirst$handle() {
        return SCIPqueueFirst.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPqueueFirst(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueFirst$address() {
        return SCIPqueueFirst.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPqueueFirst(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueFirst(MemorySegment queue) {
        var mh$ = SCIPqueueFirst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueFirst", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueFirstUInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueFirstUInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueFirstUInt(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueFirstUInt$descriptor() {
        return SCIPqueueFirstUInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueFirstUInt(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueFirstUInt$handle() {
        return SCIPqueueFirstUInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueFirstUInt(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueFirstUInt$address() {
        return SCIPqueueFirstUInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPqueueFirstUInt(SCIP_QUEUE *queue)
     * }
     */
    public static int SCIPqueueFirstUInt(MemorySegment queue) {
        var mh$ = SCIPqueueFirstUInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueFirstUInt", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueIsEmpty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueIsEmpty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueIsEmpty(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueIsEmpty$descriptor() {
        return SCIPqueueIsEmpty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueIsEmpty(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueIsEmpty$handle() {
        return SCIPqueueIsEmpty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPqueueIsEmpty(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueIsEmpty$address() {
        return SCIPqueueIsEmpty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPqueueIsEmpty(SCIP_QUEUE *queue)
     * }
     */
    public static int SCIPqueueIsEmpty(MemorySegment queue) {
        var mh$ = SCIPqueueIsEmpty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueIsEmpty", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPqueueNElems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPqueueNElems");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPqueueNElems(SCIP_QUEUE *queue)
     * }
     */
    public static FunctionDescriptor SCIPqueueNElems$descriptor() {
        return SCIPqueueNElems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPqueueNElems(SCIP_QUEUE *queue)
     * }
     */
    public static MethodHandle SCIPqueueNElems$handle() {
        return SCIPqueueNElems.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPqueueNElems(SCIP_QUEUE *queue)
     * }
     */
    public static MemorySegment SCIPqueueNElems$address() {
        return SCIPqueueNElems.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPqueueNElems(SCIP_QUEUE *queue)
     * }
     */
    public static int SCIPqueueNElems(MemorySegment queue) {
        var mh$ = SCIPqueueNElems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPqueueNElems", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueCreate(SCIP_PQUEUE **pqueue, int initsize, double sizefac, int (*ptrcomp)(void *, void *), void (*elemchgpos)(void *, int, int))
     * }
     */
    public static FunctionDescriptor SCIPpqueueCreate$descriptor() {
        return SCIPpqueueCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueCreate(SCIP_PQUEUE **pqueue, int initsize, double sizefac, int (*ptrcomp)(void *, void *), void (*elemchgpos)(void *, int, int))
     * }
     */
    public static MethodHandle SCIPpqueueCreate$handle() {
        return SCIPpqueueCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueCreate(SCIP_PQUEUE **pqueue, int initsize, double sizefac, int (*ptrcomp)(void *, void *), void (*elemchgpos)(void *, int, int))
     * }
     */
    public static MemorySegment SCIPpqueueCreate$address() {
        return SCIPpqueueCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueCreate(SCIP_PQUEUE **pqueue, int initsize, double sizefac, int (*ptrcomp)(void *, void *), void (*elemchgpos)(void *, int, int))
     * }
     */
    public static int SCIPpqueueCreate(MemorySegment pqueue, int initsize, double sizefac, MemorySegment ptrcomp, MemorySegment elemchgpos) {
        var mh$ = SCIPpqueueCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueCreate", pqueue, initsize, sizefac, ptrcomp, elemchgpos);
            }
            return (int)mh$.invokeExact(pqueue, initsize, sizefac, ptrcomp, elemchgpos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPpqueueFree(SCIP_PQUEUE **pqueue)
     * }
     */
    public static FunctionDescriptor SCIPpqueueFree$descriptor() {
        return SCIPpqueueFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPpqueueFree(SCIP_PQUEUE **pqueue)
     * }
     */
    public static MethodHandle SCIPpqueueFree$handle() {
        return SCIPpqueueFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPpqueueFree(SCIP_PQUEUE **pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueFree$address() {
        return SCIPpqueueFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPpqueueFree(SCIP_PQUEUE **pqueue)
     * }
     */
    public static void SCIPpqueueFree(MemorySegment pqueue) {
        var mh$ = SCIPpqueueFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueFree", pqueue);
            }
            mh$.invokeExact(pqueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPpqueueClear(SCIP_PQUEUE *pqueue)
     * }
     */
    public static FunctionDescriptor SCIPpqueueClear$descriptor() {
        return SCIPpqueueClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPpqueueClear(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MethodHandle SCIPpqueueClear$handle() {
        return SCIPpqueueClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPpqueueClear(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueClear$address() {
        return SCIPpqueueClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPpqueueClear(SCIP_PQUEUE *pqueue)
     * }
     */
    public static void SCIPpqueueClear(MemorySegment pqueue) {
        var mh$ = SCIPpqueueClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueClear", pqueue);
            }
            mh$.invokeExact(pqueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueInsert(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static FunctionDescriptor SCIPpqueueInsert$descriptor() {
        return SCIPpqueueInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueInsert(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static MethodHandle SCIPpqueueInsert$handle() {
        return SCIPpqueueInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueInsert(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static MemorySegment SCIPpqueueInsert$address() {
        return SCIPpqueueInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPpqueueInsert(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static int SCIPpqueueInsert(MemorySegment pqueue, MemorySegment elem) {
        var mh$ = SCIPpqueueInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueInsert", pqueue, elem);
            }
            return (int)mh$.invokeExact(pqueue, elem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueDelPos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueDelPos");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPpqueueDelPos(SCIP_PQUEUE *pqueue, int pos)
     * }
     */
    public static FunctionDescriptor SCIPpqueueDelPos$descriptor() {
        return SCIPpqueueDelPos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPpqueueDelPos(SCIP_PQUEUE *pqueue, int pos)
     * }
     */
    public static MethodHandle SCIPpqueueDelPos$handle() {
        return SCIPpqueueDelPos.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPpqueueDelPos(SCIP_PQUEUE *pqueue, int pos)
     * }
     */
    public static MemorySegment SCIPpqueueDelPos$address() {
        return SCIPpqueueDelPos.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPpqueueDelPos(SCIP_PQUEUE *pqueue, int pos)
     * }
     */
    public static void SCIPpqueueDelPos(MemorySegment pqueue, int pos) {
        var mh$ = SCIPpqueueDelPos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueDelPos", pqueue, pos);
            }
            mh$.invokeExact(pqueue, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPpqueueRemove(SCIP_PQUEUE *pqueue)
     * }
     */
    public static FunctionDescriptor SCIPpqueueRemove$descriptor() {
        return SCIPpqueueRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPpqueueRemove(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MethodHandle SCIPpqueueRemove$handle() {
        return SCIPpqueueRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPpqueueRemove(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueRemove$address() {
        return SCIPpqueueRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPpqueueRemove(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueRemove(MemorySegment pqueue) {
        var mh$ = SCIPpqueueRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueRemove", pqueue);
            }
            return (MemorySegment)mh$.invokeExact(pqueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueFirst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueFirst");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPpqueueFirst(SCIP_PQUEUE *pqueue)
     * }
     */
    public static FunctionDescriptor SCIPpqueueFirst$descriptor() {
        return SCIPpqueueFirst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPpqueueFirst(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MethodHandle SCIPpqueueFirst$handle() {
        return SCIPpqueueFirst.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPpqueueFirst(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueFirst$address() {
        return SCIPpqueueFirst.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPpqueueFirst(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueFirst(MemorySegment pqueue) {
        var mh$ = SCIPpqueueFirst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueFirst", pqueue);
            }
            return (MemorySegment)mh$.invokeExact(pqueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueNElems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueNElems");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPpqueueNElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static FunctionDescriptor SCIPpqueueNElems$descriptor() {
        return SCIPpqueueNElems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPpqueueNElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MethodHandle SCIPpqueueNElems$handle() {
        return SCIPpqueueNElems.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPpqueueNElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueNElems$address() {
        return SCIPpqueueNElems.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPpqueueNElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static int SCIPpqueueNElems(MemorySegment pqueue) {
        var mh$ = SCIPpqueueNElems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueNElems", pqueue);
            }
            return (int)mh$.invokeExact(pqueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueElems {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueElems");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void **SCIPpqueueElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static FunctionDescriptor SCIPpqueueElems$descriptor() {
        return SCIPpqueueElems.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void **SCIPpqueueElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MethodHandle SCIPpqueueElems$handle() {
        return SCIPpqueueElems.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void **SCIPpqueueElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueElems$address() {
        return SCIPpqueueElems.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void **SCIPpqueueElems(SCIP_PQUEUE *pqueue)
     * }
     */
    public static MemorySegment SCIPpqueueElems(MemorySegment pqueue) {
        var mh$ = SCIPpqueueElems.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueElems", pqueue);
            }
            return (MemorySegment)mh$.invokeExact(pqueue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPpqueueFind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPpqueueFind");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPpqueueFind(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static FunctionDescriptor SCIPpqueueFind$descriptor() {
        return SCIPpqueueFind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPpqueueFind(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static MethodHandle SCIPpqueueFind$handle() {
        return SCIPpqueueFind.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPpqueueFind(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static MemorySegment SCIPpqueueFind$address() {
        return SCIPpqueueFind.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPpqueueFind(SCIP_PQUEUE *pqueue, void *elem)
     * }
     */
    public static int SCIPpqueueFind(MemorySegment pqueue, MemorySegment elem) {
        var mh$ = SCIPpqueueFind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPpqueueFind", pqueue, elem);
            }
            return (int)mh$.invokeExact(pqueue, elem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableCreate(SCIP_HASHTABLE **hashtable, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static FunctionDescriptor SCIPhashtableCreate$descriptor() {
        return SCIPhashtableCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableCreate(SCIP_HASHTABLE **hashtable, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static MethodHandle SCIPhashtableCreate$handle() {
        return SCIPhashtableCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableCreate(SCIP_HASHTABLE **hashtable, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static MemorySegment SCIPhashtableCreate$address() {
        return SCIPhashtableCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableCreate(SCIP_HASHTABLE **hashtable, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static int SCIPhashtableCreate(MemorySegment hashtable, MemorySegment blkmem, int tablesize, MemorySegment hashgetkey, MemorySegment hashkeyeq, MemorySegment hashkeyval, MemorySegment userptr) {
        var mh$ = SCIPhashtableCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableCreate", hashtable, blkmem, tablesize, hashgetkey, hashkeyeq, hashkeyval, userptr);
            }
            return (int)mh$.invokeExact(hashtable, blkmem, tablesize, hashgetkey, hashkeyeq, hashkeyval, userptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashtableFree(SCIP_HASHTABLE **hashtable)
     * }
     */
    public static FunctionDescriptor SCIPhashtableFree$descriptor() {
        return SCIPhashtableFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashtableFree(SCIP_HASHTABLE **hashtable)
     * }
     */
    public static MethodHandle SCIPhashtableFree$handle() {
        return SCIPhashtableFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashtableFree(SCIP_HASHTABLE **hashtable)
     * }
     */
    public static MemorySegment SCIPhashtableFree$address() {
        return SCIPhashtableFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashtableFree(SCIP_HASHTABLE **hashtable)
     * }
     */
    public static void SCIPhashtableFree(MemorySegment hashtable) {
        var mh$ = SCIPhashtableFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableFree", hashtable);
            }
            mh$.invokeExact(hashtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableClear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableClear");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashtableClear(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static FunctionDescriptor SCIPhashtableClear$descriptor() {
        return SCIPhashtableClear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashtableClear(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MethodHandle SCIPhashtableClear$handle() {
        return SCIPhashtableClear.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashtableClear(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MemorySegment SCIPhashtableClear$address() {
        return SCIPhashtableClear.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashtableClear(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static void SCIPhashtableClear(MemorySegment hashtable) {
        var mh$ = SCIPhashtableClear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableClear", hashtable);
            }
            mh$.invokeExact(hashtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashtableInsert$descriptor() {
        return SCIPhashtableInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MethodHandle SCIPhashtableInsert$handle() {
        return SCIPhashtableInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MemorySegment SCIPhashtableInsert$address() {
        return SCIPhashtableInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static int SCIPhashtableInsert(MemorySegment hashtable, MemorySegment element) {
        var mh$ = SCIPhashtableInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableInsert", hashtable, element);
            }
            return (int)mh$.invokeExact(hashtable, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableSafeInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableSafeInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableSafeInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashtableSafeInsert$descriptor() {
        return SCIPhashtableSafeInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableSafeInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MethodHandle SCIPhashtableSafeInsert$handle() {
        return SCIPhashtableSafeInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableSafeInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MemorySegment SCIPhashtableSafeInsert$address() {
        return SCIPhashtableSafeInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableSafeInsert(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static int SCIPhashtableSafeInsert(MemorySegment hashtable, MemorySegment element) {
        var mh$ = SCIPhashtableSafeInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableSafeInsert", hashtable, element);
            }
            return (int)mh$.invokeExact(hashtable, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableRetrieve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableRetrieve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPhashtableRetrieve(SCIP_HASHTABLE *hashtable, void *key)
     * }
     */
    public static FunctionDescriptor SCIPhashtableRetrieve$descriptor() {
        return SCIPhashtableRetrieve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPhashtableRetrieve(SCIP_HASHTABLE *hashtable, void *key)
     * }
     */
    public static MethodHandle SCIPhashtableRetrieve$handle() {
        return SCIPhashtableRetrieve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPhashtableRetrieve(SCIP_HASHTABLE *hashtable, void *key)
     * }
     */
    public static MemorySegment SCIPhashtableRetrieve$address() {
        return SCIPhashtableRetrieve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPhashtableRetrieve(SCIP_HASHTABLE *hashtable, void *key)
     * }
     */
    public static MemorySegment SCIPhashtableRetrieve(MemorySegment hashtable, MemorySegment key) {
        var mh$ = SCIPhashtableRetrieve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableRetrieve", hashtable, key);
            }
            return (MemorySegment)mh$.invokeExact(hashtable, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableExists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableExists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashtableExists(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashtableExists$descriptor() {
        return SCIPhashtableExists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashtableExists(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MethodHandle SCIPhashtableExists$handle() {
        return SCIPhashtableExists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashtableExists(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MemorySegment SCIPhashtableExists$address() {
        return SCIPhashtableExists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashtableExists(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static int SCIPhashtableExists(MemorySegment hashtable, MemorySegment element) {
        var mh$ = SCIPhashtableExists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableExists", hashtable, element);
            }
            return (int)mh$.invokeExact(hashtable, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableRemove(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashtableRemove$descriptor() {
        return SCIPhashtableRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableRemove(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MethodHandle SCIPhashtableRemove$handle() {
        return SCIPhashtableRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableRemove(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static MemorySegment SCIPhashtableRemove$address() {
        return SCIPhashtableRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashtableRemove(SCIP_HASHTABLE *hashtable, void *element)
     * }
     */
    public static int SCIPhashtableRemove(MemorySegment hashtable, MemorySegment element) {
        var mh$ = SCIPhashtableRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableRemove", hashtable, element);
            }
            return (int)mh$.invokeExact(hashtable, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableRemoveAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableRemoveAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashtableRemoveAll(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static FunctionDescriptor SCIPhashtableRemoveAll$descriptor() {
        return SCIPhashtableRemoveAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashtableRemoveAll(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MethodHandle SCIPhashtableRemoveAll$handle() {
        return SCIPhashtableRemoveAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashtableRemoveAll(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MemorySegment SCIPhashtableRemoveAll$address() {
        return SCIPhashtableRemoveAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashtableRemoveAll(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static void SCIPhashtableRemoveAll(MemorySegment hashtable) {
        var mh$ = SCIPhashtableRemoveAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableRemoveAll", hashtable);
            }
            mh$.invokeExact(hashtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableGetNElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableGetNElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long SCIPhashtableGetNElements(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static FunctionDescriptor SCIPhashtableGetNElements$descriptor() {
        return SCIPhashtableGetNElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long SCIPhashtableGetNElements(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MethodHandle SCIPhashtableGetNElements$handle() {
        return SCIPhashtableGetNElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long SCIPhashtableGetNElements(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MemorySegment SCIPhashtableGetNElements$address() {
        return SCIPhashtableGetNElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long SCIPhashtableGetNElements(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static long SCIPhashtableGetNElements(MemorySegment hashtable) {
        var mh$ = SCIPhashtableGetNElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableGetNElements", hashtable);
            }
            return (long)mh$.invokeExact(hashtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableGetNEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableGetNEntries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashtableGetNEntries(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static FunctionDescriptor SCIPhashtableGetNEntries$descriptor() {
        return SCIPhashtableGetNEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashtableGetNEntries(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MethodHandle SCIPhashtableGetNEntries$handle() {
        return SCIPhashtableGetNEntries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashtableGetNEntries(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MemorySegment SCIPhashtableGetNEntries$address() {
        return SCIPhashtableGetNEntries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashtableGetNEntries(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static int SCIPhashtableGetNEntries(MemorySegment hashtable) {
        var mh$ = SCIPhashtableGetNEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableGetNEntries", hashtable);
            }
            return (int)mh$.invokeExact(hashtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableGetEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableGetEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPhashtableGetEntry(SCIP_HASHTABLE *hashtable, int entryidx)
     * }
     */
    public static FunctionDescriptor SCIPhashtableGetEntry$descriptor() {
        return SCIPhashtableGetEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPhashtableGetEntry(SCIP_HASHTABLE *hashtable, int entryidx)
     * }
     */
    public static MethodHandle SCIPhashtableGetEntry$handle() {
        return SCIPhashtableGetEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPhashtableGetEntry(SCIP_HASHTABLE *hashtable, int entryidx)
     * }
     */
    public static MemorySegment SCIPhashtableGetEntry$address() {
        return SCIPhashtableGetEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPhashtableGetEntry(SCIP_HASHTABLE *hashtable, int entryidx)
     * }
     */
    public static MemorySegment SCIPhashtableGetEntry(MemorySegment hashtable, int entryidx) {
        var mh$ = SCIPhashtableGetEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableGetEntry", hashtable, entryidx);
            }
            return (MemorySegment)mh$.invokeExact(hashtable, entryidx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtableGetLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtableGetLoad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPhashtableGetLoad(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static FunctionDescriptor SCIPhashtableGetLoad$descriptor() {
        return SCIPhashtableGetLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPhashtableGetLoad(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MethodHandle SCIPhashtableGetLoad$handle() {
        return SCIPhashtableGetLoad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPhashtableGetLoad(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static MemorySegment SCIPhashtableGetLoad$address() {
        return SCIPhashtableGetLoad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPhashtableGetLoad(SCIP_HASHTABLE *hashtable)
     * }
     */
    public static double SCIPhashtableGetLoad(MemorySegment hashtable) {
        var mh$ = SCIPhashtableGetLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtableGetLoad", hashtable);
            }
            return (double)mh$.invokeExact(hashtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashtablePrintStatistics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashtablePrintStatistics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashtablePrintStatistics(SCIP_HASHTABLE *hashtable, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPhashtablePrintStatistics$descriptor() {
        return SCIPhashtablePrintStatistics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashtablePrintStatistics(SCIP_HASHTABLE *hashtable, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPhashtablePrintStatistics$handle() {
        return SCIPhashtablePrintStatistics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashtablePrintStatistics(SCIP_HASHTABLE *hashtable, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPhashtablePrintStatistics$address() {
        return SCIPhashtablePrintStatistics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashtablePrintStatistics(SCIP_HASHTABLE *hashtable, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static void SCIPhashtablePrintStatistics(MemorySegment hashtable, MemorySegment messagehdlr) {
        var mh$ = SCIPhashtablePrintStatistics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashtablePrintStatistics", hashtable, messagehdlr);
            }
            mh$.invokeExact(hashtable, messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPcalcMultihashSize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPcalcMultihashSize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPcalcMultihashSize(int minsize)
     * }
     */
    public static FunctionDescriptor SCIPcalcMultihashSize$descriptor() {
        return SCIPcalcMultihashSize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPcalcMultihashSize(int minsize)
     * }
     */
    public static MethodHandle SCIPcalcMultihashSize$handle() {
        return SCIPcalcMultihashSize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPcalcMultihashSize(int minsize)
     * }
     */
    public static MemorySegment SCIPcalcMultihashSize$address() {
        return SCIPcalcMultihashSize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPcalcMultihashSize(int minsize)
     * }
     */
    public static int SCIPcalcMultihashSize(int minsize) {
        var mh$ = SCIPcalcMultihashSize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPcalcMultihashSize", minsize);
            }
            return (int)mh$.invokeExact(minsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashCreate(SCIP_MULTIHASH **multihash, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static FunctionDescriptor SCIPmultihashCreate$descriptor() {
        return SCIPmultihashCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashCreate(SCIP_MULTIHASH **multihash, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static MethodHandle SCIPmultihashCreate$handle() {
        return SCIPmultihashCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashCreate(SCIP_MULTIHASH **multihash, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static MemorySegment SCIPmultihashCreate$address() {
        return SCIPmultihashCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashCreate(SCIP_MULTIHASH **multihash, BMS_BLKMEM *blkmem, int tablesize, void *(*hashgetkey)(void *, void *), unsigned int (*hashkeyeq)(void *, void *, void *), uint64_t (*hashkeyval)(void *, void *), void *userptr)
     * }
     */
    public static int SCIPmultihashCreate(MemorySegment multihash, MemorySegment blkmem, int tablesize, MemorySegment hashgetkey, MemorySegment hashkeyeq, MemorySegment hashkeyval, MemorySegment userptr) {
        var mh$ = SCIPmultihashCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashCreate", multihash, blkmem, tablesize, hashgetkey, hashkeyeq, hashkeyval, userptr);
            }
            return (int)mh$.invokeExact(multihash, blkmem, tablesize, hashgetkey, hashkeyeq, hashkeyval, userptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmultihashFree(SCIP_MULTIHASH **multihash)
     * }
     */
    public static FunctionDescriptor SCIPmultihashFree$descriptor() {
        return SCIPmultihashFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmultihashFree(SCIP_MULTIHASH **multihash)
     * }
     */
    public static MethodHandle SCIPmultihashFree$handle() {
        return SCIPmultihashFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmultihashFree(SCIP_MULTIHASH **multihash)
     * }
     */
    public static MemorySegment SCIPmultihashFree$address() {
        return SCIPmultihashFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmultihashFree(SCIP_MULTIHASH **multihash)
     * }
     */
    public static void SCIPmultihashFree(MemorySegment multihash) {
        var mh$ = SCIPmultihashFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashFree", multihash);
            }
            mh$.invokeExact(multihash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static FunctionDescriptor SCIPmultihashInsert$descriptor() {
        return SCIPmultihashInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MethodHandle SCIPmultihashInsert$handle() {
        return SCIPmultihashInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MemorySegment SCIPmultihashInsert$address() {
        return SCIPmultihashInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static int SCIPmultihashInsert(MemorySegment multihash, MemorySegment element) {
        var mh$ = SCIPmultihashInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashInsert", multihash, element);
            }
            return (int)mh$.invokeExact(multihash, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashSafeInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashSafeInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashSafeInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static FunctionDescriptor SCIPmultihashSafeInsert$descriptor() {
        return SCIPmultihashSafeInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashSafeInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MethodHandle SCIPmultihashSafeInsert$handle() {
        return SCIPmultihashSafeInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashSafeInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MemorySegment SCIPmultihashSafeInsert$address() {
        return SCIPmultihashSafeInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashSafeInsert(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static int SCIPmultihashSafeInsert(MemorySegment multihash, MemorySegment element) {
        var mh$ = SCIPmultihashSafeInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashSafeInsert", multihash, element);
            }
            return (int)mh$.invokeExact(multihash, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashRetrieve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashRetrieve");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieve(SCIP_MULTIHASH *multihash, void *key)
     * }
     */
    public static FunctionDescriptor SCIPmultihashRetrieve$descriptor() {
        return SCIPmultihashRetrieve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieve(SCIP_MULTIHASH *multihash, void *key)
     * }
     */
    public static MethodHandle SCIPmultihashRetrieve$handle() {
        return SCIPmultihashRetrieve.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieve(SCIP_MULTIHASH *multihash, void *key)
     * }
     */
    public static MemorySegment SCIPmultihashRetrieve$address() {
        return SCIPmultihashRetrieve.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieve(SCIP_MULTIHASH *multihash, void *key)
     * }
     */
    public static MemorySegment SCIPmultihashRetrieve(MemorySegment multihash, MemorySegment key) {
        var mh$ = SCIPmultihashRetrieve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashRetrieve", multihash, key);
            }
            return (MemorySegment)mh$.invokeExact(multihash, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashRetrieveNext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashRetrieveNext");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieveNext(SCIP_MULTIHASH *multihash, SCIP_MULTIHASHLIST **multihashlist, void *key)
     * }
     */
    public static FunctionDescriptor SCIPmultihashRetrieveNext$descriptor() {
        return SCIPmultihashRetrieveNext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieveNext(SCIP_MULTIHASH *multihash, SCIP_MULTIHASHLIST **multihashlist, void *key)
     * }
     */
    public static MethodHandle SCIPmultihashRetrieveNext$handle() {
        return SCIPmultihashRetrieveNext.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieveNext(SCIP_MULTIHASH *multihash, SCIP_MULTIHASHLIST **multihashlist, void *key)
     * }
     */
    public static MemorySegment SCIPmultihashRetrieveNext$address() {
        return SCIPmultihashRetrieveNext.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPmultihashRetrieveNext(SCIP_MULTIHASH *multihash, SCIP_MULTIHASHLIST **multihashlist, void *key)
     * }
     */
    public static MemorySegment SCIPmultihashRetrieveNext(MemorySegment multihash, MemorySegment multihashlist, MemorySegment key) {
        var mh$ = SCIPmultihashRetrieveNext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashRetrieveNext", multihash, multihashlist, key);
            }
            return (MemorySegment)mh$.invokeExact(multihash, multihashlist, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashExists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashExists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPmultihashExists(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static FunctionDescriptor SCIPmultihashExists$descriptor() {
        return SCIPmultihashExists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPmultihashExists(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MethodHandle SCIPmultihashExists$handle() {
        return SCIPmultihashExists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPmultihashExists(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MemorySegment SCIPmultihashExists$address() {
        return SCIPmultihashExists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPmultihashExists(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static int SCIPmultihashExists(MemorySegment multihash, MemorySegment element) {
        var mh$ = SCIPmultihashExists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashExists", multihash, element);
            }
            return (int)mh$.invokeExact(multihash, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashRemove(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static FunctionDescriptor SCIPmultihashRemove$descriptor() {
        return SCIPmultihashRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashRemove(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MethodHandle SCIPmultihashRemove$handle() {
        return SCIPmultihashRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashRemove(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static MemorySegment SCIPmultihashRemove$address() {
        return SCIPmultihashRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPmultihashRemove(SCIP_MULTIHASH *multihash, void *element)
     * }
     */
    public static int SCIPmultihashRemove(MemorySegment multihash, MemorySegment element) {
        var mh$ = SCIPmultihashRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashRemove", multihash, element);
            }
            return (int)mh$.invokeExact(multihash, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashRemoveAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashRemoveAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmultihashRemoveAll(SCIP_MULTIHASH *multihash)
     * }
     */
    public static FunctionDescriptor SCIPmultihashRemoveAll$descriptor() {
        return SCIPmultihashRemoveAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmultihashRemoveAll(SCIP_MULTIHASH *multihash)
     * }
     */
    public static MethodHandle SCIPmultihashRemoveAll$handle() {
        return SCIPmultihashRemoveAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmultihashRemoveAll(SCIP_MULTIHASH *multihash)
     * }
     */
    public static MemorySegment SCIPmultihashRemoveAll$address() {
        return SCIPmultihashRemoveAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmultihashRemoveAll(SCIP_MULTIHASH *multihash)
     * }
     */
    public static void SCIPmultihashRemoveAll(MemorySegment multihash) {
        var mh$ = SCIPmultihashRemoveAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashRemoveAll", multihash);
            }
            mh$.invokeExact(multihash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashGetNElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG_LONG,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashGetNElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * long long SCIPmultihashGetNElements(SCIP_MULTIHASH *multihash)
     * }
     */
    public static FunctionDescriptor SCIPmultihashGetNElements$descriptor() {
        return SCIPmultihashGetNElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * long long SCIPmultihashGetNElements(SCIP_MULTIHASH *multihash)
     * }
     */
    public static MethodHandle SCIPmultihashGetNElements$handle() {
        return SCIPmultihashGetNElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * long long SCIPmultihashGetNElements(SCIP_MULTIHASH *multihash)
     * }
     */
    public static MemorySegment SCIPmultihashGetNElements$address() {
        return SCIPmultihashGetNElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * long long SCIPmultihashGetNElements(SCIP_MULTIHASH *multihash)
     * }
     */
    public static long SCIPmultihashGetNElements(MemorySegment multihash) {
        var mh$ = SCIPmultihashGetNElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashGetNElements", multihash);
            }
            return (long)mh$.invokeExact(multihash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashGetLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashGetLoad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPmultihashGetLoad(SCIP_MULTIHASH *multihash)
     * }
     */
    public static FunctionDescriptor SCIPmultihashGetLoad$descriptor() {
        return SCIPmultihashGetLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPmultihashGetLoad(SCIP_MULTIHASH *multihash)
     * }
     */
    public static MethodHandle SCIPmultihashGetLoad$handle() {
        return SCIPmultihashGetLoad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPmultihashGetLoad(SCIP_MULTIHASH *multihash)
     * }
     */
    public static MemorySegment SCIPmultihashGetLoad$address() {
        return SCIPmultihashGetLoad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPmultihashGetLoad(SCIP_MULTIHASH *multihash)
     * }
     */
    public static double SCIPmultihashGetLoad(MemorySegment multihash) {
        var mh$ = SCIPmultihashGetLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashGetLoad", multihash);
            }
            return (double)mh$.invokeExact(multihash);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPmultihashPrintStatistics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPmultihashPrintStatistics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPmultihashPrintStatistics(SCIP_MULTIHASH *multihash, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPmultihashPrintStatistics$descriptor() {
        return SCIPmultihashPrintStatistics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPmultihashPrintStatistics(SCIP_MULTIHASH *multihash, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPmultihashPrintStatistics$handle() {
        return SCIPmultihashPrintStatistics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPmultihashPrintStatistics(SCIP_MULTIHASH *multihash, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPmultihashPrintStatistics$address() {
        return SCIPmultihashPrintStatistics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPmultihashPrintStatistics(SCIP_MULTIHASH *multihash, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static void SCIPmultihashPrintStatistics(MemorySegment multihash, MemorySegment messagehdlr) {
        var mh$ = SCIPmultihashPrintStatistics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPmultihashPrintStatistics", multihash, messagehdlr);
            }
            mh$.invokeExact(multihash, messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashKeyEqString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashKeyEqString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqString(void *userptr, void *key1, void *key2)
     * }
     */
    public static FunctionDescriptor SCIPhashKeyEqString$descriptor() {
        return SCIPhashKeyEqString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqString(void *userptr, void *key1, void *key2)
     * }
     */
    public static MethodHandle SCIPhashKeyEqString$handle() {
        return SCIPhashKeyEqString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqString(void *userptr, void *key1, void *key2)
     * }
     */
    public static MemorySegment SCIPhashKeyEqString$address() {
        return SCIPhashKeyEqString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqString(void *userptr, void *key1, void *key2)
     * }
     */
    public static int SCIPhashKeyEqString(MemorySegment userptr, MemorySegment key1, MemorySegment key2) {
        var mh$ = SCIPhashKeyEqString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashKeyEqString", userptr, key1, key2);
            }
            return (int)mh$.invokeExact(userptr, key1, key2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashKeyValString {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashKeyValString");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValString(void *userptr, void *key)
     * }
     */
    public static FunctionDescriptor SCIPhashKeyValString$descriptor() {
        return SCIPhashKeyValString.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValString(void *userptr, void *key)
     * }
     */
    public static MethodHandle SCIPhashKeyValString$handle() {
        return SCIPhashKeyValString.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValString(void *userptr, void *key)
     * }
     */
    public static MemorySegment SCIPhashKeyValString$address() {
        return SCIPhashKeyValString.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValString(void *userptr, void *key)
     * }
     */
    public static long SCIPhashKeyValString(MemorySegment userptr, MemorySegment key) {
        var mh$ = SCIPhashKeyValString.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashKeyValString", userptr, key);
            }
            return (long)mh$.invokeExact(userptr, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashGetKeyStandard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashGetKeyStandard");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPhashGetKeyStandard(void *userptr, void *elem)
     * }
     */
    public static FunctionDescriptor SCIPhashGetKeyStandard$descriptor() {
        return SCIPhashGetKeyStandard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPhashGetKeyStandard(void *userptr, void *elem)
     * }
     */
    public static MethodHandle SCIPhashGetKeyStandard$handle() {
        return SCIPhashGetKeyStandard.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPhashGetKeyStandard(void *userptr, void *elem)
     * }
     */
    public static MemorySegment SCIPhashGetKeyStandard$address() {
        return SCIPhashGetKeyStandard.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPhashGetKeyStandard(void *userptr, void *elem)
     * }
     */
    public static MemorySegment SCIPhashGetKeyStandard(MemorySegment userptr, MemorySegment elem) {
        var mh$ = SCIPhashGetKeyStandard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashGetKeyStandard", userptr, elem);
            }
            return (MemorySegment)mh$.invokeExact(userptr, elem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashKeyEqPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashKeyEqPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqPtr(void *userptr, void *key1, void *key2)
     * }
     */
    public static FunctionDescriptor SCIPhashKeyEqPtr$descriptor() {
        return SCIPhashKeyEqPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqPtr(void *userptr, void *key1, void *key2)
     * }
     */
    public static MethodHandle SCIPhashKeyEqPtr$handle() {
        return SCIPhashKeyEqPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqPtr(void *userptr, void *key1, void *key2)
     * }
     */
    public static MemorySegment SCIPhashKeyEqPtr$address() {
        return SCIPhashKeyEqPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashKeyEqPtr(void *userptr, void *key1, void *key2)
     * }
     */
    public static int SCIPhashKeyEqPtr(MemorySegment userptr, MemorySegment key1, MemorySegment key2) {
        var mh$ = SCIPhashKeyEqPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashKeyEqPtr", userptr, key1, key2);
            }
            return (int)mh$.invokeExact(userptr, key1, key2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashKeyValPtr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_LONG,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashKeyValPtr");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValPtr(void *userptr, void *key)
     * }
     */
    public static FunctionDescriptor SCIPhashKeyValPtr$descriptor() {
        return SCIPhashKeyValPtr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValPtr(void *userptr, void *key)
     * }
     */
    public static MethodHandle SCIPhashKeyValPtr$handle() {
        return SCIPhashKeyValPtr.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValPtr(void *userptr, void *key)
     * }
     */
    public static MemorySegment SCIPhashKeyValPtr$address() {
        return SCIPhashKeyValPtr.ADDR;
    }

    /**
     * {@snippet lang=c :
     * uint64_t SCIPhashKeyValPtr(void *userptr, void *key)
     * }
     */
    public static long SCIPhashKeyValPtr(MemorySegment userptr, MemorySegment key) {
        var mh$ = SCIPhashKeyValPtr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashKeyValPtr", userptr, key);
            }
            return (long)mh$.invokeExact(userptr, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapCreate(SCIP_HASHMAP **hashmap, BMS_BLKMEM *blkmem, int mapsize)
     * }
     */
    public static FunctionDescriptor SCIPhashmapCreate$descriptor() {
        return SCIPhashmapCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapCreate(SCIP_HASHMAP **hashmap, BMS_BLKMEM *blkmem, int mapsize)
     * }
     */
    public static MethodHandle SCIPhashmapCreate$handle() {
        return SCIPhashmapCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapCreate(SCIP_HASHMAP **hashmap, BMS_BLKMEM *blkmem, int mapsize)
     * }
     */
    public static MemorySegment SCIPhashmapCreate$address() {
        return SCIPhashmapCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapCreate(SCIP_HASHMAP **hashmap, BMS_BLKMEM *blkmem, int mapsize)
     * }
     */
    public static int SCIPhashmapCreate(MemorySegment hashmap, MemorySegment blkmem, int mapsize) {
        var mh$ = SCIPhashmapCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapCreate", hashmap, blkmem, mapsize);
            }
            return (int)mh$.invokeExact(hashmap, blkmem, mapsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashmapFree(SCIP_HASHMAP **hashmap)
     * }
     */
    public static FunctionDescriptor SCIPhashmapFree$descriptor() {
        return SCIPhashmapFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashmapFree(SCIP_HASHMAP **hashmap)
     * }
     */
    public static MethodHandle SCIPhashmapFree$handle() {
        return SCIPhashmapFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashmapFree(SCIP_HASHMAP **hashmap)
     * }
     */
    public static MemorySegment SCIPhashmapFree$address() {
        return SCIPhashmapFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashmapFree(SCIP_HASHMAP **hashmap)
     * }
     */
    public static void SCIPhashmapFree(MemorySegment hashmap) {
        var mh$ = SCIPhashmapFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapFree", hashmap);
            }
            mh$.invokeExact(hashmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsert(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapInsert$descriptor() {
        return SCIPhashmapInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsert(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static MethodHandle SCIPhashmapInsert$handle() {
        return SCIPhashmapInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsert(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static MemorySegment SCIPhashmapInsert$address() {
        return SCIPhashmapInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsert(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static int SCIPhashmapInsert(MemorySegment hashmap, MemorySegment origin, MemorySegment image) {
        var mh$ = SCIPhashmapInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapInsert", hashmap, origin, image);
            }
            return (int)mh$.invokeExact(hashmap, origin, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapInsertInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapInsertInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapInsertInt$descriptor() {
        return SCIPhashmapInsertInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static MethodHandle SCIPhashmapInsertInt$handle() {
        return SCIPhashmapInsertInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static MemorySegment SCIPhashmapInsertInt$address() {
        return SCIPhashmapInsertInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static int SCIPhashmapInsertInt(MemorySegment hashmap, MemorySegment origin, int image) {
        var mh$ = SCIPhashmapInsertInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapInsertInt", hashmap, origin, image);
            }
            return (int)mh$.invokeExact(hashmap, origin, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapInsertReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapInsertReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapInsertReal$descriptor() {
        return SCIPhashmapInsertReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static MethodHandle SCIPhashmapInsertReal$handle() {
        return SCIPhashmapInsertReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static MemorySegment SCIPhashmapInsertReal$address() {
        return SCIPhashmapInsertReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapInsertReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static int SCIPhashmapInsertReal(MemorySegment hashmap, MemorySegment origin, double image) {
        var mh$ = SCIPhashmapInsertReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapInsertReal", hashmap, origin, image);
            }
            return (int)mh$.invokeExact(hashmap, origin, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapGetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPhashmapGetImage(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static FunctionDescriptor SCIPhashmapGetImage$descriptor() {
        return SCIPhashmapGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPhashmapGetImage(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MethodHandle SCIPhashmapGetImage$handle() {
        return SCIPhashmapGetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPhashmapGetImage(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MemorySegment SCIPhashmapGetImage$address() {
        return SCIPhashmapGetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPhashmapGetImage(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MemorySegment SCIPhashmapGetImage(MemorySegment hashmap, MemorySegment origin) {
        var mh$ = SCIPhashmapGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapGetImage", hashmap, origin);
            }
            return (MemorySegment)mh$.invokeExact(hashmap, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapGetImageInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapGetImageInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashmapGetImageInt(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static FunctionDescriptor SCIPhashmapGetImageInt$descriptor() {
        return SCIPhashmapGetImageInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashmapGetImageInt(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MethodHandle SCIPhashmapGetImageInt$handle() {
        return SCIPhashmapGetImageInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashmapGetImageInt(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MemorySegment SCIPhashmapGetImageInt$address() {
        return SCIPhashmapGetImageInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashmapGetImageInt(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static int SCIPhashmapGetImageInt(MemorySegment hashmap, MemorySegment origin) {
        var mh$ = SCIPhashmapGetImageInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapGetImageInt", hashmap, origin);
            }
            return (int)mh$.invokeExact(hashmap, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapGetImageReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapGetImageReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPhashmapGetImageReal(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static FunctionDescriptor SCIPhashmapGetImageReal$descriptor() {
        return SCIPhashmapGetImageReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPhashmapGetImageReal(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MethodHandle SCIPhashmapGetImageReal$handle() {
        return SCIPhashmapGetImageReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPhashmapGetImageReal(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MemorySegment SCIPhashmapGetImageReal$address() {
        return SCIPhashmapGetImageReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPhashmapGetImageReal(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static double SCIPhashmapGetImageReal(MemorySegment hashmap, MemorySegment origin) {
        var mh$ = SCIPhashmapGetImageReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapGetImageReal", hashmap, origin);
            }
            return (double)mh$.invokeExact(hashmap, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapSetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapSetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImage(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapSetImage$descriptor() {
        return SCIPhashmapSetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImage(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static MethodHandle SCIPhashmapSetImage$handle() {
        return SCIPhashmapSetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImage(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static MemorySegment SCIPhashmapSetImage$address() {
        return SCIPhashmapSetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImage(SCIP_HASHMAP *hashmap, void *origin, void *image)
     * }
     */
    public static int SCIPhashmapSetImage(MemorySegment hashmap, MemorySegment origin, MemorySegment image) {
        var mh$ = SCIPhashmapSetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapSetImage", hashmap, origin, image);
            }
            return (int)mh$.invokeExact(hashmap, origin, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapSetImageInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapSetImageInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapSetImageInt$descriptor() {
        return SCIPhashmapSetImageInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static MethodHandle SCIPhashmapSetImageInt$handle() {
        return SCIPhashmapSetImageInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static MemorySegment SCIPhashmapSetImageInt$address() {
        return SCIPhashmapSetImageInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageInt(SCIP_HASHMAP *hashmap, void *origin, int image)
     * }
     */
    public static int SCIPhashmapSetImageInt(MemorySegment hashmap, MemorySegment origin, int image) {
        var mh$ = SCIPhashmapSetImageInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapSetImageInt", hashmap, origin, image);
            }
            return (int)mh$.invokeExact(hashmap, origin, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapSetImageReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapSetImageReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapSetImageReal$descriptor() {
        return SCIPhashmapSetImageReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static MethodHandle SCIPhashmapSetImageReal$handle() {
        return SCIPhashmapSetImageReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static MemorySegment SCIPhashmapSetImageReal$address() {
        return SCIPhashmapSetImageReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapSetImageReal(SCIP_HASHMAP *hashmap, void *origin, double image)
     * }
     */
    public static int SCIPhashmapSetImageReal(MemorySegment hashmap, MemorySegment origin, double image) {
        var mh$ = SCIPhashmapSetImageReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapSetImageReal", hashmap, origin, image);
            }
            return (int)mh$.invokeExact(hashmap, origin, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapExists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapExists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashmapExists(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static FunctionDescriptor SCIPhashmapExists$descriptor() {
        return SCIPhashmapExists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashmapExists(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MethodHandle SCIPhashmapExists$handle() {
        return SCIPhashmapExists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashmapExists(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MemorySegment SCIPhashmapExists$address() {
        return SCIPhashmapExists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashmapExists(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static int SCIPhashmapExists(MemorySegment hashmap, MemorySegment origin) {
        var mh$ = SCIPhashmapExists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapExists", hashmap, origin);
            }
            return (int)mh$.invokeExact(hashmap, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemove(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static FunctionDescriptor SCIPhashmapRemove$descriptor() {
        return SCIPhashmapRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemove(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MethodHandle SCIPhashmapRemove$handle() {
        return SCIPhashmapRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemove(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static MemorySegment SCIPhashmapRemove$address() {
        return SCIPhashmapRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemove(SCIP_HASHMAP *hashmap, void *origin)
     * }
     */
    public static int SCIPhashmapRemove(MemorySegment hashmap, MemorySegment origin) {
        var mh$ = SCIPhashmapRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapRemove", hashmap, origin);
            }
            return (int)mh$.invokeExact(hashmap, origin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapPrintStatistics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapPrintStatistics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashmapPrintStatistics(SCIP_HASHMAP *hashmap, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPhashmapPrintStatistics$descriptor() {
        return SCIPhashmapPrintStatistics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashmapPrintStatistics(SCIP_HASHMAP *hashmap, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPhashmapPrintStatistics$handle() {
        return SCIPhashmapPrintStatistics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashmapPrintStatistics(SCIP_HASHMAP *hashmap, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPhashmapPrintStatistics$address() {
        return SCIPhashmapPrintStatistics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashmapPrintStatistics(SCIP_HASHMAP *hashmap, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static void SCIPhashmapPrintStatistics(MemorySegment hashmap, MemorySegment messagehdlr) {
        var mh$ = SCIPhashmapPrintStatistics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapPrintStatistics", hashmap, messagehdlr);
            }
            mh$.invokeExact(hashmap, messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapIsEmpty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapIsEmpty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashmapIsEmpty(SCIP_HASHMAP *hashmap)
     * }
     */
    public static FunctionDescriptor SCIPhashmapIsEmpty$descriptor() {
        return SCIPhashmapIsEmpty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashmapIsEmpty(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MethodHandle SCIPhashmapIsEmpty$handle() {
        return SCIPhashmapIsEmpty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashmapIsEmpty(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MemorySegment SCIPhashmapIsEmpty$address() {
        return SCIPhashmapIsEmpty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashmapIsEmpty(SCIP_HASHMAP *hashmap)
     * }
     */
    public static int SCIPhashmapIsEmpty(MemorySegment hashmap) {
        var mh$ = SCIPhashmapIsEmpty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapIsEmpty", hashmap);
            }
            return (int)mh$.invokeExact(hashmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapGetNElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapGetNElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashmapGetNElements(SCIP_HASHMAP *hashmap)
     * }
     */
    public static FunctionDescriptor SCIPhashmapGetNElements$descriptor() {
        return SCIPhashmapGetNElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashmapGetNElements(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MethodHandle SCIPhashmapGetNElements$handle() {
        return SCIPhashmapGetNElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashmapGetNElements(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MemorySegment SCIPhashmapGetNElements$address() {
        return SCIPhashmapGetNElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashmapGetNElements(SCIP_HASHMAP *hashmap)
     * }
     */
    public static int SCIPhashmapGetNElements(MemorySegment hashmap) {
        var mh$ = SCIPhashmapGetNElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapGetNElements", hashmap);
            }
            return (int)mh$.invokeExact(hashmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapGetNEntries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapGetNEntries");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashmapGetNEntries(SCIP_HASHMAP *hashmap)
     * }
     */
    public static FunctionDescriptor SCIPhashmapGetNEntries$descriptor() {
        return SCIPhashmapGetNEntries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashmapGetNEntries(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MethodHandle SCIPhashmapGetNEntries$handle() {
        return SCIPhashmapGetNEntries.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashmapGetNEntries(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MemorySegment SCIPhashmapGetNEntries$address() {
        return SCIPhashmapGetNEntries.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashmapGetNEntries(SCIP_HASHMAP *hashmap)
     * }
     */
    public static int SCIPhashmapGetNEntries(MemorySegment hashmap) {
        var mh$ = SCIPhashmapGetNEntries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapGetNEntries", hashmap);
            }
            return (int)mh$.invokeExact(hashmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapGetEntry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapGetEntry");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_HASHMAPENTRY *SCIPhashmapGetEntry(SCIP_HASHMAP *hashmap, int entryidx)
     * }
     */
    public static FunctionDescriptor SCIPhashmapGetEntry$descriptor() {
        return SCIPhashmapGetEntry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_HASHMAPENTRY *SCIPhashmapGetEntry(SCIP_HASHMAP *hashmap, int entryidx)
     * }
     */
    public static MethodHandle SCIPhashmapGetEntry$handle() {
        return SCIPhashmapGetEntry.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_HASHMAPENTRY *SCIPhashmapGetEntry(SCIP_HASHMAP *hashmap, int entryidx)
     * }
     */
    public static MemorySegment SCIPhashmapGetEntry$address() {
        return SCIPhashmapGetEntry.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_HASHMAPENTRY *SCIPhashmapGetEntry(SCIP_HASHMAP *hashmap, int entryidx)
     * }
     */
    public static MemorySegment SCIPhashmapGetEntry(MemorySegment hashmap, int entryidx) {
        var mh$ = SCIPhashmapGetEntry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapGetEntry", hashmap, entryidx);
            }
            return (MemorySegment)mh$.invokeExact(hashmap, entryidx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntryGetOrigin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntryGetOrigin");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetOrigin(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntryGetOrigin$descriptor() {
        return SCIPhashmapEntryGetOrigin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetOrigin(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MethodHandle SCIPhashmapEntryGetOrigin$handle() {
        return SCIPhashmapEntryGetOrigin.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetOrigin(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MemorySegment SCIPhashmapEntryGetOrigin$address() {
        return SCIPhashmapEntryGetOrigin.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetOrigin(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MemorySegment SCIPhashmapEntryGetOrigin(MemorySegment entry) {
        var mh$ = SCIPhashmapEntryGetOrigin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntryGetOrigin", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntryGetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntryGetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetImage(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntryGetImage$descriptor() {
        return SCIPhashmapEntryGetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetImage(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MethodHandle SCIPhashmapEntryGetImage$handle() {
        return SCIPhashmapEntryGetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetImage(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MemorySegment SCIPhashmapEntryGetImage$address() {
        return SCIPhashmapEntryGetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPhashmapEntryGetImage(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MemorySegment SCIPhashmapEntryGetImage(MemorySegment entry) {
        var mh$ = SCIPhashmapEntryGetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntryGetImage", entry);
            }
            return (MemorySegment)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntryGetImageInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntryGetImageInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashmapEntryGetImageInt(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntryGetImageInt$descriptor() {
        return SCIPhashmapEntryGetImageInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashmapEntryGetImageInt(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MethodHandle SCIPhashmapEntryGetImageInt$handle() {
        return SCIPhashmapEntryGetImageInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashmapEntryGetImageInt(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MemorySegment SCIPhashmapEntryGetImageInt$address() {
        return SCIPhashmapEntryGetImageInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashmapEntryGetImageInt(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static int SCIPhashmapEntryGetImageInt(MemorySegment entry) {
        var mh$ = SCIPhashmapEntryGetImageInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntryGetImageInt", entry);
            }
            return (int)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntryGetImageReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_DOUBLE,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntryGetImageReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * double SCIPhashmapEntryGetImageReal(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntryGetImageReal$descriptor() {
        return SCIPhashmapEntryGetImageReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * double SCIPhashmapEntryGetImageReal(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MethodHandle SCIPhashmapEntryGetImageReal$handle() {
        return SCIPhashmapEntryGetImageReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * double SCIPhashmapEntryGetImageReal(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static MemorySegment SCIPhashmapEntryGetImageReal$address() {
        return SCIPhashmapEntryGetImageReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * double SCIPhashmapEntryGetImageReal(SCIP_HASHMAPENTRY *entry)
     * }
     */
    public static double SCIPhashmapEntryGetImageReal(MemorySegment entry) {
        var mh$ = SCIPhashmapEntryGetImageReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntryGetImageReal", entry);
            }
            return (double)mh$.invokeExact(entry);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntrySetImage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntrySetImage");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImage(SCIP_HASHMAPENTRY *entry, void *image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntrySetImage$descriptor() {
        return SCIPhashmapEntrySetImage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImage(SCIP_HASHMAPENTRY *entry, void *image)
     * }
     */
    public static MethodHandle SCIPhashmapEntrySetImage$handle() {
        return SCIPhashmapEntrySetImage.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImage(SCIP_HASHMAPENTRY *entry, void *image)
     * }
     */
    public static MemorySegment SCIPhashmapEntrySetImage$address() {
        return SCIPhashmapEntrySetImage.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImage(SCIP_HASHMAPENTRY *entry, void *image)
     * }
     */
    public static void SCIPhashmapEntrySetImage(MemorySegment entry, MemorySegment image) {
        var mh$ = SCIPhashmapEntrySetImage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntrySetImage", entry, image);
            }
            mh$.invokeExact(entry, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntrySetImageInt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntrySetImageInt");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageInt(SCIP_HASHMAPENTRY *entry, int image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntrySetImageInt$descriptor() {
        return SCIPhashmapEntrySetImageInt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageInt(SCIP_HASHMAPENTRY *entry, int image)
     * }
     */
    public static MethodHandle SCIPhashmapEntrySetImageInt$handle() {
        return SCIPhashmapEntrySetImageInt.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageInt(SCIP_HASHMAPENTRY *entry, int image)
     * }
     */
    public static MemorySegment SCIPhashmapEntrySetImageInt$address() {
        return SCIPhashmapEntrySetImageInt.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageInt(SCIP_HASHMAPENTRY *entry, int image)
     * }
     */
    public static void SCIPhashmapEntrySetImageInt(MemorySegment entry, int image) {
        var mh$ = SCIPhashmapEntrySetImageInt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntrySetImageInt", entry, image);
            }
            mh$.invokeExact(entry, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapEntrySetImageReal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_DOUBLE
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapEntrySetImageReal");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageReal(SCIP_HASHMAPENTRY *entry, double image)
     * }
     */
    public static FunctionDescriptor SCIPhashmapEntrySetImageReal$descriptor() {
        return SCIPhashmapEntrySetImageReal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageReal(SCIP_HASHMAPENTRY *entry, double image)
     * }
     */
    public static MethodHandle SCIPhashmapEntrySetImageReal$handle() {
        return SCIPhashmapEntrySetImageReal.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageReal(SCIP_HASHMAPENTRY *entry, double image)
     * }
     */
    public static MemorySegment SCIPhashmapEntrySetImageReal$address() {
        return SCIPhashmapEntrySetImageReal.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashmapEntrySetImageReal(SCIP_HASHMAPENTRY *entry, double image)
     * }
     */
    public static void SCIPhashmapEntrySetImageReal(MemorySegment entry, double image) {
        var mh$ = SCIPhashmapEntrySetImageReal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapEntrySetImageReal", entry, image);
            }
            mh$.invokeExact(entry, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashmapRemoveAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashmapRemoveAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemoveAll(SCIP_HASHMAP *hashmap)
     * }
     */
    public static FunctionDescriptor SCIPhashmapRemoveAll$descriptor() {
        return SCIPhashmapRemoveAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemoveAll(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MethodHandle SCIPhashmapRemoveAll$handle() {
        return SCIPhashmapRemoveAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemoveAll(SCIP_HASHMAP *hashmap)
     * }
     */
    public static MemorySegment SCIPhashmapRemoveAll$address() {
        return SCIPhashmapRemoveAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashmapRemoveAll(SCIP_HASHMAP *hashmap)
     * }
     */
    public static int SCIPhashmapRemoveAll(MemorySegment hashmap) {
        var mh$ = SCIPhashmapRemoveAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashmapRemoveAll", hashmap);
            }
            return (int)mh$.invokeExact(hashmap);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetCreate(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem, int size)
     * }
     */
    public static FunctionDescriptor SCIPhashsetCreate$descriptor() {
        return SCIPhashsetCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetCreate(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem, int size)
     * }
     */
    public static MethodHandle SCIPhashsetCreate$handle() {
        return SCIPhashsetCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetCreate(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem, int size)
     * }
     */
    public static MemorySegment SCIPhashsetCreate$address() {
        return SCIPhashsetCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetCreate(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem, int size)
     * }
     */
    public static int SCIPhashsetCreate(MemorySegment hashset, MemorySegment blkmem, int size) {
        var mh$ = SCIPhashsetCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetCreate", hashset, blkmem, size);
            }
            return (int)mh$.invokeExact(hashset, blkmem, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashsetFree(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem)
     * }
     */
    public static FunctionDescriptor SCIPhashsetFree$descriptor() {
        return SCIPhashsetFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashsetFree(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem)
     * }
     */
    public static MethodHandle SCIPhashsetFree$handle() {
        return SCIPhashsetFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashsetFree(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem)
     * }
     */
    public static MemorySegment SCIPhashsetFree$address() {
        return SCIPhashsetFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashsetFree(SCIP_HASHSET **hashset, BMS_BLKMEM *blkmem)
     * }
     */
    public static void SCIPhashsetFree(MemorySegment hashset, MemorySegment blkmem) {
        var mh$ = SCIPhashsetFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetFree", hashset, blkmem);
            }
            mh$.invokeExact(hashset, blkmem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetInsert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetInsert");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetInsert(SCIP_HASHSET *hashset, BMS_BLKMEM *blkmem, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashsetInsert$descriptor() {
        return SCIPhashsetInsert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetInsert(SCIP_HASHSET *hashset, BMS_BLKMEM *blkmem, void *element)
     * }
     */
    public static MethodHandle SCIPhashsetInsert$handle() {
        return SCIPhashsetInsert.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetInsert(SCIP_HASHSET *hashset, BMS_BLKMEM *blkmem, void *element)
     * }
     */
    public static MemorySegment SCIPhashsetInsert$address() {
        return SCIPhashsetInsert.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetInsert(SCIP_HASHSET *hashset, BMS_BLKMEM *blkmem, void *element)
     * }
     */
    public static int SCIPhashsetInsert(MemorySegment hashset, MemorySegment blkmem, MemorySegment element) {
        var mh$ = SCIPhashsetInsert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetInsert", hashset, blkmem, element);
            }
            return (int)mh$.invokeExact(hashset, blkmem, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetExists {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetExists");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashsetExists(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashsetExists$descriptor() {
        return SCIPhashsetExists.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashsetExists(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static MethodHandle SCIPhashsetExists$handle() {
        return SCIPhashsetExists.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashsetExists(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static MemorySegment SCIPhashsetExists$address() {
        return SCIPhashsetExists.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashsetExists(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static int SCIPhashsetExists(MemorySegment hashset, MemorySegment element) {
        var mh$ = SCIPhashsetExists.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetExists", hashset, element);
            }
            return (int)mh$.invokeExact(hashset, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetRemove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetRemove");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetRemove(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static FunctionDescriptor SCIPhashsetRemove$descriptor() {
        return SCIPhashsetRemove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetRemove(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static MethodHandle SCIPhashsetRemove$handle() {
        return SCIPhashsetRemove.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetRemove(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static MemorySegment SCIPhashsetRemove$address() {
        return SCIPhashsetRemove.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPhashsetRemove(SCIP_HASHSET *hashset, void *element)
     * }
     */
    public static int SCIPhashsetRemove(MemorySegment hashset, MemorySegment element) {
        var mh$ = SCIPhashsetRemove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetRemove", hashset, element);
            }
            return (int)mh$.invokeExact(hashset, element);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetPrintStatistics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetPrintStatistics");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashsetPrintStatistics(SCIP_HASHSET *hashset, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static FunctionDescriptor SCIPhashsetPrintStatistics$descriptor() {
        return SCIPhashsetPrintStatistics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashsetPrintStatistics(SCIP_HASHSET *hashset, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MethodHandle SCIPhashsetPrintStatistics$handle() {
        return SCIPhashsetPrintStatistics.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashsetPrintStatistics(SCIP_HASHSET *hashset, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static MemorySegment SCIPhashsetPrintStatistics$address() {
        return SCIPhashsetPrintStatistics.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashsetPrintStatistics(SCIP_HASHSET *hashset, SCIP_MESSAGEHDLR *messagehdlr)
     * }
     */
    public static void SCIPhashsetPrintStatistics(MemorySegment hashset, MemorySegment messagehdlr) {
        var mh$ = SCIPhashsetPrintStatistics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetPrintStatistics", hashset, messagehdlr);
            }
            mh$.invokeExact(hashset, messagehdlr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetIsEmpty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetIsEmpty");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPhashsetIsEmpty(SCIP_HASHSET *hashset)
     * }
     */
    public static FunctionDescriptor SCIPhashsetIsEmpty$descriptor() {
        return SCIPhashsetIsEmpty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPhashsetIsEmpty(SCIP_HASHSET *hashset)
     * }
     */
    public static MethodHandle SCIPhashsetIsEmpty$handle() {
        return SCIPhashsetIsEmpty.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPhashsetIsEmpty(SCIP_HASHSET *hashset)
     * }
     */
    public static MemorySegment SCIPhashsetIsEmpty$address() {
        return SCIPhashsetIsEmpty.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPhashsetIsEmpty(SCIP_HASHSET *hashset)
     * }
     */
    public static int SCIPhashsetIsEmpty(MemorySegment hashset) {
        var mh$ = SCIPhashsetIsEmpty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetIsEmpty", hashset);
            }
            return (int)mh$.invokeExact(hashset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetGetNElements {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetGetNElements");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashsetGetNElements(SCIP_HASHSET *hashset)
     * }
     */
    public static FunctionDescriptor SCIPhashsetGetNElements$descriptor() {
        return SCIPhashsetGetNElements.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashsetGetNElements(SCIP_HASHSET *hashset)
     * }
     */
    public static MethodHandle SCIPhashsetGetNElements$handle() {
        return SCIPhashsetGetNElements.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashsetGetNElements(SCIP_HASHSET *hashset)
     * }
     */
    public static MemorySegment SCIPhashsetGetNElements$address() {
        return SCIPhashsetGetNElements.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashsetGetNElements(SCIP_HASHSET *hashset)
     * }
     */
    public static int SCIPhashsetGetNElements(MemorySegment hashset) {
        var mh$ = SCIPhashsetGetNElements.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetGetNElements", hashset);
            }
            return (int)mh$.invokeExact(hashset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetGetNSlots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetGetNSlots");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPhashsetGetNSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static FunctionDescriptor SCIPhashsetGetNSlots$descriptor() {
        return SCIPhashsetGetNSlots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPhashsetGetNSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static MethodHandle SCIPhashsetGetNSlots$handle() {
        return SCIPhashsetGetNSlots.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPhashsetGetNSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static MemorySegment SCIPhashsetGetNSlots$address() {
        return SCIPhashsetGetNSlots.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPhashsetGetNSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static int SCIPhashsetGetNSlots(MemorySegment hashset) {
        var mh$ = SCIPhashsetGetNSlots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetGetNSlots", hashset);
            }
            return (int)mh$.invokeExact(hashset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetGetSlots {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetGetSlots");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void **SCIPhashsetGetSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static FunctionDescriptor SCIPhashsetGetSlots$descriptor() {
        return SCIPhashsetGetSlots.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void **SCIPhashsetGetSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static MethodHandle SCIPhashsetGetSlots$handle() {
        return SCIPhashsetGetSlots.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void **SCIPhashsetGetSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static MemorySegment SCIPhashsetGetSlots$address() {
        return SCIPhashsetGetSlots.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void **SCIPhashsetGetSlots(SCIP_HASHSET *hashset)
     * }
     */
    public static MemorySegment SCIPhashsetGetSlots(MemorySegment hashset) {
        var mh$ = SCIPhashsetGetSlots.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetGetSlots", hashset);
            }
            return (MemorySegment)mh$.invokeExact(hashset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPhashsetRemoveAll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPhashsetRemoveAll");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPhashsetRemoveAll(SCIP_HASHSET *hashset)
     * }
     */
    public static FunctionDescriptor SCIPhashsetRemoveAll$descriptor() {
        return SCIPhashsetRemoveAll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPhashsetRemoveAll(SCIP_HASHSET *hashset)
     * }
     */
    public static MethodHandle SCIPhashsetRemoveAll$handle() {
        return SCIPhashsetRemoveAll.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPhashsetRemoveAll(SCIP_HASHSET *hashset)
     * }
     */
    public static MemorySegment SCIPhashsetRemoveAll$address() {
        return SCIPhashsetRemoveAll.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPhashsetRemoveAll(SCIP_HASHSET *hashset)
     * }
     */
    public static void SCIPhashsetRemoveAll(MemorySegment hashset) {
        var mh$ = SCIPhashsetRemoveAll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPhashsetRemoveAll", hashset);
            }
            mh$.invokeExact(hashset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPactivityCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPactivityCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPactivityCreate(SCIP_RESOURCEACTIVITY **activity, SCIP_VAR *var, int duration, int demand)
     * }
     */
    public static FunctionDescriptor SCIPactivityCreate$descriptor() {
        return SCIPactivityCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPactivityCreate(SCIP_RESOURCEACTIVITY **activity, SCIP_VAR *var, int duration, int demand)
     * }
     */
    public static MethodHandle SCIPactivityCreate$handle() {
        return SCIPactivityCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPactivityCreate(SCIP_RESOURCEACTIVITY **activity, SCIP_VAR *var, int duration, int demand)
     * }
     */
    public static MemorySegment SCIPactivityCreate$address() {
        return SCIPactivityCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPactivityCreate(SCIP_RESOURCEACTIVITY **activity, SCIP_VAR *var, int duration, int demand)
     * }
     */
    public static int SCIPactivityCreate(MemorySegment activity, MemorySegment var_, int duration, int demand) {
        var mh$ = SCIPactivityCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPactivityCreate", activity, var_, duration, demand);
            }
            return (int)mh$.invokeExact(activity, var_, duration, demand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPactivityFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPactivityFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPactivityFree(SCIP_RESOURCEACTIVITY **activity)
     * }
     */
    public static FunctionDescriptor SCIPactivityFree$descriptor() {
        return SCIPactivityFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPactivityFree(SCIP_RESOURCEACTIVITY **activity)
     * }
     */
    public static MethodHandle SCIPactivityFree$handle() {
        return SCIPactivityFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPactivityFree(SCIP_RESOURCEACTIVITY **activity)
     * }
     */
    public static MemorySegment SCIPactivityFree$address() {
        return SCIPactivityFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPactivityFree(SCIP_RESOURCEACTIVITY **activity)
     * }
     */
    public static void SCIPactivityFree(MemorySegment activity) {
        var mh$ = SCIPactivityFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPactivityFree", activity);
            }
            mh$.invokeExact(activity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPactivityGetVar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPactivityGetVar");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPactivityGetVar(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static FunctionDescriptor SCIPactivityGetVar$descriptor() {
        return SCIPactivityGetVar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPactivityGetVar(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MethodHandle SCIPactivityGetVar$handle() {
        return SCIPactivityGetVar.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_VAR *SCIPactivityGetVar(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MemorySegment SCIPactivityGetVar$address() {
        return SCIPactivityGetVar.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_VAR *SCIPactivityGetVar(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MemorySegment SCIPactivityGetVar(MemorySegment activity) {
        var mh$ = SCIPactivityGetVar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPactivityGetVar", activity);
            }
            return (MemorySegment)mh$.invokeExact(activity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPactivityGetDuration {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPactivityGetDuration");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPactivityGetDuration(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static FunctionDescriptor SCIPactivityGetDuration$descriptor() {
        return SCIPactivityGetDuration.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPactivityGetDuration(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MethodHandle SCIPactivityGetDuration$handle() {
        return SCIPactivityGetDuration.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPactivityGetDuration(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MemorySegment SCIPactivityGetDuration$address() {
        return SCIPactivityGetDuration.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPactivityGetDuration(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static int SCIPactivityGetDuration(MemorySegment activity) {
        var mh$ = SCIPactivityGetDuration.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPactivityGetDuration", activity);
            }
            return (int)mh$.invokeExact(activity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPactivityGetDemand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPactivityGetDemand");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPactivityGetDemand(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static FunctionDescriptor SCIPactivityGetDemand$descriptor() {
        return SCIPactivityGetDemand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPactivityGetDemand(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MethodHandle SCIPactivityGetDemand$handle() {
        return SCIPactivityGetDemand.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPactivityGetDemand(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MemorySegment SCIPactivityGetDemand$address() {
        return SCIPactivityGetDemand.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPactivityGetDemand(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static int SCIPactivityGetDemand(MemorySegment activity) {
        var mh$ = SCIPactivityGetDemand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPactivityGetDemand", activity);
            }
            return (int)mh$.invokeExact(activity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPactivityGetEnergy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPactivityGetEnergy");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPactivityGetEnergy(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static FunctionDescriptor SCIPactivityGetEnergy$descriptor() {
        return SCIPactivityGetEnergy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPactivityGetEnergy(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MethodHandle SCIPactivityGetEnergy$handle() {
        return SCIPactivityGetEnergy.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPactivityGetEnergy(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static MemorySegment SCIPactivityGetEnergy$address() {
        return SCIPactivityGetEnergy.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPactivityGetEnergy(SCIP_RESOURCEACTIVITY *activity)
     * }
     */
    public static int SCIPactivityGetEnergy(MemorySegment activity) {
        var mh$ = SCIPactivityGetEnergy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPactivityGetEnergy", activity);
            }
            return (int)mh$.invokeExact(activity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileCreate(SCIP_PROFILE **profile, int capacity)
     * }
     */
    public static FunctionDescriptor SCIPprofileCreate$descriptor() {
        return SCIPprofileCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileCreate(SCIP_PROFILE **profile, int capacity)
     * }
     */
    public static MethodHandle SCIPprofileCreate$handle() {
        return SCIPprofileCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileCreate(SCIP_PROFILE **profile, int capacity)
     * }
     */
    public static MemorySegment SCIPprofileCreate$address() {
        return SCIPprofileCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileCreate(SCIP_PROFILE **profile, int capacity)
     * }
     */
    public static int SCIPprofileCreate(MemorySegment profile, int capacity) {
        var mh$ = SCIPprofileCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileCreate", profile, capacity);
            }
            return (int)mh$.invokeExact(profile, capacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPprofileFree(SCIP_PROFILE **profile)
     * }
     */
    public static FunctionDescriptor SCIPprofileFree$descriptor() {
        return SCIPprofileFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPprofileFree(SCIP_PROFILE **profile)
     * }
     */
    public static MethodHandle SCIPprofileFree$handle() {
        return SCIPprofileFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPprofileFree(SCIP_PROFILE **profile)
     * }
     */
    public static MemorySegment SCIPprofileFree$address() {
        return SCIPprofileFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPprofileFree(SCIP_PROFILE **profile)
     * }
     */
    public static void SCIPprofileFree(MemorySegment profile) {
        var mh$ = SCIPprofileFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileFree", profile);
            }
            mh$.invokeExact(profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofilePrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofilePrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPprofilePrint(SCIP_PROFILE *profile, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPprofilePrint$descriptor() {
        return SCIPprofilePrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPprofilePrint(SCIP_PROFILE *profile, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static MethodHandle SCIPprofilePrint$handle() {
        return SCIPprofilePrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPprofilePrint(SCIP_PROFILE *profile, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static MemorySegment SCIPprofilePrint$address() {
        return SCIPprofilePrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPprofilePrint(SCIP_PROFILE *profile, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static void SCIPprofilePrint(MemorySegment profile, MemorySegment messagehdlr, MemorySegment file) {
        var mh$ = SCIPprofilePrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofilePrint", profile, messagehdlr, file);
            }
            mh$.invokeExact(profile, messagehdlr, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetCapacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetCapacity");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPprofileGetCapacity(SCIP_PROFILE *profile)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetCapacity$descriptor() {
        return SCIPprofileGetCapacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPprofileGetCapacity(SCIP_PROFILE *profile)
     * }
     */
    public static MethodHandle SCIPprofileGetCapacity$handle() {
        return SCIPprofileGetCapacity.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPprofileGetCapacity(SCIP_PROFILE *profile)
     * }
     */
    public static MemorySegment SCIPprofileGetCapacity$address() {
        return SCIPprofileGetCapacity.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPprofileGetCapacity(SCIP_PROFILE *profile)
     * }
     */
    public static int SCIPprofileGetCapacity(MemorySegment profile) {
        var mh$ = SCIPprofileGetCapacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetCapacity", profile);
            }
            return (int)mh$.invokeExact(profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetNTimepoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetNTimepoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPprofileGetNTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetNTimepoints$descriptor() {
        return SCIPprofileGetNTimepoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPprofileGetNTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static MethodHandle SCIPprofileGetNTimepoints$handle() {
        return SCIPprofileGetNTimepoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPprofileGetNTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static MemorySegment SCIPprofileGetNTimepoints$address() {
        return SCIPprofileGetNTimepoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPprofileGetNTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static int SCIPprofileGetNTimepoints(MemorySegment profile) {
        var mh$ = SCIPprofileGetNTimepoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetNTimepoints", profile);
            }
            return (int)mh$.invokeExact(profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetTimepoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetTimepoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *SCIPprofileGetTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetTimepoints$descriptor() {
        return SCIPprofileGetTimepoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *SCIPprofileGetTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static MethodHandle SCIPprofileGetTimepoints$handle() {
        return SCIPprofileGetTimepoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *SCIPprofileGetTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static MemorySegment SCIPprofileGetTimepoints$address() {
        return SCIPprofileGetTimepoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *SCIPprofileGetTimepoints(SCIP_PROFILE *profile)
     * }
     */
    public static MemorySegment SCIPprofileGetTimepoints(MemorySegment profile) {
        var mh$ = SCIPprofileGetTimepoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetTimepoints", profile);
            }
            return (MemorySegment)mh$.invokeExact(profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetLoads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetLoads");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *SCIPprofileGetLoads(SCIP_PROFILE *profile)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetLoads$descriptor() {
        return SCIPprofileGetLoads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *SCIPprofileGetLoads(SCIP_PROFILE *profile)
     * }
     */
    public static MethodHandle SCIPprofileGetLoads$handle() {
        return SCIPprofileGetLoads.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *SCIPprofileGetLoads(SCIP_PROFILE *profile)
     * }
     */
    public static MemorySegment SCIPprofileGetLoads$address() {
        return SCIPprofileGetLoads.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *SCIPprofileGetLoads(SCIP_PROFILE *profile)
     * }
     */
    public static MemorySegment SCIPprofileGetLoads(MemorySegment profile) {
        var mh$ = SCIPprofileGetLoads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetLoads", profile);
            }
            return (MemorySegment)mh$.invokeExact(profile);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetTime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetTime");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPprofileGetTime(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetTime$descriptor() {
        return SCIPprofileGetTime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPprofileGetTime(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static MethodHandle SCIPprofileGetTime$handle() {
        return SCIPprofileGetTime.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPprofileGetTime(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static MemorySegment SCIPprofileGetTime$address() {
        return SCIPprofileGetTime.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPprofileGetTime(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static int SCIPprofileGetTime(MemorySegment profile, int pos) {
        var mh$ = SCIPprofileGetTime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetTime", profile, pos);
            }
            return (int)mh$.invokeExact(profile, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetLoad {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetLoad");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPprofileGetLoad(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetLoad$descriptor() {
        return SCIPprofileGetLoad.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPprofileGetLoad(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static MethodHandle SCIPprofileGetLoad$handle() {
        return SCIPprofileGetLoad.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPprofileGetLoad(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static MemorySegment SCIPprofileGetLoad$address() {
        return SCIPprofileGetLoad.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPprofileGetLoad(SCIP_PROFILE *profile, int pos)
     * }
     */
    public static int SCIPprofileGetLoad(MemorySegment profile, int pos) {
        var mh$ = SCIPprofileGetLoad.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetLoad", profile, pos);
            }
            return (int)mh$.invokeExact(profile, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileFindLeft {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileFindLeft");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * unsigned int SCIPprofileFindLeft(SCIP_PROFILE *profile, int timepoint, int *pos)
     * }
     */
    public static FunctionDescriptor SCIPprofileFindLeft$descriptor() {
        return SCIPprofileFindLeft.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * unsigned int SCIPprofileFindLeft(SCIP_PROFILE *profile, int timepoint, int *pos)
     * }
     */
    public static MethodHandle SCIPprofileFindLeft$handle() {
        return SCIPprofileFindLeft.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * unsigned int SCIPprofileFindLeft(SCIP_PROFILE *profile, int timepoint, int *pos)
     * }
     */
    public static MemorySegment SCIPprofileFindLeft$address() {
        return SCIPprofileFindLeft.ADDR;
    }

    /**
     * {@snippet lang=c :
     * unsigned int SCIPprofileFindLeft(SCIP_PROFILE *profile, int timepoint, int *pos)
     * }
     */
    public static int SCIPprofileFindLeft(MemorySegment profile, int timepoint, MemorySegment pos) {
        var mh$ = SCIPprofileFindLeft.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileFindLeft", profile, timepoint, pos);
            }
            return (int)mh$.invokeExact(profile, timepoint, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileInsertCore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileInsertCore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileInsertCore(SCIP_PROFILE *profile, int left, int right, int height, int *pos, unsigned int *infeasible)
     * }
     */
    public static FunctionDescriptor SCIPprofileInsertCore$descriptor() {
        return SCIPprofileInsertCore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileInsertCore(SCIP_PROFILE *profile, int left, int right, int height, int *pos, unsigned int *infeasible)
     * }
     */
    public static MethodHandle SCIPprofileInsertCore$handle() {
        return SCIPprofileInsertCore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileInsertCore(SCIP_PROFILE *profile, int left, int right, int height, int *pos, unsigned int *infeasible)
     * }
     */
    public static MemorySegment SCIPprofileInsertCore$address() {
        return SCIPprofileInsertCore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileInsertCore(SCIP_PROFILE *profile, int left, int right, int height, int *pos, unsigned int *infeasible)
     * }
     */
    public static int SCIPprofileInsertCore(MemorySegment profile, int left, int right, int height, MemorySegment pos, MemorySegment infeasible) {
        var mh$ = SCIPprofileInsertCore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileInsertCore", profile, left, right, height, pos, infeasible);
            }
            return (int)mh$.invokeExact(profile, left, right, height, pos, infeasible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileDeleteCore {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileDeleteCore");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileDeleteCore(SCIP_PROFILE *profile, int left, int right, int height)
     * }
     */
    public static FunctionDescriptor SCIPprofileDeleteCore$descriptor() {
        return SCIPprofileDeleteCore.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileDeleteCore(SCIP_PROFILE *profile, int left, int right, int height)
     * }
     */
    public static MethodHandle SCIPprofileDeleteCore$handle() {
        return SCIPprofileDeleteCore.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileDeleteCore(SCIP_PROFILE *profile, int left, int right, int height)
     * }
     */
    public static MemorySegment SCIPprofileDeleteCore$address() {
        return SCIPprofileDeleteCore.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPprofileDeleteCore(SCIP_PROFILE *profile, int left, int right, int height)
     * }
     */
    public static int SCIPprofileDeleteCore(MemorySegment profile, int left, int right, int height) {
        var mh$ = SCIPprofileDeleteCore.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileDeleteCore", profile, left, right, height);
            }
            return (int)mh$.invokeExact(profile, left, right, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetEarliestFeasibleStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetEarliestFeasibleStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPprofileGetEarliestFeasibleStart(SCIP_PROFILE *profile, int est, int lst, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetEarliestFeasibleStart$descriptor() {
        return SCIPprofileGetEarliestFeasibleStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPprofileGetEarliestFeasibleStart(SCIP_PROFILE *profile, int est, int lst, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static MethodHandle SCIPprofileGetEarliestFeasibleStart$handle() {
        return SCIPprofileGetEarliestFeasibleStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPprofileGetEarliestFeasibleStart(SCIP_PROFILE *profile, int est, int lst, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static MemorySegment SCIPprofileGetEarliestFeasibleStart$address() {
        return SCIPprofileGetEarliestFeasibleStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPprofileGetEarliestFeasibleStart(SCIP_PROFILE *profile, int est, int lst, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static int SCIPprofileGetEarliestFeasibleStart(MemorySegment profile, int est, int lst, int duration, int height, MemorySegment infeasible) {
        var mh$ = SCIPprofileGetEarliestFeasibleStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetEarliestFeasibleStart", profile, est, lst, duration, height, infeasible);
            }
            return (int)mh$.invokeExact(profile, est, lst, duration, height, infeasible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPprofileGetLatestFeasibleStart {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPprofileGetLatestFeasibleStart");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPprofileGetLatestFeasibleStart(SCIP_PROFILE *profile, int lb, int ub, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static FunctionDescriptor SCIPprofileGetLatestFeasibleStart$descriptor() {
        return SCIPprofileGetLatestFeasibleStart.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPprofileGetLatestFeasibleStart(SCIP_PROFILE *profile, int lb, int ub, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static MethodHandle SCIPprofileGetLatestFeasibleStart$handle() {
        return SCIPprofileGetLatestFeasibleStart.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPprofileGetLatestFeasibleStart(SCIP_PROFILE *profile, int lb, int ub, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static MemorySegment SCIPprofileGetLatestFeasibleStart$address() {
        return SCIPprofileGetLatestFeasibleStart.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPprofileGetLatestFeasibleStart(SCIP_PROFILE *profile, int lb, int ub, int duration, int height, unsigned int *infeasible)
     * }
     */
    public static int SCIPprofileGetLatestFeasibleStart(MemorySegment profile, int lb, int ub, int duration, int height, MemorySegment infeasible) {
        var mh$ = SCIPprofileGetLatestFeasibleStart.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPprofileGetLatestFeasibleStart", profile, lb, ub, duration, height, infeasible);
            }
            return (int)mh$.invokeExact(profile, lb, ub, duration, height, infeasible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphResize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphResize");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphResize(SCIP_DIGRAPH *digraph, int nnodes)
     * }
     */
    public static FunctionDescriptor SCIPdigraphResize$descriptor() {
        return SCIPdigraphResize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphResize(SCIP_DIGRAPH *digraph, int nnodes)
     * }
     */
    public static MethodHandle SCIPdigraphResize$handle() {
        return SCIPdigraphResize.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphResize(SCIP_DIGRAPH *digraph, int nnodes)
     * }
     */
    public static MemorySegment SCIPdigraphResize$address() {
        return SCIPdigraphResize.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphResize(SCIP_DIGRAPH *digraph, int nnodes)
     * }
     */
    public static int SCIPdigraphResize(MemorySegment digraph, int nnodes) {
        var mh$ = SCIPdigraphResize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphResize", digraph, nnodes);
            }
            return (int)mh$.invokeExact(digraph, nnodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphSetSizes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphSetSizes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetSizes(SCIP_DIGRAPH *digraph, int *sizes)
     * }
     */
    public static FunctionDescriptor SCIPdigraphSetSizes$descriptor() {
        return SCIPdigraphSetSizes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetSizes(SCIP_DIGRAPH *digraph, int *sizes)
     * }
     */
    public static MethodHandle SCIPdigraphSetSizes$handle() {
        return SCIPdigraphSetSizes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetSizes(SCIP_DIGRAPH *digraph, int *sizes)
     * }
     */
    public static MemorySegment SCIPdigraphSetSizes$address() {
        return SCIPdigraphSetSizes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetSizes(SCIP_DIGRAPH *digraph, int *sizes)
     * }
     */
    public static int SCIPdigraphSetSizes(MemorySegment digraph, MemorySegment sizes) {
        var mh$ = SCIPdigraphSetSizes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphSetSizes", digraph, sizes);
            }
            return (int)mh$.invokeExact(digraph, sizes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphFree(SCIP_DIGRAPH **digraph)
     * }
     */
    public static FunctionDescriptor SCIPdigraphFree$descriptor() {
        return SCIPdigraphFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphFree(SCIP_DIGRAPH **digraph)
     * }
     */
    public static MethodHandle SCIPdigraphFree$handle() {
        return SCIPdigraphFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphFree(SCIP_DIGRAPH **digraph)
     * }
     */
    public static MemorySegment SCIPdigraphFree$address() {
        return SCIPdigraphFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphFree(SCIP_DIGRAPH **digraph)
     * }
     */
    public static void SCIPdigraphFree(MemorySegment digraph) {
        var mh$ = SCIPdigraphFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphFree", digraph);
            }
            mh$.invokeExact(digraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphAddArc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphAddArc");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArc(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static FunctionDescriptor SCIPdigraphAddArc$descriptor() {
        return SCIPdigraphAddArc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArc(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static MethodHandle SCIPdigraphAddArc$handle() {
        return SCIPdigraphAddArc.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArc(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static MemorySegment SCIPdigraphAddArc$address() {
        return SCIPdigraphAddArc.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArc(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static int SCIPdigraphAddArc(MemorySegment digraph, int startnode, int endnode, MemorySegment data) {
        var mh$ = SCIPdigraphAddArc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphAddArc", digraph, startnode, endnode, data);
            }
            return (int)mh$.invokeExact(digraph, startnode, endnode, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphAddArcSafe {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphAddArcSafe");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArcSafe(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static FunctionDescriptor SCIPdigraphAddArcSafe$descriptor() {
        return SCIPdigraphAddArcSafe.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArcSafe(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static MethodHandle SCIPdigraphAddArcSafe$handle() {
        return SCIPdigraphAddArcSafe.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArcSafe(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static MemorySegment SCIPdigraphAddArcSafe$address() {
        return SCIPdigraphAddArcSafe.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphAddArcSafe(SCIP_DIGRAPH *digraph, int startnode, int endnode, void *data)
     * }
     */
    public static int SCIPdigraphAddArcSafe(MemorySegment digraph, int startnode, int endnode, MemorySegment data) {
        var mh$ = SCIPdigraphAddArcSafe.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphAddArcSafe", digraph, startnode, endnode, data);
            }
            return (int)mh$.invokeExact(digraph, startnode, endnode, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphSetNSuccessors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphSetNSuccessors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetNSuccessors(SCIP_DIGRAPH *digraph, int node, int nsuccessors)
     * }
     */
    public static FunctionDescriptor SCIPdigraphSetNSuccessors$descriptor() {
        return SCIPdigraphSetNSuccessors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetNSuccessors(SCIP_DIGRAPH *digraph, int node, int nsuccessors)
     * }
     */
    public static MethodHandle SCIPdigraphSetNSuccessors$handle() {
        return SCIPdigraphSetNSuccessors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetNSuccessors(SCIP_DIGRAPH *digraph, int node, int nsuccessors)
     * }
     */
    public static MemorySegment SCIPdigraphSetNSuccessors$address() {
        return SCIPdigraphSetNSuccessors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphSetNSuccessors(SCIP_DIGRAPH *digraph, int node, int nsuccessors)
     * }
     */
    public static int SCIPdigraphSetNSuccessors(MemorySegment digraph, int node, int nsuccessors) {
        var mh$ = SCIPdigraphSetNSuccessors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphSetNSuccessors", digraph, node, nsuccessors);
            }
            return (int)mh$.invokeExact(digraph, node, nsuccessors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetNNodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetNNodes");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNNodes(SCIP_DIGRAPH *digraph)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetNNodes$descriptor() {
        return SCIPdigraphGetNNodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNNodes(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MethodHandle SCIPdigraphGetNNodes$handle() {
        return SCIPdigraphGetNNodes.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNNodes(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MemorySegment SCIPdigraphGetNNodes$address() {
        return SCIPdigraphGetNNodes.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPdigraphGetNNodes(SCIP_DIGRAPH *digraph)
     * }
     */
    public static int SCIPdigraphGetNNodes(MemorySegment digraph) {
        var mh$ = SCIPdigraphGetNNodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetNNodes", digraph);
            }
            return (int)mh$.invokeExact(digraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetNodeData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetNodeData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPdigraphGetNodeData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetNodeData$descriptor() {
        return SCIPdigraphGetNodeData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPdigraphGetNodeData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MethodHandle SCIPdigraphGetNodeData$handle() {
        return SCIPdigraphGetNodeData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPdigraphGetNodeData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetNodeData$address() {
        return SCIPdigraphGetNodeData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPdigraphGetNodeData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetNodeData(MemorySegment digraph, int node) {
        var mh$ = SCIPdigraphGetNodeData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetNodeData", digraph, node);
            }
            return (MemorySegment)mh$.invokeExact(digraph, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphSetNodeData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphSetNodeData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphSetNodeData(SCIP_DIGRAPH *digraph, void *dataptr, int node)
     * }
     */
    public static FunctionDescriptor SCIPdigraphSetNodeData$descriptor() {
        return SCIPdigraphSetNodeData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphSetNodeData(SCIP_DIGRAPH *digraph, void *dataptr, int node)
     * }
     */
    public static MethodHandle SCIPdigraphSetNodeData$handle() {
        return SCIPdigraphSetNodeData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphSetNodeData(SCIP_DIGRAPH *digraph, void *dataptr, int node)
     * }
     */
    public static MemorySegment SCIPdigraphSetNodeData$address() {
        return SCIPdigraphSetNodeData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphSetNodeData(SCIP_DIGRAPH *digraph, void *dataptr, int node)
     * }
     */
    public static void SCIPdigraphSetNodeData(MemorySegment digraph, MemorySegment dataptr, int node) {
        var mh$ = SCIPdigraphSetNodeData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphSetNodeData", digraph, dataptr, node);
            }
            mh$.invokeExact(digraph, dataptr, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetNArcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetNArcs");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNArcs(SCIP_DIGRAPH *digraph)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetNArcs$descriptor() {
        return SCIPdigraphGetNArcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNArcs(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MethodHandle SCIPdigraphGetNArcs$handle() {
        return SCIPdigraphGetNArcs.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNArcs(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MemorySegment SCIPdigraphGetNArcs$address() {
        return SCIPdigraphGetNArcs.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPdigraphGetNArcs(SCIP_DIGRAPH *digraph)
     * }
     */
    public static int SCIPdigraphGetNArcs(MemorySegment digraph) {
        var mh$ = SCIPdigraphGetNArcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetNArcs", digraph);
            }
            return (int)mh$.invokeExact(digraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetNSuccessors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetNSuccessors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetNSuccessors$descriptor() {
        return SCIPdigraphGetNSuccessors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MethodHandle SCIPdigraphGetNSuccessors$handle() {
        return SCIPdigraphGetNSuccessors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetNSuccessors$address() {
        return SCIPdigraphGetNSuccessors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPdigraphGetNSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static int SCIPdigraphGetNSuccessors(MemorySegment digraph, int node) {
        var mh$ = SCIPdigraphGetNSuccessors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetNSuccessors", digraph, node);
            }
            return (int)mh$.invokeExact(digraph, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetSuccessors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetSuccessors");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int *SCIPdigraphGetSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetSuccessors$descriptor() {
        return SCIPdigraphGetSuccessors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int *SCIPdigraphGetSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MethodHandle SCIPdigraphGetSuccessors$handle() {
        return SCIPdigraphGetSuccessors.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int *SCIPdigraphGetSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetSuccessors$address() {
        return SCIPdigraphGetSuccessors.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int *SCIPdigraphGetSuccessors(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetSuccessors(MemorySegment digraph, int node) {
        var mh$ = SCIPdigraphGetSuccessors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetSuccessors", digraph, node);
            }
            return (MemorySegment)mh$.invokeExact(digraph, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetSuccessorsData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_INT
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetSuccessorsData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void **SCIPdigraphGetSuccessorsData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetSuccessorsData$descriptor() {
        return SCIPdigraphGetSuccessorsData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void **SCIPdigraphGetSuccessorsData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MethodHandle SCIPdigraphGetSuccessorsData$handle() {
        return SCIPdigraphGetSuccessorsData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void **SCIPdigraphGetSuccessorsData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetSuccessorsData$address() {
        return SCIPdigraphGetSuccessorsData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void **SCIPdigraphGetSuccessorsData(SCIP_DIGRAPH *digraph, int node)
     * }
     */
    public static MemorySegment SCIPdigraphGetSuccessorsData(MemorySegment digraph, int node) {
        var mh$ = SCIPdigraphGetSuccessorsData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetSuccessorsData", digraph, node);
            }
            return (MemorySegment)mh$.invokeExact(digraph, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetArticulationPoints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetArticulationPoints");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphGetArticulationPoints(SCIP_DIGRAPH *digraph, int **articulations, int *narticulations)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetArticulationPoints$descriptor() {
        return SCIPdigraphGetArticulationPoints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphGetArticulationPoints(SCIP_DIGRAPH *digraph, int **articulations, int *narticulations)
     * }
     */
    public static MethodHandle SCIPdigraphGetArticulationPoints$handle() {
        return SCIPdigraphGetArticulationPoints.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphGetArticulationPoints(SCIP_DIGRAPH *digraph, int **articulations, int *narticulations)
     * }
     */
    public static MemorySegment SCIPdigraphGetArticulationPoints$address() {
        return SCIPdigraphGetArticulationPoints.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphGetArticulationPoints(SCIP_DIGRAPH *digraph, int **articulations, int *narticulations)
     * }
     */
    public static int SCIPdigraphGetArticulationPoints(MemorySegment digraph, MemorySegment articulations, MemorySegment narticulations) {
        var mh$ = SCIPdigraphGetArticulationPoints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetArticulationPoints", digraph, articulations, narticulations);
            }
            return (int)mh$.invokeExact(digraph, articulations, narticulations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphComputeUndirectedComponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphComputeUndirectedComponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeUndirectedComponents(SCIP_DIGRAPH *digraph, int minsize, int *components, int *ncomponents)
     * }
     */
    public static FunctionDescriptor SCIPdigraphComputeUndirectedComponents$descriptor() {
        return SCIPdigraphComputeUndirectedComponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeUndirectedComponents(SCIP_DIGRAPH *digraph, int minsize, int *components, int *ncomponents)
     * }
     */
    public static MethodHandle SCIPdigraphComputeUndirectedComponents$handle() {
        return SCIPdigraphComputeUndirectedComponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeUndirectedComponents(SCIP_DIGRAPH *digraph, int minsize, int *components, int *ncomponents)
     * }
     */
    public static MemorySegment SCIPdigraphComputeUndirectedComponents$address() {
        return SCIPdigraphComputeUndirectedComponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeUndirectedComponents(SCIP_DIGRAPH *digraph, int minsize, int *components, int *ncomponents)
     * }
     */
    public static int SCIPdigraphComputeUndirectedComponents(MemorySegment digraph, int minsize, MemorySegment components, MemorySegment ncomponents) {
        var mh$ = SCIPdigraphComputeUndirectedComponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphComputeUndirectedComponents", digraph, minsize, components, ncomponents);
            }
            return (int)mh$.invokeExact(digraph, minsize, components, ncomponents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphComputeDirectedComponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphComputeDirectedComponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeDirectedComponents(SCIP_DIGRAPH *digraph, int compidx, int *strongcomponents, int *strongcompstartidx, int *nstrongcomponents)
     * }
     */
    public static FunctionDescriptor SCIPdigraphComputeDirectedComponents$descriptor() {
        return SCIPdigraphComputeDirectedComponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeDirectedComponents(SCIP_DIGRAPH *digraph, int compidx, int *strongcomponents, int *strongcompstartidx, int *nstrongcomponents)
     * }
     */
    public static MethodHandle SCIPdigraphComputeDirectedComponents$handle() {
        return SCIPdigraphComputeDirectedComponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeDirectedComponents(SCIP_DIGRAPH *digraph, int compidx, int *strongcomponents, int *strongcompstartidx, int *nstrongcomponents)
     * }
     */
    public static MemorySegment SCIPdigraphComputeDirectedComponents$address() {
        return SCIPdigraphComputeDirectedComponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphComputeDirectedComponents(SCIP_DIGRAPH *digraph, int compidx, int *strongcomponents, int *strongcompstartidx, int *nstrongcomponents)
     * }
     */
    public static int SCIPdigraphComputeDirectedComponents(MemorySegment digraph, int compidx, MemorySegment strongcomponents, MemorySegment strongcompstartidx, MemorySegment nstrongcomponents) {
        var mh$ = SCIPdigraphComputeDirectedComponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphComputeDirectedComponents", digraph, compidx, strongcomponents, strongcompstartidx, nstrongcomponents);
            }
            return (int)mh$.invokeExact(digraph, compidx, strongcomponents, strongcompstartidx, nstrongcomponents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphTopoSortComponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphTopoSortComponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphTopoSortComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static FunctionDescriptor SCIPdigraphTopoSortComponents$descriptor() {
        return SCIPdigraphTopoSortComponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphTopoSortComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MethodHandle SCIPdigraphTopoSortComponents$handle() {
        return SCIPdigraphTopoSortComponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphTopoSortComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MemorySegment SCIPdigraphTopoSortComponents$address() {
        return SCIPdigraphTopoSortComponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPdigraphTopoSortComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static int SCIPdigraphTopoSortComponents(MemorySegment digraph) {
        var mh$ = SCIPdigraphTopoSortComponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphTopoSortComponents", digraph);
            }
            return (int)mh$.invokeExact(digraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetNComponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetNComponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetNComponents$descriptor() {
        return SCIPdigraphGetNComponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MethodHandle SCIPdigraphGetNComponents$handle() {
        return SCIPdigraphGetNComponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * int SCIPdigraphGetNComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MemorySegment SCIPdigraphGetNComponents$address() {
        return SCIPdigraphGetNComponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * int SCIPdigraphGetNComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static int SCIPdigraphGetNComponents(MemorySegment digraph) {
        var mh$ = SCIPdigraphGetNComponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetNComponents", digraph);
            }
            return (int)mh$.invokeExact(digraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphGetComponent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphGetComponent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphGetComponent(SCIP_DIGRAPH *digraph, int compidx, int **nodes, int *nnodes)
     * }
     */
    public static FunctionDescriptor SCIPdigraphGetComponent$descriptor() {
        return SCIPdigraphGetComponent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphGetComponent(SCIP_DIGRAPH *digraph, int compidx, int **nodes, int *nnodes)
     * }
     */
    public static MethodHandle SCIPdigraphGetComponent$handle() {
        return SCIPdigraphGetComponent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphGetComponent(SCIP_DIGRAPH *digraph, int compidx, int **nodes, int *nnodes)
     * }
     */
    public static MemorySegment SCIPdigraphGetComponent$address() {
        return SCIPdigraphGetComponent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphGetComponent(SCIP_DIGRAPH *digraph, int compidx, int **nodes, int *nnodes)
     * }
     */
    public static void SCIPdigraphGetComponent(MemorySegment digraph, int compidx, MemorySegment nodes, MemorySegment nnodes) {
        var mh$ = SCIPdigraphGetComponent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphGetComponent", digraph, compidx, nodes, nnodes);
            }
            mh$.invokeExact(digraph, compidx, nodes, nnodes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphFreeComponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphFreeComponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphFreeComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static FunctionDescriptor SCIPdigraphFreeComponents$descriptor() {
        return SCIPdigraphFreeComponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphFreeComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MethodHandle SCIPdigraphFreeComponents$handle() {
        return SCIPdigraphFreeComponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphFreeComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static MemorySegment SCIPdigraphFreeComponents$address() {
        return SCIPdigraphFreeComponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphFreeComponents(SCIP_DIGRAPH *digraph)
     * }
     */
    public static void SCIPdigraphFreeComponents(MemorySegment digraph) {
        var mh$ = SCIPdigraphFreeComponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphFreeComponents", digraph);
            }
            mh$.invokeExact(digraph);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphPrint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphPrint");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphPrint(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPdigraphPrint$descriptor() {
        return SCIPdigraphPrint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphPrint(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static MethodHandle SCIPdigraphPrint$handle() {
        return SCIPdigraphPrint.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphPrint(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static MemorySegment SCIPdigraphPrint$address() {
        return SCIPdigraphPrint.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphPrint(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static void SCIPdigraphPrint(MemorySegment digraph, MemorySegment messagehdlr, MemorySegment file) {
        var mh$ = SCIPdigraphPrint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphPrint", digraph, messagehdlr, file);
            }
            mh$.invokeExact(digraph, messagehdlr, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphPrintGml {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphPrintGml");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphPrintGml(SCIP_DIGRAPH *digraph, FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPdigraphPrintGml$descriptor() {
        return SCIPdigraphPrintGml.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphPrintGml(SCIP_DIGRAPH *digraph, FILE *file)
     * }
     */
    public static MethodHandle SCIPdigraphPrintGml$handle() {
        return SCIPdigraphPrintGml.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphPrintGml(SCIP_DIGRAPH *digraph, FILE *file)
     * }
     */
    public static MemorySegment SCIPdigraphPrintGml$address() {
        return SCIPdigraphPrintGml.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphPrintGml(SCIP_DIGRAPH *digraph, FILE *file)
     * }
     */
    public static void SCIPdigraphPrintGml(MemorySegment digraph, MemorySegment file) {
        var mh$ = SCIPdigraphPrintGml.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphPrintGml", digraph, file);
            }
            mh$.invokeExact(digraph, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPdigraphPrintComponents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPdigraphPrintComponents");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPdigraphPrintComponents(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static FunctionDescriptor SCIPdigraphPrintComponents$descriptor() {
        return SCIPdigraphPrintComponents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPdigraphPrintComponents(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static MethodHandle SCIPdigraphPrintComponents$handle() {
        return SCIPdigraphPrintComponents.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPdigraphPrintComponents(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static MemorySegment SCIPdigraphPrintComponents$address() {
        return SCIPdigraphPrintComponents.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPdigraphPrintComponents(SCIP_DIGRAPH *digraph, SCIP_MESSAGEHDLR *messagehdlr, FILE *file)
     * }
     */
    public static void SCIPdigraphPrintComponents(MemorySegment digraph, MemorySegment messagehdlr, MemorySegment file) {
        var mh$ = SCIPdigraphPrintComponents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPdigraphPrintComponents", digraph, messagehdlr, file);
            }
            mh$.invokeExact(digraph, messagehdlr, file);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPbtnodeCreate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_INT,
            scip_h.C_POINTER,
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPbtnodeCreate");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPbtnodeCreate(SCIP_BT *tree, SCIP_BTNODE **node, void *dataptr)
     * }
     */
    public static FunctionDescriptor SCIPbtnodeCreate$descriptor() {
        return SCIPbtnodeCreate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPbtnodeCreate(SCIP_BT *tree, SCIP_BTNODE **node, void *dataptr)
     * }
     */
    public static MethodHandle SCIPbtnodeCreate$handle() {
        return SCIPbtnodeCreate.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPbtnodeCreate(SCIP_BT *tree, SCIP_BTNODE **node, void *dataptr)
     * }
     */
    public static MemorySegment SCIPbtnodeCreate$address() {
        return SCIPbtnodeCreate.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_RETCODE SCIPbtnodeCreate(SCIP_BT *tree, SCIP_BTNODE **node, void *dataptr)
     * }
     */
    public static int SCIPbtnodeCreate(MemorySegment tree, MemorySegment node, MemorySegment dataptr) {
        var mh$ = SCIPbtnodeCreate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPbtnodeCreate", tree, node, dataptr);
            }
            return (int)mh$.invokeExact(tree, node, dataptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPbtnodeFree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPbtnodeFree");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void SCIPbtnodeFree(SCIP_BT *tree, SCIP_BTNODE **node)
     * }
     */
    public static FunctionDescriptor SCIPbtnodeFree$descriptor() {
        return SCIPbtnodeFree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void SCIPbtnodeFree(SCIP_BT *tree, SCIP_BTNODE **node)
     * }
     */
    public static MethodHandle SCIPbtnodeFree$handle() {
        return SCIPbtnodeFree.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void SCIPbtnodeFree(SCIP_BT *tree, SCIP_BTNODE **node)
     * }
     */
    public static MemorySegment SCIPbtnodeFree$address() {
        return SCIPbtnodeFree.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void SCIPbtnodeFree(SCIP_BT *tree, SCIP_BTNODE **node)
     * }
     */
    public static void SCIPbtnodeFree(MemorySegment tree, MemorySegment node) {
        var mh$ = SCIPbtnodeFree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPbtnodeFree", tree, node);
            }
            mh$.invokeExact(tree, node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPbtnodeGetData {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPbtnodeGetData");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void *SCIPbtnodeGetData(SCIP_BTNODE *node)
     * }
     */
    public static FunctionDescriptor SCIPbtnodeGetData$descriptor() {
        return SCIPbtnodeGetData.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void *SCIPbtnodeGetData(SCIP_BTNODE *node)
     * }
     */
    public static MethodHandle SCIPbtnodeGetData$handle() {
        return SCIPbtnodeGetData.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * void *SCIPbtnodeGetData(SCIP_BTNODE *node)
     * }
     */
    public static MemorySegment SCIPbtnodeGetData$address() {
        return SCIPbtnodeGetData.ADDR;
    }

    /**
     * {@snippet lang=c :
     * void *SCIPbtnodeGetData(SCIP_BTNODE *node)
     * }
     */
    public static MemorySegment SCIPbtnodeGetData(MemorySegment node) {
        var mh$ = SCIPbtnodeGetData.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPbtnodeGetData", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPbtnodeGetParent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPbtnodeGetParent");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetParent(SCIP_BTNODE *node)
     * }
     */
    public static FunctionDescriptor SCIPbtnodeGetParent$descriptor() {
        return SCIPbtnodeGetParent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetParent(SCIP_BTNODE *node)
     * }
     */
    public static MethodHandle SCIPbtnodeGetParent$handle() {
        return SCIPbtnodeGetParent.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetParent(SCIP_BTNODE *node)
     * }
     */
    public static MemorySegment SCIPbtnodeGetParent$address() {
        return SCIPbtnodeGetParent.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetParent(SCIP_BTNODE *node)
     * }
     */
    public static MemorySegment SCIPbtnodeGetParent(MemorySegment node) {
        var mh$ = SCIPbtnodeGetParent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPbtnodeGetParent", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class SCIPbtnodeGetLeftchild {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            scip_h.C_POINTER,
            scip_h.C_POINTER
        );

        public static final MemorySegment ADDR = scip_h.findOrThrow("SCIPbtnodeGetLeftchild");

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(ADDR, DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetLeftchild(SCIP_BTNODE *node)
     * }
     */
    public static FunctionDescriptor SCIPbtnodeGetLeftchild$descriptor() {
        return SCIPbtnodeGetLeftchild.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetLeftchild(SCIP_BTNODE *node)
     * }
     */
    public static MethodHandle SCIPbtnodeGetLeftchild$handle() {
        return SCIPbtnodeGetLeftchild.HANDLE;
    }

    /**
     * Address for:
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetLeftchild(SCIP_BTNODE *node)
     * }
     */
    public static MemorySegment SCIPbtnodeGetLeftchild$address() {
        return SCIPbtnodeGetLeftchild.ADDR;
    }

    /**
     * {@snippet lang=c :
     * SCIP_BTNODE *SCIPbtnodeGetLeftchild(SCIP_BTNODE *node)
     * }
     */
    public static MemorySegment SCIPbtnodeGetLeftchild(MemorySegment node) {
        var mh$ = SCIPbtnodeGetLeftchild.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("SCIPbtnodeGetLeftchild", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

