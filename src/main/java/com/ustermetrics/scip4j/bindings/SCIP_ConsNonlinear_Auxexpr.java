// Generated by jextract

package com.ustermetrics.scip4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct SCIP_ConsNonlinear_Auxexpr {
 *     double coefs[3];
 *     double cst;
 *     SCIP_VAR *auxvar;
 *     unsigned int underestimate;
 *     unsigned int overestimate;
 * }
 * }
 */
public class SCIP_ConsNonlinear_Auxexpr {

    SCIP_ConsNonlinear_Auxexpr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.sequenceLayout(3, scip_h.C_DOUBLE).withName("coefs"),
        scip_h.C_DOUBLE.withName("cst"),
        scip_h.C_POINTER.withName("auxvar"),
        scip_h.C_INT.withName("underestimate"),
        scip_h.C_INT.withName("overestimate")
    ).withName("SCIP_ConsNonlinear_Auxexpr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final SequenceLayout coefs$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("coefs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static final SequenceLayout coefs$layout() {
        return coefs$LAYOUT;
    }

    private static final long coefs$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static final long coefs$offset() {
        return coefs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static MemorySegment coefs(MemorySegment struct) {
        return struct.asSlice(coefs$OFFSET, coefs$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static void coefs(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, coefs$OFFSET, coefs$LAYOUT.byteSize());
    }

    private static long[] coefs$DIMS = { 3 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static long[] coefs$dimensions() {
        return coefs$DIMS;
    }
    private static final VarHandle coefs$ELEM_HANDLE = coefs$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static double coefs(MemorySegment struct, long index0) {
        return (double)coefs$ELEM_HANDLE.get(struct, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * double coefs[3]
     * }
     */
    public static void coefs(MemorySegment struct, long index0, double fieldValue) {
        coefs$ELEM_HANDLE.set(struct, 0L, index0, fieldValue);
    }

    private static final OfDouble cst$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("cst"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double cst
     * }
     */
    public static final OfDouble cst$layout() {
        return cst$LAYOUT;
    }

    private static final long cst$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double cst
     * }
     */
    public static final long cst$offset() {
        return cst$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double cst
     * }
     */
    public static double cst(MemorySegment struct) {
        return struct.get(cst$LAYOUT, cst$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double cst
     * }
     */
    public static void cst(MemorySegment struct, double fieldValue) {
        struct.set(cst$LAYOUT, cst$OFFSET, fieldValue);
    }

    private static final AddressLayout auxvar$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("auxvar"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * SCIP_VAR *auxvar
     * }
     */
    public static final AddressLayout auxvar$layout() {
        return auxvar$LAYOUT;
    }

    private static final long auxvar$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * SCIP_VAR *auxvar
     * }
     */
    public static final long auxvar$offset() {
        return auxvar$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * SCIP_VAR *auxvar
     * }
     */
    public static MemorySegment auxvar(MemorySegment struct) {
        return struct.get(auxvar$LAYOUT, auxvar$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * SCIP_VAR *auxvar
     * }
     */
    public static void auxvar(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(auxvar$LAYOUT, auxvar$OFFSET, fieldValue);
    }

    private static final OfInt underestimate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("underestimate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int underestimate
     * }
     */
    public static final OfInt underestimate$layout() {
        return underestimate$LAYOUT;
    }

    private static final long underestimate$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int underestimate
     * }
     */
    public static final long underestimate$offset() {
        return underestimate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int underestimate
     * }
     */
    public static int underestimate(MemorySegment struct) {
        return struct.get(underestimate$LAYOUT, underestimate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int underestimate
     * }
     */
    public static void underestimate(MemorySegment struct, int fieldValue) {
        struct.set(underestimate$LAYOUT, underestimate$OFFSET, fieldValue);
    }

    private static final OfInt overestimate$LAYOUT = (OfInt)$LAYOUT.select(groupElement("overestimate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int overestimate
     * }
     */
    public static final OfInt overestimate$layout() {
        return overestimate$LAYOUT;
    }

    private static final long overestimate$OFFSET = 44;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int overestimate
     * }
     */
    public static final long overestimate$offset() {
        return overestimate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int overestimate
     * }
     */
    public static int overestimate(MemorySegment struct) {
        return struct.get(overestimate$LAYOUT, overestimate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int overestimate
     * }
     */
    public static void overestimate(MemorySegment struct, int fieldValue) {
        struct.set(overestimate$LAYOUT, overestimate$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

