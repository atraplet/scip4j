// Generated by jextract

package com.ustermetrics.scip4j.bindings;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * union {
 *     double realval;
 *     int intval;
 *     int intvals[2];
 *     unsigned int uintval;
 *     void *ptrval;
 * }
 * }
 */
public class SCIP_EXPRITER_USERDATA {

    SCIP_EXPRITER_USERDATA() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.unionLayout(
        scip_h.C_DOUBLE.withName("realval"),
        scip_h.C_INT.withName("intval"),
        MemoryLayout.sequenceLayout(2, scip_h.C_INT).withName("intvals"),
        scip_h.C_INT.withName("uintval"),
        scip_h.C_POINTER.withName("ptrval")
    ).withName("$anon$702:9");

    /**
     * The layout of this union
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfDouble realval$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("realval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * double realval
     * }
     */
    public static final OfDouble realval$layout() {
        return realval$LAYOUT;
    }

    private static final long realval$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * double realval
     * }
     */
    public static final long realval$offset() {
        return realval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * double realval
     * }
     */
    public static double realval(MemorySegment union) {
        return union.get(realval$LAYOUT, realval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * double realval
     * }
     */
    public static void realval(MemorySegment union, double fieldValue) {
        union.set(realval$LAYOUT, realval$OFFSET, fieldValue);
    }

    private static final OfInt intval$LAYOUT = (OfInt)$LAYOUT.select(groupElement("intval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int intval
     * }
     */
    public static final OfInt intval$layout() {
        return intval$LAYOUT;
    }

    private static final long intval$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int intval
     * }
     */
    public static final long intval$offset() {
        return intval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int intval
     * }
     */
    public static int intval(MemorySegment union) {
        return union.get(intval$LAYOUT, intval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int intval
     * }
     */
    public static void intval(MemorySegment union, int fieldValue) {
        union.set(intval$LAYOUT, intval$OFFSET, fieldValue);
    }

    private static final SequenceLayout intvals$LAYOUT = (SequenceLayout)$LAYOUT.select(groupElement("intvals"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static final SequenceLayout intvals$layout() {
        return intvals$LAYOUT;
    }

    private static final long intvals$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static final long intvals$offset() {
        return intvals$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static MemorySegment intvals(MemorySegment union) {
        return union.asSlice(intvals$OFFSET, intvals$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static void intvals(MemorySegment union, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, union, intvals$OFFSET, intvals$LAYOUT.byteSize());
    }

    private static long[] intvals$DIMS = { 2 };

    /**
     * Dimensions for array field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static long[] intvals$dimensions() {
        return intvals$DIMS;
    }
    private static final VarHandle intvals$ELEM_HANDLE = intvals$LAYOUT.varHandle(sequenceElement());

    /**
     * Indexed getter for field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static int intvals(MemorySegment union, long index0) {
        return (int)intvals$ELEM_HANDLE.get(union, 0L, index0);
    }

    /**
     * Indexed setter for field:
     * {@snippet lang=c :
     * int intvals[2]
     * }
     */
    public static void intvals(MemorySegment union, long index0, int fieldValue) {
        intvals$ELEM_HANDLE.set(union, 0L, index0, fieldValue);
    }

    private static final OfInt uintval$LAYOUT = (OfInt)$LAYOUT.select(groupElement("uintval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * unsigned int uintval
     * }
     */
    public static final OfInt uintval$layout() {
        return uintval$LAYOUT;
    }

    private static final long uintval$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * unsigned int uintval
     * }
     */
    public static final long uintval$offset() {
        return uintval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * unsigned int uintval
     * }
     */
    public static int uintval(MemorySegment union) {
        return union.get(uintval$LAYOUT, uintval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * unsigned int uintval
     * }
     */
    public static void uintval(MemorySegment union, int fieldValue) {
        union.set(uintval$LAYOUT, uintval$OFFSET, fieldValue);
    }

    private static final AddressLayout ptrval$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("ptrval"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void *ptrval
     * }
     */
    public static final AddressLayout ptrval$layout() {
        return ptrval$LAYOUT;
    }

    private static final long ptrval$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void *ptrval
     * }
     */
    public static final long ptrval$offset() {
        return ptrval$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void *ptrval
     * }
     */
    public static MemorySegment ptrval(MemorySegment union) {
        return union.get(ptrval$LAYOUT, ptrval$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void *ptrval
     * }
     */
    public static void ptrval(MemorySegment union, MemorySegment fieldValue) {
        union.set(ptrval$LAYOUT, ptrval$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this union
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction} (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

